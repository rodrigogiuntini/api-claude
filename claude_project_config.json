{
    "api": {
        "claude_api_key": "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",
        "api_endpoint": "https://api.anthropic.com/v1/messages",
        "model": "claude-3-7-sonnet-20250219"
    },
    "project": {
        "name": "restaurante-saas",
        "version": "0.0.1",
        "progress": 0,
        "modules": [
            {
                "name": "core",
                "description": "N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant",
                "status": "in_progress",
                "priority": 1,
                "created_at": "2025-03-17T17:21:33.714056",
                "completed_at": null,
                "files": [
                    "/core/config/app.php",
                    "restaurante-sistema/core/Router.php",
                    "restaurante-sistema/core/Controller.php",
                    "restaurante-sistema/core/View.php",
                    "restaurante-sistema/core/Response.php",
                    "restaurante-sistema/core/ErrorHandler.php",
                    "restaurante-sistema/restaurante-sistema/core/Database/MigrationManager.php",
                    "restaurante-sistema/restaurante-sistema/core/Database/Migration.php",
                    "restaurante-sistema/restaurante-sistema/migrate.php",
                    "restaurante-sistema/restaurante-sistema/database/migrations/001_create_tenants_table.php",
                    "restaurante-sistema/restaurante-sistema/database/migrations/002_create_users_table.php",
                    "restaurante-sistema/restaurante-sistema/database/migrations/003_create_roles_table.php",
                    "restaurante-sistema/restaurante-sistema/database/migrations/004_create_permissions_table.php",
                    "restaurante-sistema/restaurante-sistema/database/migrations/005_create_role_permissions_table.php",
                    "restaurante-sistema/restaurante-sistema/database/migrations/006_create_access_logs_table.php",
                    "restaurante-sistema/restaurante-sistema/models/User.php",
                    "restaurante-sistema/restaurante-sistema/controllers/AuthController.php",
                    "restaurante-sistema/Migration Manager",
                    "restaurante-sistema/Base Migration Class",
                    "restaurante-sistema/CLI Migration Runner",
                    "restaurante-sistema/Actual Migration Files",
                    "restaurante-sistema/Modelo de Usu\u00e1rio",
                    "restaurante-sistema/Controlador de Autentica\u00e7\u00e3o",
                    "restaurante-sistema/core/Database/MigrationManager.php",
                    "restaurante-sistema/core/Database/Migration.php",
                    "restaurante-sistema/migrate.php",
                    "restaurante-sistema/database/migrations/001_create_tenants_table.php",
                    "restaurante-sistema/database/migrations/002_create_users_table.php",
                    "restaurante-sistema/database/migrations/003_create_roles_table.php",
                    "restaurante-sistema/database/migrations/004_create_permissions_table.php",
                    "restaurante-sistema/database/migrations/005_create_role_permissions_table.php",
                    "restaurante-sistema/database/migrations/006_create_access_logs_table.php",
                    "restaurante-sistema/core/App.php",
                    "restaurante-sistema/core/Database/DatabaseConnection.php",
                    "restaurante-sistema/core/Model.php",
                    "restaurante-sistema/core/Exceptions/AppException.php",
                    "restaurante-sistema/core/Exceptions/DatabaseException.php",
                    "restaurante-sistema/core/Exceptions/ModelException.php",
                    "restaurante-sistema/core/Exceptions/ValidationException.php",
                    "restaurante-sistema/Arquivo: core/App.php",
                    "restaurante-sistema/Arquivo: core/Database/DatabaseConnection.php",
                    "restaurante-sistema/Arquivo: core/Model.php",
                    "restaurante-sistema/Arquivo: core/Exceptions/AppException.php",
                    "restaurante-sistema/Arquivo: core/Exceptions/DatabaseException.php",
                    "restaurante-sistema/Arquivo: core/Exceptions/ModelException.php",
                    "restaurante-sistema/Arquivo: core/Exceptions/ValidationException.php",
                    "restaurante-sistema/config/app.php",
                    "restaurante-sistema/1. Arquivo de Configura\u00e7\u00e3o da Aplica\u00e7\u00e3o",
                    "restaurante-sistema/2. Classe Principal da Aplica\u00e7\u00e3o",
                    "restaurante-sistema/3. Classe de Conex\u00e3o com o Banco de Dados",
                    "restaurante-sistema/4. Classe Modelo Base",
                    "restaurante-sistema/5. Classes de Exce\u00e7\u00f5es do Sistema",
                    "restaurante-sistema/6. Classe de Tratamento de Erros",
                    "restaurante-sistema/7. Classe de Roteamento"
                ],
                "dependencies": [],
                "progress": 0
            },
            {
                "name": "subscription",
                "description": "Sistema de assinaturas e integra\u00e7\u00e3o com Stripe",
                "status": "pending",
                "priority": 2,
                "created_at": "2025-03-17T17:21:33.714206",
                "completed_at": null,
                "files": [],
                "dependencies": [],
                "progress": 0
            },
            {
                "name": "restaurant_types",
                "description": "Gest\u00e3o de diferentes tipos de restaurante e fluxos espec\u00edficos",
                "status": "pending",
                "priority": 3,
                "created_at": "2025-03-17T17:21:33.714343",
                "completed_at": null,
                "files": [],
                "dependencies": [],
                "progress": 0
            },
            {
                "name": "tables_qrcode",
                "description": "Gerenciamento de mesas e sistema de QR Code",
                "status": "pending",
                "priority": 4,
                "created_at": "2025-03-17T17:21:33.714479",
                "completed_at": null,
                "files": [],
                "dependencies": [],
                "progress": 0
            },
            {
                "name": "menu_orders",
                "description": "Card\u00e1pio digital e sistema de pedidos",
                "status": "pending",
                "priority": 5,
                "created_at": "2025-03-17T17:21:33.714632",
                "completed_at": null,
                "files": [],
                "dependencies": [],
                "progress": 0
            },
            {
                "name": "payments",
                "description": "Processamento de pagamentos e divis\u00e3o de contas",
                "status": "pending",
                "priority": 6,
                "created_at": "2025-03-17T17:21:33.714887",
                "completed_at": null,
                "files": [],
                "dependencies": [],
                "progress": 0
            },
            {
                "name": "integrations",
                "description": "Integra\u00e7\u00f5es com servi\u00e7os externos (iFood, sistemas fiscais)",
                "status": "pending",
                "priority": 7,
                "created_at": "2025-03-17T17:21:33.715092",
                "completed_at": null,
                "files": [],
                "dependencies": [],
                "progress": 0
            }
        ]
    },
    "context": {
        "current_module": "core",
        "completed_modules": [],
        "in_progress_modules": [
            "core"
        ]
    },
    "history": {
        "sessions": [
            {
                "id": "d2434b66b7391b9d01e447baa6c93a8d",
                "timestamp": "2025-03-17T19:11:13.629229",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\nDescri\u00e7\u00e3o detalhada do projeto n\u00e3o dispon\u00edvel.\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\nNenhum arquivo criado ainda para este m\u00f3dulo.\n\n## Requisitos para o Pr\u00f3ximo Passo\nDesenvolva a infraestrutura base do sistema SaaS de gest\u00e3o de restaurantes em PHP/MySQL.\n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# Plano de Desenvolvimento para o M\u00f3dulo Core do Sistema SaaS de Restaurantes\n\n## Vis\u00e3o Geral da Arquitetura\nPara um sistema SaaS de gest\u00e3o de restaurantes, o m\u00f3dulo core precisa fornecer:\n- Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o\n- Gerenciamento de tenants (multi-tenant)\n- Configura\u00e7\u00e3o base do sistema\n- Estrutura de conex\u00e3o com banco de dados\n- Sistema de logs e erros\n\n## Estrutura de Diret\u00f3rios Proposta\n```\n/core\n  /config\n    database.php\n    app.php\n  /auth\n    Auth.php\n    Session.php\n    UserProvider.php\n  /tenant\n    TenantManager.php\n    Tenant.php\n  /database\n    Connection.php\n    QueryBuilder.php\n  /helpers\n    functions.php\n  /middleware\n    AuthMiddleware.php\n    TenantMiddleware.php\n  bootstrap.php\n  autoload.php\n```\n\n## Arquivos a Serem Implementados\n\n### 1. Configura\u00e7\u00e3o B\u00e1sica\n\n#### `/core/config/app.php`\n```php\n<?php\n\nreturn [\n    'name' => 'RestauranteSaaS',\n    'env' => $_ENV['APP_ENV'] ?? 'production',\n    'debug' => $_ENV['APP_DEBUG'] ?? false,\n    'url' => $_ENV['APP_URL'] ?? 'http://localhost',\n    'timezone' => 'UTC',\n    'locale' => 'pt_BR',\n    'key' => $_ENV['APP_KEY'] ?? null,\n    'cipher' => 'AES-256-CBC',\n    'log' => 'daily',\n    'log_level' => 'debug',\n];\n```\n\n#### `/core/config/database.php`\n```php\n<?php\n\nreturn [\n    'default' => $_ENV['DB_CONNECTION'] ?? 'mysql',\n    \n    'connections' => [\n        'mysql' => [\n            'driver' => 'mysql',\n            'host' => $_ENV['DB_HOST'] ?? 'localhost',\n            'port' => $_ENV['DB_PORT'] ?? '3306',\n            'database' => $_ENV['DB_DATABASE'] ?? 'restaurante_saas',\n            'username' => $_ENV['DB_USERNAME'] ?? 'root',\n            'password' => $_ENV['DB_PASSWORD'] ?? '',\n            'charset' => 'utf8mb4',\n            'collation' => 'utf8mb4_unicode_ci',\n            'prefix' => '',\n            'strict' => true,\n            'engine' => null,\n        ],\n    ],\n];\n```\n\n### 2. Sistema de Autentica\u00e7\u00e3o\n\n#### `/core/auth/Auth.php`\n```php\n<?php\n\nnamespace Core\\Auth;\n\nclass Auth\n{\n    private static $instance = null;\n    private $user = null;\n    private $userProvider;\n    private $session;\n    \n    private function __construct(UserProvider $userProvider, Session $session)\n    {\n        $this->userProvider = $userProvider;\n        $this->session = $session;\n    }\n    \n    public static function getInstance(): Auth\n    {\n        if (self::$instance === null) {\n            self::$instance = new self(\n                new UserProvider(),\n                new Session()\n            );\n        }\n        \n        return self::$instance;\n    }\n    \n    public function attempt(string $email, string $password): bool\n    {\n        $user = $this->userProvider->findByCredentials($email, $password);\n        \n        if ($user) {\n            $this->login($user);\n            return true;\n        }\n        \n        return false;\n    }\n    \n    public function login(array $user): void\n    {\n        $this->user = $user;\n        $this->session->set('auth_user_id', $user['id']);\n        $this->session->set('auth_tenant_id', $user['tenant_id']);\n    }\n    \n    public function logout(): void\n    {\n        $this->user = null;\n        $this->session->remove('auth_user_id');\n        $this->session->remove('auth_tenant_id');\n    }\n    \n    public function check(): bool\n    {\n        return $this->user() !== null;\n    }\n    \n    public function user()\n    {\n        if ($this->user !== null) {\n            return $this->user;\n        }\n        \n        $userId = $this->session->get('auth_user_id');\n        \n        if ($userId) {\n            $this->user = $this->userProvider->findById($userId);\n            return $this->user;\n        }\n        \n        return null;\n    }\n    \n    public function id()\n    {\n        $user = $this->user();\n        return $user ? $user['id'] : null;\n    }\n    \n    public function tenantId()\n    {\n        return $this->session->get('auth_tenant_id');\n    }\n}\n```\n\n#### `/core/auth/Session.php`\n```php\n<?php\n\nnamespace Core\\Auth;\n\nclass Session\n{\n    public function __construct()\n    {\n        if (session_status() === PHP_SESSION_NONE) {\n            session_start();\n        }\n    }\n    \n    public function get(string $key, $default = null)\n    {\n        return $_SESSION[$key] ?? $default;\n    }\n    \n    public function set(string $key, $value): void\n    {\n        $_SESSION[$key] = $value;\n    }\n    \n    public function has(string $key): bool\n    {\n        return isset($_SESSION[$key]);\n    }\n    \n    public function remove(string $key): void\n    {\n        if ($this->has($key)) {\n            unset($_SESSION[$key]);\n        }\n    }\n    \n    public function flush(): void\n    {\n        session_unset();\n    }\n    \n    public function regenerate(): bool\n    {\n        return session_regenerate_id(true);\n    }\n}\n```\n\n#### `/core/auth/UserProvider.php`\n```php\n<?php\n\nnamespace Core\\Auth;\n\nuse Core\\Database\\Connection;\nuse Core\\Database\\QueryBuilder;\n\nclass UserProvider\n{\n    protected $db;\n    \n    public function __construct()\n    {\n        $this->db = new QueryBuilder(Connection::getInstance()->getPdo());\n    }\n    \n    public function findById(int $id)\n    {\n        return $this->db->table('users')\n            ->where('id', '=', $id)\n            ->first();\n    }\n    \n    public function findByCredentials(string $email, string $password)\n    {\n        $user = $this->db->table('users')\n            ->where('email', '=', $email)\n            ->first();\n        \n        if ($user && password_verify($password, $user['password'])) {\n            unset($user['password']);\n            return $user;\n        }\n        \n        return null;\n    }\n    \n    public function create(array $data)\n    {\n        $data['password'] = password_hash($data['password'], PASSWORD_BCRYPT, ['cost' => 12]);\n        \n        return $this->db->table('users')\n            ->insert($data);\n    }\n}\n```\n\n### 3. Sistema Multi-Tenant\n\n#### `/core/tenant/TenantManager.php`\n```php\n<?php\n\nnamespace Core\\Tenant;\n\nuse Core\\Auth\\Auth;\nuse Core\\Database\\Connection;\nuse Core\\Database\\QueryBuilder;\n\nclass TenantManager\n{\n    private static $instance = null;\n    private $currentTenant = null;\n    private $db;\n    \n    private function __construct()\n    {\n        $this->db = new QueryBuilder(Connection::getInstance()->getPdo());\n    }\n    \n    public static function getInstance(): TenantManager\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n        \n        return self::$instance;\n    }\n    \n    public function setTenantFromSession(): void\n    {\n        $tenantId = Auth::getInstance()->tenantId();\n        \n        if ($tenantId) {\n            $tenant = $this->getTenantById($tenantId);\n            \n            if ($tenant) {\n                $this->currentTenant = new Tenant(\n                    $tenant['id'],\n                    $tenant['name'],\n                    $tenant['domain'],\n                    $tenant['status']\n                );\n            }\n        }\n    }\n    \n    public function getTenantById(int $id)\n    {\n        return $this->db->table('tenants')\n            ->where('id', '=', $id)\n            ->first();\n    }\n    \n    public function getTenantByDomain(string $domain)\n    {\n        return $this->db->table('tenants')\n            ->where('domain', '=', $domain)\n            ->first();\n    }\n    \n    public function getCurrentTenant(): ?Tenant\n    {\n        return $this->currentTenant;\n    }\n    \n    public function createTenant(array $data): int\n    {\n        return $this->db->table('tenants')\n            ->insertGetId($data);\n    }\n    \n    public function isTenantActive(int $tenantId): bool\n    {\n        $tenant = $this->getTenantById($tenantId);\n        return $tenant && $tenant['status'] === 'active';\n    }\n}\n```\n\n#### `/core/tenant/Tenant.php`\n```php\n<?php\n\nnamespace Core\\Tenant;\n\nclass Tenant\n{\n    private $id;\n    private $name;\n    private $domain;\n    private $status;\n    \n    public function __construct(int $id, string $name, string $domain, string $status)\n    {\n        $this->id = $id;\n        $this->name = $name;\n        $this->domain = $domain;\n        $this->status = $status;\n    }\n    \n    public function getId(): int\n    {\n        return $this->id;\n    }\n    \n    public function getName(): string\n    {\n        return $this->name;\n    }\n    \n    public function getDomain(): string\n    {\n        return $this->domain;\n    }\n    \n    public function getStatus(): string\n    {\n        return $this->status;\n    }\n    \n    public function isActive(): bool\n    {\n        return $this->status === 'active';\n    }\n}\n```\n\n### 4. Sistema de Banco de Dados\n\n#### `/core/database/Connection.php`\n```php\n<?php\n\nnamespace Core\\Database;\n\nuse PDO;\nuse PDOException;\n\nclass Connection\n{\n    private static $instance = null;\n    private $pdo;\n    \n    private function __construct()\n    {\n        $config = require __DIR__ . '/../config/database.php';\n        $defaultConnection = $config['default'];\n        $connectionConfig = $config['connections'][$defaultConnection];\n        \n        $dsn = sprintf(\n            '%s:host=%s;port=%s;dbname=%s;charset=%s',\n            $connectionConfig['driver'],\n            $connectionConfig['host'],\n            $connectionConfig['port'],\n            $connectionConfig['database'],\n            $connectionConfig['charset']\n        );\n        \n        try {\n            $this->pdo = new PDO(\n                $dsn,\n                $connectionConfig['username'],\n                $connectionConfig['password'],\n                [\n                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n                    PDO::ATTR_EMULATE_PREPARES => false,\n                ]\n            );\n        } catch (PDOException $e) {\n            die('Erro de conex\u00e3o com o banco de dados: ' . $e->getMessage());\n        }\n    }\n    \n    public static function getInstance(): Connection\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n        \n        return self::$instance;\n    }\n    \n    public function getPdo(): PDO\n    {\n        return $this->pdo;\n    }\n}\n```\n\n#### `/core/database/QueryBuilder.php`\n```php\n<?php\n\nnamespace Core\\Database;\n\nuse PDO;\nuse Core\\Auth\\Auth;\nuse Core\\Tenant\\TenantManager;\n\nclass QueryBuilder\n{\n    protected $pdo;\n    protected $table;\n    protected $where = [];\n    protected $bindings = [];\n    protected $limit;\n    protected $offset;\n    protected $orderBy = [];\n    protected $columns = ['*'];\n    \n    public function __construct(PDO $pdo)\n    {\n        $this->pdo = $pdo;\n    }\n    \n    public function table(string $table): self\n    {\n        $this->table = $table;\n        return $this;\n    }\n    \n    public function where(string $column, string $operator, $value): self\n    {\n        $this->where[] = compact('column', 'operator', 'value');\n        return $this;\n    }\n    \n    public function select($columns = ['*']): self\n    {\n        $this->columns = is_array($columns) ? $columns : func_get_args();\n        return $this;\n    }\n    \n    public function limit(int $limit): self\n    {\n        $this->limit = $limit;\n        return $this;\n    }\n    \n    public function offset(int $offset): self\n    {\n        $this->offset = $offset;\n        return $this;\n    }\n    \n    public function orderBy(string $column, string $direction = 'ASC'): self\n    {\n        $this->orderBy[] = compact('column', 'direction');\n        return $this;\n    }\n    \n    public function get(): array\n    {\n        $sql = $this->buildSelectQuery();\n        \n        $statement = $this->pdo->prepare($sql);\n        $statement->execute($this->bindings);\n        \n        return $statement->fetchAll();\n    }\n    \n    public function first()\n    {\n        $records = $this->limit(1)->get();\n        \n        return $records[0] ?? null;\n    }\n    \n    public function insert(array $data): bool\n    {\n        if ($this->isTenantTable($this->table)) {\n            $data['tenant_id'] = Auth::getInstance()->tenantId();\n        }\n        \n        $sql = sprintf(\n            'INSERT INTO %s (%s) VALUES (%s)',\n            $this->table,\n            implode(', ', array_keys($data)),\n            implode(', ', array_fill(0, count($data), '?'))\n        );\n        \n        $statement = $this->pdo->prepare($sql);\n        \n        return $statement->execute(array_values($data));\n    }\n    \n    public function insertGetId(array $data): int\n    {\n        $this->insert($data);\n        return (int) $this->pdo->lastInsertId();\n    }\n    \n    public function update(array $data): int\n    {\n        $fields = [];\n        \n        foreach (array_keys($data) as $key) {\n            $fields[] = \"$key = ?\";\n        }\n        \n        $sql = sprintf(\n            'UPDATE %s SET %s %s',\n            $this->table,\n            implode(', ', $fields),\n            $this->buildWhereClause()\n        );\n        \n        $statement = $this->pdo->prepare($sql);\n        $values = array_merge(array_values($data), $this->bindings);\n        $statement->execute($values);\n        \n        return $statement->rowCount();\n    }\n    \n    public function delete(): int\n    {\n        $sql = sprintf('DELETE FROM %s %s', $this->table, $this->buildWhereClause());\n        \n        $statement = $this->pdo->prepare($sql);\n        $statement->execute($this->bindings);\n        \n        return $statement->rowCount();\n    }\n    \n    protected function buildSelectQuery(): string\n    {\n        $this->bindings = [];\n        \n        $query = sprintf(\n            'SELECT %s FROM %s',\n            implode(', ', $this->columns),\n            $this->table\n        );\n        \n        if ($this->isTenantTable($this->table)) {\n            $this->where('tenant_id', '=', Auth::getInstance()->tenantId());\n        }\n        \n        $query .= $this->buildWhereClause();\n        \n        if (!empty($this->orderBy)) {\n            $query .= ' ORDER BY ';\n            $orderClauses = [];\n            \n            foreach ($this->orderBy as $order) {\n                $orderClauses[] = $order['column'] . ' ' . $order['direction'];\n            }\n            \n            $query .= implode(', ', $orderClauses);\n        }\n        \n        if ($this->limit !== null) {\n            $query .= ' LIMIT ' . $this->limit;\n        }\n        \n        if ($this->offset !== null) {\n            $query .= ' OFFSET ' . $this->offset;\n        }\n        \n        return $query;\n    }\n    \n    protected function buildWhereClause(): string\n    {\n        if (empty($this->where)) {\n            return '';\n        }\n        \n        $whereClauses = [];\n        \n        foreach ($this->where as $condition) {\n            $whereClauses[] = sprintf(\n                '%s %s ?',\n                $condition['column'],\n                $condition['operator']\n            );\n            \n            $this->bindings[] = $condition['value'];\n        }\n        \n        return ' WHERE ' . implode(' AND ', $whereClauses);\n    }\n    \n    protected function isTenantTable(string $table): bool\n    {\n        // Lista de tabelas que pertencem a um tenant espec\u00edfico\n        $tenantTables = [\n            'products', 'orders', 'tables', 'employees',\n            'menus', 'categories', 'customers', 'reservations'\n        ];\n        \n        // Tabelas do sistema que n\u00e3o s\u00e3o isoladas por tenant\n        $systemTables = ['users', 'tenants', 'roles', 'permissions'];\n        \n        return in_array($table, $tenantTables) && !in_array($table, $systemTables);\n    }\n}\n```\n\n### 5. Middleware\n\n#### `/core/middleware/AuthMiddleware.php`\n```php\n<?php\n\nnamespace Core\\Middleware;\n\nuse Core\\Auth\\Auth;\n\nclass AuthMiddleware\n{\n    public function handle(): bool\n    {\n        if (!Auth::getInstance()->check()) {\n            header('Location: /login');\n            exit;\n        }\n        \n        return true;\n    }\n}\n```\n\n#### `/core/middleware/TenantMiddleware.php`\n```php\n<?php\n\nnamespace Core\\Middleware;\n\nuse Core\\Auth\\Auth;\nuse Core\\Tenant\\TenantManager;\n\nclass TenantMiddleware\n{\n    public function handle(): bool\n    {\n        if (!Auth::getInstance()->check()) {\n            header('Location: /login');\n            exit;\n        }\n        \n        $tenantId = Auth::getInstance()->tenantId();\n        \n        if (!$tenantId || !TenantManager::getInstance()->isTenantActive($tenantId)) {\n            Auth::getInstance()->logout();\n            header('Location: /login?error=tenant_inactive');\n            exit;\n        }\n        \n        // Define o tenant atual para a requisi\u00e7\u00e3o\n        TenantManager::getInstance()->setTenantFromSession();\n        \n        return true;\n    }\n}\n```\n\n### 6. Arquivo de Inicializa\u00e7\u00e3o\n\n#### `/core/bootstrap.php`\n```php\n<?php\n\nrequire_once __DIR__ . '/autoload.php';\n\n// Carrega fun\u00e7\u00f5es auxiliares\nrequire_once __DIR__ . '/helpers/functions.php';\n\n// Inicializa sess\u00e3o para autentica\u00e7\u00e3o\nsession_start();\n\n// Carrega configura\u00e7\u00f5es\n$app = require_once __DIR__ . '/config/app.php';\n\n// Definir timezone\ndate_default_timezone_set($app['timezone']);\n\n// Inicializa componentes essenciais\nuse Core\\Auth\\Auth;\nuse Core\\Tenant\\TenantManager;\n\n// Se o usu\u00e1rio est\u00e1 autenticado, carrega as informa\u00e7\u00f5es do tenant\nif (Auth::getInstance()->check()) {\n    TenantManager::getInstance()->setTenantFromSession();\n}\n\n// Configura\u00e7\u00f5es de erro baseadas no ambiente\nif ($app['env'] === 'development' && $app['debug'] === true) {\n    ini_set('display_errors', 1);\n    ini_set('display_startup_errors', 1);\n    error_reporting(E_ALL);\n} else {\n    ini_set('display_errors', 0);\n    error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_USER_NOTICE & ~E_USER_DEPRECATED);\n}\n```\n\n#### `/core/autoload.php`\n```php\n<?php\n\nspl_autoload_register(function ($class) {\n    // Converte namespace para caminho de arquivo\n    $prefix = '';\n    $baseDir = __DIR__ . '/../';\n    \n    // Se class come\u00e7a com o prefixo\n    $len = strlen($prefix);\n    if (strncmp($prefix, $class, $len) !== 0) {\n        return;\n    }\n    \n    // Obt\u00e9m o caminho relativo da classe\n    $relativeClass = substr($class, $len);\n    \n    // Converte namespace para caminho de arquivo\n    $file = $baseDir . str_replace('\\\\', '/', $relativeClass) . '.php';\n    \n    // Se o arquivo existe, carregue-o\n    if (file_exists($file)) {\n        require $file;\n    }\n});\n```\n\n#### `/core/helpers/functions.php`\n```php\n<?php\n\nif (!function_exists('config')) {\n    /**\n     * Obt\u00e9m um valor de configura\u00e7\u00e3o\n     */\n    function config(string $key, $default = null)\n    {\n        $parts = explode('.', $key);\n        $file = array_shift($parts);\n        \n        $config = require __DIR__ . \"/../config/{$file}.php\";\n        \n        foreach ($parts as $part) {\n            if (!isset($config[$part])) {\n                return $default;\n            }\n            \n            $config = $config[$part];\n        }\n        \n        return $config;\n    }\n}\n\nif (!function_exists('auth')) {\n    /**\n     * Obt\u00e9m a inst\u00e2ncia de autentica\u00e7\u00e3o\n     */\n    function auth()\n    {\n        return \\Core\\Auth\\Auth::getInstance();\n    }\n}\n\nif (!function_exists('tenant')) {\n    /**\n     * Obt\u00e9m o tenant atual\n     */\n    function tenant()\n    {\n        return \\Core\\Tenant\\TenantManager::getInstance()->getCurrentTenant();\n    }\n}\n\nif (!function_exists('redirect')) {\n    /**\n     * Redireciona para uma URL\n     */\n    function redirect(string $url): void\n    {\n        header(\"Location: {$url}\");\n        exit;\n    }\n}\n\nif (!function_exists('view')) {\n    /**\n     * Renderiza uma view\n     */\n    function view(string $viewName, array $data = []): void\n    {\n        extract($data);\n        \n        $viewFile = __DIR__ . \"/../../views/{$viewName}.php\";\n        \n        if (!file_exists($viewFile)) {\n            throw new Exception(\"View {$viewName} n\u00e3o encontrada.\");\n        }\n        \n        include $viewFile;\n    }\n}\n```\n\n## Instru\u00e7\u00f5es de Integra\u00e7\u00e3o\n\n### 1. Estrutura do Banco de Dados\n\nPara implementar este sistema, \u00e9 necess\u00e1rio criar a estrutura b\u00e1sica do banco de dados. Execute o seguinte SQL:\n\n```sql\n-- Tabela de Tenants (Restaurantes)\nCREATE TABLE tenants (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    domain VARCHAR(255) NOT NULL UNIQUE,\n    status ENUM('active', 'inactive', 'pending') NOT NULL DEFAULT 'pending',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de Usu\u00e1rios\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT NULL,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    role ENUM('admin', 'manager', 'staff') NOT NULL DEFAULT 'staff',\n    status ENUM('active', 'inactive') NOT NULL DEFAULT 'active',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Criando um usu\u00e1rio administrador do sistema (senha: admin123)\nINSERT INTO users (name, email, password, role, tenant_id)\nVALUES ('Administrador', 'admin@sistema.com', '$2y$12$HOm7OJemQzqLXftyUI8nUecjImPQZ0Yg9J.LdDMUTUxhZ2HyAlKLq', 'admin', NULL);\n```\n\n### 2. Configura\u00e7\u00e3o do Ambiente\n\n1. Crie um arquivo `.env` na raiz do projeto:\n\n```\nAPP_ENV=development\nAPP_DEBUG=true\nAPP_URL=http://localhost\nAPP_KEY=base64:HsJhwJCabNKTUMfpUCezOKbXO71MNYdZ1QQFIrwUgS4=\n\nDB_CONNECTION=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=restaurante_saas\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\n2. Crie um arquivo `index.php` na raiz do projeto:\n\n```php\n<?php\n\n// Carregar o arquivo bootstrap para inicializar o sistema\nrequire_once __DIR__ . '/core/bootstrap.php';\n\n// Resolver a rota atual\n$requestUri = $_SERVER['REQUEST_URI'];\n$requestMethod = $_SERVER['REQUEST_METHOD'];\n\n// Aqui voc\u00ea implementaria um sistema de roteamento\n// Por enquanto, apenas redirecionamos para a p\u00e1gina de login\nif ($requestUri === '/') {\n    if (auth()->check()) {\n        redirect('/dashboard');\n    } else {\n        redirect('/login');\n    }\n} elseif ($requestUri === '/login' && $requestMethod === 'GET') {\n    view('auth/login');\n} elseif ($requestUri === '/login' && $requestMethod === 'POST') {\n    // Processa o login\n    $email = $_POST['email'] ?? '';\n    $password = $_POST['password'] ?? '';\n    \n    if (auth()->attempt($email, $password)) {\n        redirect('/dashboard');\n    } else {\n        redirect('/login?error=invalid_credentials');\n    }\n} elseif ($requestUri === '/dashboard') {\n    // Aplica middleware de autentica\u00e7\u00e3o\n    $authMiddleware = new \\Core\\Middleware\\AuthMiddleware();\n    $authMiddleware->handle();\n    \n    // Aplica middleware de tenant\n    $tenantMiddleware = new \\Core\\Middleware\\TenantMiddleware();\n    $tenantMiddleware->handle();\n    \n    // Renderiza o dashboard\n    view('dashboard');\n} elseif ($requestUri === '/logout') {\n    auth()->logout();\n    redirect('/login');\n} else {\n    // P\u00e1gina n\u00e3o encontrada\n    http_response_code(404);\n    view('errors/404');\n}\n```\n\n3. Crie um diret\u00f3rio `views` e adicione arquivos b\u00e1sicos de visualiza\u00e7\u00e3o:\n\n#### `/views/auth/login.php`\n```php\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login - Gest\u00e3o de Restaurantes</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-light\">\n    <div class=\"container mt-5\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-md-6\">\n                <div class=\"card shadow\">\n                    <div class=\"card-header bg-primary text-white\">\n                        <h4 class=\"mb-0\">Login</h4>\n                    </div>\n                    <div class=\"card-body\">\n                        <?php if (isset($_GET['error'])): ?>\n                            <div class=\"alert alert-danger\">\n                                <?php \n                                $error = $_GET['error'];\n                                if ($error === 'invalid_credentials') {\n                                    echo 'E-mail ou senha inv\u00e1lidos.';\n                                } elseif ($error === 'tenant_inactive') {\n                                    echo 'Sua conta est\u00e1 inativa. Entre em contato com o suporte.';\n                                } else {\n                                    echo 'Erro ao fazer login.';\n                                }\n                                ?>\n                            </div>\n                        <?php endif; ?>\n                        \n                        <form method=\"POST\" action=\"/login\">\n                            <div class=\"mb-3\">\n                                <label for=\"email\" class=\"form-label\">E-mail</label>\n                                <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" required>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label for=\"password\" class=\"form-label\">Senha</label>\n                                <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" required>\n                            </div>\n                            <div class=\"mb-3 form-check\">\n                                <input type=\"checkbox\" class=\"form-check-input\" id=\"remember\" name=\"remember\">\n                                <label class=\"form-check-label\" for=\"remember\">Lembrar-me</label>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary w-100\">Entrar</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n#### `/views/dashboard.php`\n```php\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dashboard - Gest\u00e3o de Restaurantes</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css\">\n</head>\n<body>\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <!-- Sidebar -->\n            <div class=\"col-md-3 col-lg-2 d-md-block bg-dark sidebar collapse\" style=\"min-height: 100vh;\">\n                <div class=\"position-sticky pt-3\">\n                    <div class=\"px-3 py-4 text-white\">\n                        <h3><?= tenant() ? tenant()->getName() : 'Gest\u00e3o de Restaurantes' ?></h3>\n                    </div>\n                    <ul class=\"nav flex-column\">\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link active text-white\" href=\"/dashboard\">\n                                <i class=\"bi bi-speedometer2 me-2\"></i>Dashboard\n                            </a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link text-white\" href=\"/products\">\n                                <i class=\"bi bi-box me-2\"></i>Produtos\n                            </a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link text-white\" href=\"/orders\">\n                                <i class=\"bi bi-cart me-2\"></i>Pedidos\n                            </a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link text-white\" href=\"/tables\">\n                                <i class=\"bi bi-grid me-2\"></i>Mesas\n                            </a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link text-white\" href=\"/customers\">\n                                <i class=\"bi bi-people me-2\"></i>Clientes\n                            </a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link text-white\" href=\"/reports\">\n                                <i class=\"bi bi-graph-up me-2\"></i>Relat\u00f3rios\n                            </a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link text-white\" href=\"/settings\">\n                                <i class=\"bi bi-gear me-2\"></i>Configura\u00e7\u00f5es\n                            </a>\n                        </li>\n                        <li class=\"nav-item mt-5\">\n                            <a class=\"nav-link text-white\" href=\"/logout\">\n                                <i class=\"bi bi-box-arrow-right me-2\"></i>Sair\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            \n            <!-- Main content -->\n            <div class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\n                <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n                    <h1 class=\"h2\">Dashboard</h1>\n                    <div class=\"btn-toolbar mb-2 mb-md-0\">\n                        <div class=\"dropdown\">\n                            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" id=\"userDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                                <?= auth()->user()['name'] ?>\n                            </button>\n                            <ul class=\"dropdown-menu\" aria-labelledby=\"userDropdown\">\n                                <li><a class=\"dropdown-item\" href=\"/profile\">Meu Perfil</a></li>\n                                <li><hr class=\"dropdown-divider\"></li>\n                                <li><a class=\"dropdown-item\" href=\"/logout\">Sair</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"row\">\n                    <div class=\"col-md-3 mb-4\">\n                        <div class=\"card border-0 shadow-sm\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Vendas de Hoje</h5>\n                                <h2 class=\"mt-3 mb-0\">R$ 0,00</h2>\n                                <p class=\"text-muted\">0 pedidos</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 mb-4\">\n                        <div class=\"card border-0 shadow-sm\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Mesas Ocupadas</h5>\n                                <h2 class=\"mt-3 mb-0\">0/0</h2>\n                                <p class=\"text-muted\">0% de ocupa\u00e7\u00e3o</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 mb-4\">\n                        <div class=\"card border-0 shadow-sm\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Pedidos em Andamento</h5>\n                                <h2 class=\"mt-3 mb-0\">0</h2>\n                                <p class=\"text-muted\">0 aguardando preparo</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 mb-4\">\n                        <div class=\"card border-0 shadow-sm\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Novos Clientes</h5>\n                                <h2 class=\"mt-3 mb-0\">0</h2>\n                                <p class=\"text-muted\">Esta semana</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"row\">\n                    <div class=\"col-md-8 mb-4\">\n                        <div class=\"card border-0 shadow-sm\">\n                            <div class=\"card-header bg-white\">\n                                <h5 class=\"mb-0\">\u00daltimos Pedidos</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <p class=\"text-muted\">Nenhum pedido recente.</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-4 mb-4\">\n                        <div class=\"card border-0 shadow-sm\">\n                            <div class=\"card-header bg-white\">\n                                <h5 class=\"mb-0\">Produtos Mais Vendidos</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <p class=\"text-muted\">Nenhum produto vendido ainda.</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n```\n\n#### `/views/errors/404.php`\n```php\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>P\u00e1gina n\u00e3o encontrada - Gest\u00e3o de Restaurantes</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-light\">\n    <div class=\"container d-flex align-items-center justify-content-center\" style=\"height: 100vh;\">\n        <div class=\"text-center\">\n            <h1 class=\"display-1 fw-bold\">404</h1>\n            <p class=\"lead\">P\u00e1gina n\u00e3o encontrada</p>\n            <p class=\"text-muted\">A p\u00e1gina que voc\u00ea est\u00e1 procurando n\u00e3o existe ou foi movida.</p>\n            <a href=\"/\" class=\"btn btn-primary\">Voltar para a p\u00e1gina inicial</a>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n## Orienta\u00e7\u00f5es para Testes e Valida\u00e7\u00e3o\n\n### 1. Teste de Autentica\u00e7\u00e3o e Login\n\n1. Acesse o sistema atrav\u00e9s da URL base.\n2. Voc\u00ea deve ser redirecionado para",
                "tokens_used": 10280,
                "response_time": 113.81
            },
            {
                "id": "031e69f99fb57ab806b20866156fae20",
                "timestamp": "2025-03-17T19:30:31.075843",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\n\n\n# Projeto Completo - Sistema de Gest\u00e3o de Restaurantes SaaS\n\n## 1. Tecnologias que devem ser usadas\n\nHTML,CSS,Javascript,PHP, mysql essa aplica\u00e7ao dever ser feita em web apenas\n\n## 1. Vis\u00e3o Geral do Projeto\n\n### 1.1 Descri\u00e7\u00e3o do Projeto\n\nO projeto consiste em um sistema de gest\u00e3o de restaurantes oferecido como servi\u00e7o por assinatura (SaaS - Software as a Service). O sistema atende a diversos tipos de estabelecimentos (\u00e0 la carte, fast food, pizzaria, rod\u00edzio, etc.) com funcionalidades adaptadas para cada modelo de neg\u00f3cio, permitindo opera\u00e7\u00f5es atrav\u00e9s de QR Code ou atendimento tradicional com gar\u00e7ons.\n\n### 1.2 Objetivos Principais\n\n1. Oferecer um sistema completo e personaliz\u00e1vel para gest\u00e3o de restaurantes\n2. Permitir flexibilidade para diferentes modelos de neg\u00f3cio\n3. Implementar uma estrutura escal\u00e1vel baseada em assinaturas\n4. Garantir uma experi\u00eancia otimizada tanto para restaurantes quanto para clientes finais\n5. Proporcionar integra\u00e7\u00e3o com servi\u00e7os externos (Stripe, iFood, etc.)\n\n### 1.3 P\u00fablico-Alvo\n\n- Restaurantes tradicionais \u00e0 la carte\n- Fast-foods e lanchonetes\n- Pizzarias e delivery\n- Rod\u00edzios e buf\u00eas\n- Bares e pubs\n- Food trucks\n- Redes de restaurantes\n\n### 1.4 Proposta de Valor\n\n- Redu\u00e7\u00e3o de custos operacionais\n- Aumento da efici\u00eancia no atendimento\n- Melhoria da experi\u00eancia do cliente\n- Maior controle financeiro e operacional\n- Insights de neg\u00f3cio baseados em dados\n- Flexibilidade para diferentes modelos e tamanhos de opera\u00e7\u00e3o\n\n## 2. Arquitetura do Sistema\n\n### 2.1 Vis\u00e3o Geral da Arquitetura\n\nO sistema utiliza uma arquitetura de tr\u00eas camadas:\n\n1. **Camada de Apresenta\u00e7\u00e3o**: Interfaces web e mobile para diferentes perfis de usu\u00e1rio\n2. **Camada de Aplica\u00e7\u00e3o**: L\u00f3gica de neg\u00f3cio, processamento e servi\u00e7os\n3. **Camada de Dados**: Persist\u00eancia e gerenciamento de dados\n\n### 2.2 Modelo Multi-Tenant\n\nO sistema \u00e9 constru\u00eddo com arquitetura multi-tenant, onde m\u00faltiplos restaurantes (tenants) compartilham a mesma infraestrutura, mas com dados completamente isolados:\n\n- Cada tenant possui um identificador \u00fanico\n- Todas as opera\u00e7\u00f5es de banco de dados incluem filtro por tenant\n- Recursos s\u00e3o alocados conforme o plano de assinatura\n- Backups s\u00e3o individualizados por tenant\n\n### 2.3 Infraestrutura de Nuvem\n\nA plataforma ser\u00e1 hospedada em infraestrutura de nuvem para garantir:\n\n- Alta disponibilidade (99.9+%)\n- Escalabilidade horizontal e vertical\n- Balanceamento de carga\n- Backups automatizados\n- Recupera\u00e7\u00e3o de desastres\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n\n### 2.4 Integra\u00e7\u00f5es Externas\n\nO sistema se integrar\u00e1 com diversos servi\u00e7os externos:\n\n- Stripe para processamento de pagamentos e assinaturas\n- iFood e outras plataformas de delivery\n- Sistemas fiscais e emiss\u00e3o de notas\n- Servi\u00e7os de email e SMS\n- Gateways de pagamento para opera\u00e7\u00f5es do restaurante\n\n## 3. Implementa\u00e7\u00e3o da Plataforma SaaS\n\n### 3.1 Sistema de Assinaturas\n\n#### 3.1.1 Estrutura de Planos\n\nImplementa\u00e7\u00e3o de diferentes n\u00edveis de planos:\n\n- **Plano B\u00e1sico**: Funcionalidades essenciais para pequenos estabelecimentos\n- **Plano Padr\u00e3o**: Recursos intermedi\u00e1rios para m\u00e9dios restaurantes\n- **Plano Premium**: Funcionalidades completas para grandes opera\u00e7\u00f5es\n- **Plano Enterprise**: Solu\u00e7\u00f5es personalizadas para redes e franquias\n\n#### 3.1.2 Gerenciamento de Assinaturas\n\nDesenvolvimento do fluxo completo de gest\u00e3o de assinaturas:\n\n- Cadastro e onboarding\n- Per\u00edodo de teste gratuito\n- Convers\u00e3o para assinatura paga\n- Gest\u00e3o de m\u00e9todos de pagamento\n- Renova\u00e7\u00f5es autom\u00e1ticas\n- Upgrades e downgrades de plano\n- Cancelamentos e reten\u00e7\u00e3o\n\n#### 3.1.3 Integra\u00e7\u00e3o com Stripe\n\nImplementa\u00e7\u00e3o da integra\u00e7\u00e3o completa com a API do Stripe:\n\n- Cria\u00e7\u00e3o de produtos e planos no Stripe\n- Processamento de pagamentos recorrentes\n- Gest\u00e3o de cart\u00f5es e m\u00e9todos de pagamento\n- Webhooks para eventos de pagamento\n- Tratamento de falhas e disputas\n- Gera\u00e7\u00e3o de faturas e recibos\n\n#### 3.1.4 Controle de Limites e Recursos\n\nDesenvolvimento de mecanismos para controlar a utiliza\u00e7\u00e3o conforme o plano:\n\n- Verifica\u00e7\u00e3o de limites (mesas, usu\u00e1rios, etc.)\n- Monitoramento de uso de recursos\n- Notifica\u00e7\u00f5es de limite pr\u00f3ximo\n- Op\u00e7\u00f5es de upgrade quando necess\u00e1rio\n- Controle de acesso a m\u00f3dulos premium\n\n### 3.2 Portal Administrativo\n\n#### 3.2.1 Gest\u00e3o de Clientes\n\nCria\u00e7\u00e3o de interfaces para administradores da plataforma:\n\n- Dashboard de clientes ativos\n- Detalhes de conta e consumo\n- Hist\u00f3rico de pagamentos\n- Ferramentas de suporte\n- A\u00e7\u00f5es administrativas (suspender, cancelar, etc.)\n\n#### 3.2.2 Relat\u00f3rios e Analytics\n\nImplementa\u00e7\u00e3o de ferramentas de an\u00e1lise para a opera\u00e7\u00e3o SaaS:\n\n- M\u00e9tricas de aquisi\u00e7\u00e3o de clientes\n- Taxas de convers\u00e3o e reten\u00e7\u00e3o\n- Receita recorrente mensal (MRR)\n- Valor do tempo de vida do cliente (LTV)\n- Custos de aquisi\u00e7\u00e3o de cliente (CAC)\n- Churn e renova\u00e7\u00f5es\n\n#### 3.2.3 Sistema de Suporte\n\nDesenvolvimento de ferramentas para atendimento ao cliente:\n\n- Sistema de tickets\n- Base de conhecimento\n- Chat ao vivo\n- Suporte por email\n- Escalamento para diferentes n\u00edveis\n- M\u00e9tricas de satisfa\u00e7\u00e3o e tempo de resposta\n\n## 4. Implementa\u00e7\u00e3o do Sistema de Gest\u00e3o de Restaurantes\n\n### 4.1 Personaliza\u00e7\u00e3o por Tipo de Restaurante\n\n#### 4.1.1 Onboarding e Configura\u00e7\u00e3o\n\nCria\u00e7\u00e3o do processo de configura\u00e7\u00e3o inicial:\n\n- Sele\u00e7\u00e3o do tipo de restaurante\n- Compara\u00e7\u00e3o entre tipos\n- Configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas\n- Setup inicial de mesas e ambiente\n- Cadastro de card\u00e1pio inicial\n- Configura\u00e7\u00e3o de funcion\u00e1rios e acessos\n\n#### 4.1.2 Interfaces Espec\u00edficas\n\nDesenvolvimento de interfaces adaptadas para cada tipo:\n\n- \u00c0 la carte: Foco em mesas e reservas\n- Fast Food: Foco em fila de pedidos e agilidade\n- Pizzaria: Construtor de pizza meio a meio\n- Rod\u00edzio: Controle de passadas e tempos\n- Delivery: Rastreamento e rotas\n- Self-service: Integra\u00e7\u00e3o com balan\u00e7as\n- Food Truck: Interface simplificada e mobile-first\n\n#### 4.1.3 Fluxos de Trabalho Personalizados\n\nImplementa\u00e7\u00e3o de fluxos adaptados para cada modelo:\n\n- L\u00f3gica de neg\u00f3cio espec\u00edfica por tipo\n- Regras de prioriza\u00e7\u00e3o de pedidos\n- Controles especializados (forno, passadas, pesagem)\n- Relat\u00f3rios e m\u00e9tricas relevantes para cada modelo\n\n### 4.2 M\u00f3dulo de Comandas e Pedidos\n\n#### 4.2.1 Gest\u00e3o de Mesas\n\nDesenvolvimento do sistema de controle de mesas:\n\n- Mapa visual de mesas\n- Status em tempo real\n- Controle de ocupa\u00e7\u00e3o\n- Timer de perman\u00eancia\n- Hist\u00f3rico de uso\n\n#### 4.2.2 Sistema de Pedidos\n\nImplementa\u00e7\u00e3o do fluxo completo de pedidos:\n\n- Registro de pedidos (via QR Code e gar\u00e7om)\n- Modifica\u00e7\u00f5es e adi\u00e7\u00f5es\n- Encaminhamento para cozinha\n- Notifica\u00e7\u00f5es de status\n- Fechamento e pagamento\n\n#### 4.2.3 QR Code para Clientes\n\nDesenvolvimento da experi\u00eancia de pedido via QR Code:\n\n- Gera\u00e7\u00e3o de QR Codes para mesas\n- Interface adaptada para mobile\n- Registro de dados do cliente\n- Card\u00e1pio digital interativo\n- Carrinho de pedidos\n- Solicita\u00e7\u00e3o de atendimento\n- Pagamento pelo smartphone\n\n#### 4.2.4 Divis\u00e3o de Contas\n\nImplementa\u00e7\u00e3o de mecanismos para divis\u00e3o de contas:\n\n- Divis\u00e3o por item\n- Divis\u00e3o igual entre participantes\n- Divis\u00e3o percentual\n- M\u00faltiplos pagamentos\n- Contas parciais\n\n### 4.3 M\u00f3dulo de Cozinha\n\n#### 4.3.1 Painel de Produ\u00e7\u00e3o\n\nDesenvolvimento da interface para cozinha:\n\n- Fila de pedidos em tempo real\n- Classifica\u00e7\u00e3o por prioridade\n- Temporizadores de preparo\n- Status visual por pedido\n- Alertas para pedidos atrasados\n\n#### 4.3.2 Gest\u00e3o de Estoque\n\nImplementa\u00e7\u00e3o do controle de estoque integrado:\n\n- Cadastro de ingredientes e insumos\n- Abate autom\u00e1tico do estoque\n- Alertas de estoque baixo\n- Previs\u00e3o de necessidade\n- Pedidos autom\u00e1ticos\n\n#### 4.3.3 Controles Espec\u00edficos\n\nCria\u00e7\u00e3o de funcionalidades especializadas:\n\n- Temporizadores para forno\n- Controle de passadas para rod\u00edzio\n- Separa\u00e7\u00e3o de delivery e local\n- Alertas para al\u00e9rgenos\n\n### 4.4 M\u00f3dulo de Pagamentos\n\n#### 4.4.1 Processamento de Pagamentos\n\nImplementa\u00e7\u00e3o dos fluxos de pagamento:\n\n- Integra\u00e7\u00e3o com Stripe para pagamentos\n- Suporte a cart\u00f5es de cr\u00e9dito/d\u00e9bito\n- Pagamentos via PIX\n- Dinheiro e outras formas locais\n- Concilia\u00e7\u00e3o financeira\n\n#### 4.4.2 Fechamento de Caixa\n\nDesenvolvimento do processo de fechamento:\n\n- Abertura e fechamento de caixa\n- Registro de entradas e sa\u00eddas\n- Contagem f\u00edsica\n- Detec\u00e7\u00e3o de diferen\u00e7as\n- Relat\u00f3rio de fechamento\n\n#### 4.4.3 Emiss\u00e3o de Comprovantes\n\nImplementa\u00e7\u00e3o da gera\u00e7\u00e3o de documentos:\n\n- Recibos digitais\n- Envio por email ou WhatsApp\n- Integra\u00e7\u00e3o com sistemas fiscais\n- Armazenamento de comprovantes\n\n### 4.5 M\u00f3dulo de Funcion\u00e1rios\n\n#### 4.5.1 Controle de Acesso\n\nDesenvolvimento do sistema de acesso:\n\n- Cadastro de funcion\u00e1rios\n- Perfis de permiss\u00e3o\n- Autentica\u00e7\u00e3o segura\n- Registro de atividades\n- Pol\u00edticas de seguran\u00e7a\n\n#### 4.5.2 Registro de Ponto\n\nImplementa\u00e7\u00e3o do controle de ponto:\n\n- Registro de entrada e sa\u00edda\n- Valida\u00e7\u00e3o por localiza\u00e7\u00e3o\n- C\u00e1lculo de horas trabalhadas\n- Controle de intervalos\n- Exporta\u00e7\u00e3o para folha de pagamento\n\n#### 4.5.3 Desempenho e Comiss\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para gest\u00e3o de desempenho:\n\n- M\u00e9tricas por funcion\u00e1rio\n- C\u00e1lculo de comiss\u00f5es\n- Avalia\u00e7\u00e3o de desempenho\n- Classifica\u00e7\u00e3o por objetivos\n- Feedback e desenvolvimento\n\n### 4.6 M\u00f3dulo de Fornecedores\n\n#### 4.6.1 Cadastro e Gest\u00e3o\n\nImplementa\u00e7\u00e3o do gerenciamento de fornecedores:\n\n- Cadastro detalhado de fornecedores\n- Categoriza\u00e7\u00e3o por tipo de produto\n- Condi\u00e7\u00f5es comerciais\n- Contatos de emerg\u00eancia\n- Avalia\u00e7\u00e3o de desempenho\n\n#### 4.6.2 Pedidos e Reposi\u00e7\u00e3o\n\nDesenvolvimento do fluxo de compras:\n\n- Pedidos r\u00e1pidos\n- Sugest\u00e3o autom\u00e1tica de reposi\u00e7\u00e3o\n- Aprova\u00e7\u00e3o de pedidos\n- Acompanhamento de entrega\n- Recebimento e confer\u00eancia\n\n#### 4.6.3 Hist\u00f3rico e Avalia\u00e7\u00e3o\n\nCria\u00e7\u00e3o de ferramentas para an\u00e1lise de fornecedores:\n\n- Hist\u00f3rico de pedidos\n- Cumprimento de prazos\n- Qualidade de produtos\n- Competitividade de pre\u00e7os\n- Ranking de fornecedores\n\n### 4.7 M\u00f3dulo de Relat\u00f3rios\n\n#### 4.7.1 Relat\u00f3rios Operacionais\n\nImplementa\u00e7\u00e3o de relat\u00f3rios para a opera\u00e7\u00e3o di\u00e1ria:\n\n- Vendas por per\u00edodo\n- Ocupa\u00e7\u00e3o de mesas\n- Tempo m\u00e9dio de atendimento\n- Itens mais vendidos\n- Cancelamentos e devolu\u00e7\u00f5es\n\n#### 4.7.2 Relat\u00f3rios Financeiros\n\nDesenvolvimento de an\u00e1lises financeiras:\n\n- Faturamento por per\u00edodo\n- Custos e despesas\n- Lucratividade por produto\n- Fluxo de caixa\n- Proje\u00e7\u00f5es e comparativos\n\n#### 4.7.3 Dashboards e Analytics\n\nCria\u00e7\u00e3o de pain\u00e9is visuais e an\u00e1lises:\n\n- Dashboard executivo\n- Gr\u00e1ficos e visualiza\u00e7\u00f5es\n- Tend\u00eancias e sazonalidade\n- An\u00e1lise de dados em tempo real\n- Exporta\u00e7\u00e3o para Excel/PDF\n\n### 4.8 M\u00f3dulo de Marketing e CRM\n\n#### 4.8.1 Cadastro de Clientes\n\nImplementa\u00e7\u00e3o do gerenciamento de clientes:\n\n- Captura de dados via QR Code\n- Hist\u00f3rico de pedidos\n- Prefer\u00eancias e restri\u00e7\u00f5es\n- Segmenta\u00e7\u00e3o de clientes\n- Privacidade e LGPD\n\n#### 4.8.2 Programa de Fidelidade\n\nDesenvolvimento de sistema de fideliza\u00e7\u00e3o:\n\n- Ac\u00famulo de pontos por compra\n- N\u00edveis de fidelidade\n- Recompensas e benef\u00edcios\n- Promo\u00e7\u00f5es personalizadas\n- An\u00e1lise de engajamento\n\n#### 4.8.3 Campanhas e Promo\u00e7\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para a\u00e7\u00f5es de marketing:\n\n- Cria\u00e7\u00e3o de campanhas\n- Descontos e ofertas especiais\n- Comunica\u00e7\u00e3o por email e SMS\n- Aniversariantes do m\u00eas\n- Mensura\u00e7\u00e3o de resultados\n\n## 5. Integra\u00e7\u00f5es com Servi\u00e7os Externos\n\n### 5.1 Integra\u00e7\u00e3o com Plataformas de Delivery\n\n#### 5.1.1 iFood e Outras Plataformas\n\nImplementa\u00e7\u00e3o de conex\u00e3o com marketplaces:\n\n- Recebimento de pedidos em tempo real\n- Aceita\u00e7\u00e3o/rejei\u00e7\u00e3o autom\u00e1tica\n- Atualiza\u00e7\u00e3o de status\n- Sincroniza\u00e7\u00e3o de card\u00e1pio\n- Concilia\u00e7\u00e3o financeira\n\n#### 5.1.2 Delivery Pr\u00f3prio\n\nDesenvolvimento de sistema pr\u00f3prio de delivery:\n\n- Cadastro de entregadores\n- Roteiriza\u00e7\u00e3o de entregas\n- Rastreamento em tempo real\n- \u00c1reas e taxas de entrega\n- Gest\u00e3o de frota\n\n### 5.2 Integra\u00e7\u00e3o com Sistemas Fiscais\n\n#### 5.2.1 Emiss\u00e3o de Notas Fiscais\n\nImplementa\u00e7\u00e3o de processos fiscais:\n\n- Emiss\u00e3o de NFC-e, NF-e\n- Valida\u00e7\u00e3o com WebServices da SEFAZ\n- Armazenamento e envio de documentos\n- Tratamento de conting\u00eancia\n- Relat\u00f3rios fiscais\n\n#### 5.2.2 Concilia\u00e7\u00e3o Cont\u00e1bil\n\nDesenvolvimento de ferramentas para contabilidade:\n\n- Exporta\u00e7\u00e3o para sistemas cont\u00e1beis\n- Plano de contas configur\u00e1vel\n- Relat\u00f3rios para DRE\n- Apura\u00e7\u00e3o de impostos\n- Fechamento mensal\n\n### 5.3 Integra\u00e7\u00e3o com Balan\u00e7as\n\n#### 5.3.1 Para Self-Service\n\nImplementa\u00e7\u00e3o de conex\u00e3o com balan\u00e7as:\n\n- Leitura de peso em tempo real\n- C\u00e1lculo autom\u00e1tico de valor\n- Calibra\u00e7\u00e3o e configura\u00e7\u00e3o\n- Modo offline para conting\u00eancia\n- Registro de pesagens\n\n#### 5.3.2 Para Controle de Estoque\n\nDesenvolvimento de pesagem para estoque:\n\n- Pesagem de insumos\n- Convers\u00e3o de unidades\n- Controle de quebra e perdas\n- Rastreabilidade\n- Invent\u00e1rio f\u00edsico\n\n### 5.4 Integra\u00e7\u00e3o com Equipamentos\n\n#### 5.4.1 Impressoras e Comandas\n\nImplementa\u00e7\u00e3o de sistema de impress\u00e3o:\n\n- Impress\u00e3o de comandas para cozinha\n- Impress\u00e3o de contas e recibos\n- Suporte a diversas marcas de impressoras\n- Configura\u00e7\u00e3o de layouts\n- Tratamento de falhas\n\n#### 5.4.2 Displays de Cozinha\n\nDesenvolvimento de integra\u00e7\u00e3o com displays:\n\n- Exibi\u00e7\u00e3o de pedidos em andamento\n- Alertas visuais e sonoros\n- Temporizadores\n- Confirma\u00e7\u00e3o por toque\n- Sincroniza\u00e7\u00e3o em tempo real\n\n## 6. Infraestrutura e Hospedagem\n\n### 6.1 Ambiente de Produ\u00e7\u00e3o\n\n#### 6.1.1 Servidores Web\n\nConfigura\u00e7\u00e3o da infraestrutura web:\n\n- Servidores web redundantes\n- Balanceadores de carga\n- Certificados SSL/TLS\n- Cache e otimiza\u00e7\u00e3o\n- Monitoramento 24/7\n\n#### 6.1.2 Banco de Dados\n\nImplementa\u00e7\u00e3o da camada de dados:\n\n- Cluster de banco de dados MySQL\n- Replica\u00e7\u00e3o e alta disponibilidade\n- Backups automatizados\n- Particionamento por tenant\n- Otimiza\u00e7\u00e3o de performance\n\n#### 6.1.3 Armazenamento\n\nConfigura\u00e7\u00e3o de sistemas de armazenamento:\n\n- Sistema de arquivos distribu\u00eddo\n- Armazenamento para backups\n- CDN para assets est\u00e1ticos\n- Pol\u00edticas de reten\u00e7\u00e3o\n- Compress\u00e3o e otimiza\u00e7\u00e3o\n\n### 6.2 Escalabilidade\n\n#### 6.2.1 Horizontal\n\nImplementa\u00e7\u00e3o de mecanismos de crescimento:\n\n- Auto-scaling de servidores\n- Gerenciamento de capacidade\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n- Load balancing avan\u00e7ado\n- Cont\u00eaineres e orquestra\u00e7\u00e3o\n\n#### 6.2.2 Vertical\n\nPlanejamento para crescimento de recursos:\n\n- Upgrades de hardware\n- Otimiza\u00e7\u00e3o de software\n- Benchmarking e performance\n- Ajuste de recursos por demanda\n- Monitoramento de gargalos\n\n### 6.3 Monitoramento e Logging\n\n#### 6.3.1 Monitoramento de Sistema\n\nImplementa\u00e7\u00e3o de sistemas de observabilidade:\n\n- Monitoramento em tempo real\n- Alertas autom\u00e1ticos\n- Dashboards operacionais\n- An\u00e1lise de tend\u00eancias\n- Detec\u00e7\u00e3o de anomalias\n\n#### 6.3.2 Logging e Auditoria\n\nDesenvolvimento de registro de eventos:\n\n- Centraliza\u00e7\u00e3o de logs\n- Reten\u00e7\u00e3o configur\u00e1vel\n- Busca e an\u00e1lise\n- Trilhas de auditoria\n- Exporta\u00e7\u00e3o e conformidade\n\n### 6.4 Continuidade de Neg\u00f3cio\n\n#### 6.4.1 Backups\n\nImplementa\u00e7\u00e3o de estrat\u00e9gia de backups:\n\n- Backups di\u00e1rios automatizados\n- Backups incrementais\n- Verifica\u00e7\u00e3o de integridade\n- Restaura\u00e7\u00e3o testada\n- Armazenamento offsite\n\n#### 6.4.2 Disaster Recovery\n\nDesenvolvimento de plano de recupera\u00e7\u00e3o:\n\n- Site alternativo\n- Procedimentos documentados\n- Tempo de recupera\u00e7\u00e3o definido\n- Testes regulares\n- Comunica\u00e7\u00e3o de incidentes\n\n#### 6.4.3 Modo Offline\n\nImplementa\u00e7\u00e3o de funcionamento offline:\n\n- Opera\u00e7\u00f5es b\u00e1sicas sem internet\n- Sincroniza\u00e7\u00e3o autom\u00e1tica\n- Buffer local de transa\u00e7\u00f5es\n- Reconcilia\u00e7\u00e3o ap\u00f3s reconex\u00e3o\n- Notifica\u00e7\u00f5es de status\n\n## 7. Testes e Garantia de Qualidade\n\n### 7.1 Estrat\u00e9gia de Testes\n\n#### 7.1.1 Testes Unit\u00e1rios\n\nImplementa\u00e7\u00e3o de testes de componentes:\n\n- Cobertura de c\u00f3digo\n- Testes automatizados\n- Mock de depend\u00eancias\n- Valida\u00e7\u00e3o de regras de neg\u00f3cio\n- Integra\u00e7\u00e3o com CI/CD\n\n#### 7.1.2 Testes de Integra\u00e7\u00e3o\n\nDesenvolvimento de valida\u00e7\u00e3o de integra\u00e7\u00f5es:\n\n- Teste de APIs\n- Simula\u00e7\u00f5es de servi\u00e7os externos\n- Valida\u00e7\u00e3o de fluxos completos\n- Ambientes de teste isolados\n- Automa\u00e7\u00e3o de casos de teste\n\n#### 7.1.3 Testes de Aceita\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de valida\u00e7\u00e3o do usu\u00e1rio:\n\n- Testes de usabilidade\n- Cen\u00e1rios de uso real\n- Valida\u00e7\u00e3o com stakeholders\n- Feedback documentado\n- Aprova\u00e7\u00e3o formal\n\n### 7.2 Garantia de Qualidade\n\n#### 7.2.1 Revis\u00e3o de C\u00f3digo\n\nEstabelecimento de processos de revis\u00e3o:\n\n- Padr\u00f5es de codifica\u00e7\u00e3o\n- Pull/merge requests\n- Code reviews\n- An\u00e1lise est\u00e1tica\n- M\u00e9tricas de qualidade\n\n#### 7.2.2 Controle de Vers\u00e3o\n\nImplementa\u00e7\u00e3o de gerenciamento de vers\u00f5es:\n\n- Git flow ou similar\n- Ambientes separados (DEV/STG/PROD)\n- Tagging de vers\u00f5es\n- Gest\u00e3o de releases\n- Changelogs e documenta\u00e7\u00e3o\n\n#### 7.2.3 Testes de Performance\n\nDesenvolvimento de valida\u00e7\u00e3o de desempenho:\n\n- Testes de carga\n- Benchmarking\n- Otimiza\u00e7\u00e3o de recursos\n- Monitoramento de impacto\n- Simula\u00e7\u00e3o de multi-tenancy\n\n## 8. Seguran\u00e7a e Conformidade\n\n### 8.1 Seguran\u00e7a de Aplica\u00e7\u00e3o\n\n#### 8.1.1 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de controle de acesso:\n\n- Autentica\u00e7\u00e3o forte (2FA)\n- Gerenciamento de sess\u00f5es\n- Controle de acesso baseado em perfil\n- Pol\u00edticas de senha\n- Prote\u00e7\u00e3o contra for\u00e7a bruta\n\n#### 8.1.2 Prote\u00e7\u00e3o de Dados\n\nDesenvolvimento de mecanismos de prote\u00e7\u00e3o:\n\n- Criptografia em tr\u00e2nsito (TLS)\n- Criptografia em repouso\n- Tokeniza\u00e7\u00e3o de dados sens\u00edveis\n- Mascaramento de informa\u00e7\u00f5es\n- Acesso baseado em necessidade\n\n#### 8.1.3 Seguran\u00e7a de API\n\nImplementa\u00e7\u00e3o de prote\u00e7\u00e3o de endpoints:\n\n- Autentica\u00e7\u00e3o por token (JWT)\n- Rate limiting\n- Valida\u00e7\u00e3o de entrada\n- CORS configurado\n- Prote\u00e7\u00e3o contra ataques comuns\n\n### 8.2 Conformidade\n\n#### 8.2.1 LGPD/GDPR\n\nAdequa\u00e7\u00e3o \u00e0 legisla\u00e7\u00e3o de privacidade:\n\n- Invent\u00e1rio de dados pessoais\n- Termos de uso e privacidade\n- Mecanismos de consentimento\n- Direitos do titular (acesso, exclus\u00e3o)\n- Relat\u00f3rios de impacto\n\n#### 8.2.2 PCI DSS\n\nConformidade para processamento de pagamentos:\n\n- Seguran\u00e7a de dados de cart\u00e3o\n- Tokeniza\u00e7\u00e3o via Stripe\n- Escopo reduzido de PCI\n- Varreduras de seguran\u00e7a\n- Treinamento e conscientiza\u00e7\u00e3o\n\n#### 8.2.3 Auditoria e Compliance\n\nImplementa\u00e7\u00e3o de pr\u00e1ticas de conformidade:\n\n- Trilhas de auditoria\n- Logs imut\u00e1veis\n- Evid\u00eancias de controle\n- Relat\u00f3rios de compliance\n- Revis\u00f5es peri\u00f3dicas\n\n## 9. Lan\u00e7amento e Opera\u00e7\u00f5es\n\n### 9.1 Estrat\u00e9gia de Lan\u00e7amento\n\n#### 9.1.1 MVP e Roadmap\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Defini\u00e7\u00e3o do MVP inicial\n- Prioriza\u00e7\u00e3o de funcionalidades\n- Roadmap de m\u00e9dio prazo\n- Feedback loops planejados\n- Marcos e m\u00e9tricas de sucesso\n\n#### 9.1.2 Beta e Early Adopters\n\nImplementa\u00e7\u00e3o de programa inicial:\n\n- Sele\u00e7\u00e3o de clientes beta\n- Incentivos para early adopters\n- Coleta estruturada de feedback\n- Ciclos r\u00e1pidos de itera\u00e7\u00e3o\n- Estrat\u00e9gia de expans\u00e3o\n\n#### 9.1.3 Go-to-Market\n\nDesenvolvimento de estrat\u00e9gia comercial:\n\n- Posicionamento de mercado\n- Estrat\u00e9gia de pre\u00e7os\n- Canais de aquisi\u00e7\u00e3o\n- Materiais de marketing\n- Plano de vendas\n\n### 9.2 Opera\u00e7\u00f5es Cont\u00ednuas\n\n#### 9.2.1 Suporte ao Cliente\n\nImplementa\u00e7\u00e3o de estrutura de atendimento:\n\n- Equipe de suporte escalonada\n- Base de conhecimento\n- Procedimentos documentados\n- M\u00e9tricas de atendimento\n- Feedback e melhoria cont\u00ednua\n\n#### 9.2.2 Monitoramento de Uso\n\nDesenvolvimento de an\u00e1lise de utiliza\u00e7\u00e3o:\n\n- Telemetria de uso\n- Detec\u00e7\u00e3o de problemas\n- M\u00e9tricas de engajamento\n- An\u00e1lise de churn\n- Oportunidades de upsell\n\n#### 9.2.3 SLA e Garantias\n\nEstabelecimento de acordos de n\u00edvel de servi\u00e7o:\n\n- Disponibilidade garantida\n- Tempo de resposta para suporte\n- Resolu\u00e7\u00e3o de incidentes\n- Compensa\u00e7\u00f5es por falhas\n- Comunica\u00e7\u00e3o proativa\n\n## 10. Manuten\u00e7\u00e3o e Evolu\u00e7\u00e3o\n\n### 10.1 Desenvolvimento Cont\u00ednuo\n\n#### 10.1.1 Novas Funcionalidades\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Processo de coleta de requisitos\n- Prioriza\u00e7\u00e3o baseada em valor\n- Desenvolvimento \u00e1gil\n- Testes de conceito\n- Valida\u00e7\u00e3o com usu\u00e1rios\n\n#### 10.1.2 Corre\u00e7\u00f5es e Melhorias\n\nImplementa\u00e7\u00e3o de processo de manuten\u00e7\u00e3o:\n\n- Triagem de bugs e issues\n- Prioriza\u00e7\u00e3o por impacto\n- Janelas de manuten\u00e7\u00e3o\n- Hotfixes para problemas cr\u00edticos\n- Refatora\u00e7\u00e3o planejada\n\n#### 10.1.3 Atualiza\u00e7\u00f5es de Tecnologia\n\nPlano para evolu\u00e7\u00e3o tecnol\u00f3gica:\n\n- Atualiza\u00e7\u00f5es de seguran\u00e7a\n- Atualiza\u00e7\u00e3o de frameworks\n- Migra\u00e7\u00e3o planejada\n- Testes de compatibilidade\n- Comunica\u00e7\u00e3o de mudan\u00e7as\n\n### 10.2 An\u00e1lise e Otimiza\u00e7\u00e3o\n\n#### 10.2.1 Performance\n\nMonitoramento e melhoria cont\u00ednua:\n\n- An\u00e1lise de gargalos\n- Otimiza\u00e7\u00e3o de consultas\n- Refinamento de caching\n- Monitoramento de uso de recursos\n- Benchmarking peri\u00f3dico\n\n#### 10.2.2 Custo-Benef\u00edcio\n\nAvalia\u00e7\u00e3o financeira constante:\n\n- An\u00e1lise de custos operacionais\n- Otimiza\u00e7\u00e3o de recursos\n- Renegocia\u00e7\u00e3o com fornecedores\n- Efici\u00eancia energ\u00e9tica\n- Automa\u00e7\u00e3o de processos\n\n#### 10.2.3 Experi\u00eancia do Usu\u00e1rio\n\nMelhoria cont\u00ednua da UX:\n\n- Testes de usabilidade\n- An\u00e1lise de caminhos e convers\u00e3o\n- Feedback estruturado\n- A/B testing\n- Pesquisas de satisfa\u00e7\u00e3o\n\n## 11. Diret\u00f3rio Completo do Projeto\n\n```\nrestaurante-sistema/\n\u2502\n\u251c\u2500\u2500 assets/                        # Arquivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 css/                       # Estilos CSS\n\u2502   \u2502   \u251c\u2500\u2500 main.css               # Estilo principal\n\u2502   \u2502   \u251c\u2500\u2500 login.css              # Estilos da p\u00e1gina de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.css          # Estilos do painel principal\n\u2502   \u2502   \u251c\u2500\u2500 tables.css             # Estilos do mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 menu.css               # Estilos do card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.css            # Estilos do painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 reports.css            # Estilos dos relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 ponto.css              # Estilos para o sistema de ponto\n\u2502   \u2502   \u251c\u2500\u2500 fornecedores.css       # Estilos para gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 customer-mobile.css    # Estilos para interface mobile do cliente\n\u2502   \u2502   \u251c\u2500\u2500 subscription.css       # Estilos para p\u00e1ginas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 pricing.css            # Estilos para p\u00e1gina de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing.css            # Estilos para gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Estilos espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.css       # Estilo para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.css       # Estilo para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.css       # Estilo para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.css        # Estilo para rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.css    # Estilo para self-service/buf\u00ea\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.css       # Estilo para delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foodtruck.css      # Estilo para food truck\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bar.css            # Estilo para bar/pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cafeteria.css      # Estilo para cafeteria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.css      # Estilo para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.css         # Estilos para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 js/                        # Arquivos JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # JavaScript principal\n\u2502   \u2502   \u251c\u2500\u2500 login.js               # L\u00f3gica de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js           # Funcionalidades do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 tables.js              # Gerenciamento de mesas\n\u2502   \u2502   \u251c\u2500\u2500 orders.js              # Processamento de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 menu.js                # Card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.js             # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory.js           # Controle de estoque\n\u2502   \u2502   \u251c\u2500\u2500 payments.js            # Processamento de pagamentos\n\u2502   \u2502   \u251c\u2500\u2500 stripe-integration.js  # Integra\u00e7\u00e3o com Stripe\n\u2502   \u2502   \u251c\u2500\u2500 subscription.js        # L\u00f3gica de gerenciamento de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 pricing-calculator.js  # Calculadora de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing-portal.js      # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 charts.js              # L\u00f3gica para gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 ponto.js               # L\u00f3gica de registro de ponto\n\u2502   \u2502   \u251c\u2500\u2500 supplier-manager.js    # Gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 group-orders.js        # L\u00f3gica de pedidos em grupo\n\u2502   \u2502   \u251c\u2500\u2500 bill-splitter.js       # Divis\u00e3o de contas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Scripts espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.js        # L\u00f3gica para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.js        # L\u00f3gica para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.js        # L\u00f3gica para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.js         # L\u00f3gica para rod\u00edzio (controle de passadas)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.js     # L\u00f3gica para self-service (integra\u00e7\u00e3o com balan\u00e7as)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.js        # L\u00f3gica para delivery (rastreamento)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.js       # L\u00f3gica para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.js          # L\u00f3gica para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 images/                    # Imagens\n\u2502   \u2502   \u251c\u2500\u2500 logo/                  # Logotipos\n\u2502   \u2502   \u251c\u2500\u2500 icons/                 # \u00cdcones\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 menu/              # \u00cdcones para categorias do menu\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status/            # \u00cdcones de status\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 actions/           # \u00cdcones para a\u00e7\u00f5es\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 payment/           # \u00cdcones para m\u00e9todos de pagamento\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 subscription/      # \u00cdcones para planos de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 menu/                  # Imagens dos pratos\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Elementos da interface\n\u2502   \u2502   \u251c\u2500\u2500 plans/                 # Imagens para os planos de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 restaurant-types/      # Imagens espec\u00edficas por tipo de restaurante\n\u2502   \u2502       \u251c\u2500\u2500 alacarte/          # Imagens para restaurante \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood/          # Imagens para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria/          # Imagens para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 ...                # Outros tipos\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fonts/                     # Fontes\n\u2502\n\u251c\u2500\u2500 config/                        # Arquivos de configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 database.php               # Configura\u00e7\u00e3o da conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 constants.php              # Constantes da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 stripe.php                 # Configura\u00e7\u00e3o da API do Stripe\n\u2502   \u251c\u2500\u2500 email.php                  # Configura\u00e7\u00e3o de emails\n\u2502   \u251c\u2500\u2500 sms.php                    # Configura\u00e7\u00e3o de SMS\n\u2502   \u251c\u2500\u2500 qrcode.php                 # Configura\u00e7\u00e3o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 ifood.php                  # Configura\u00e7\u00e3o da API do iFood\n\u2502   \u251c\u2500\u2500 restaurant_types.php       # Configura\u00e7\u00e3o de tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface_settings.php     # Configura\u00e7\u00f5es de interface por tipo\n\u2502   \u251c\u2500\u2500 order_methods.php          # Configura\u00e7\u00f5es de m\u00e9todos de pedido\n\u2502   \u251c\u2500\u2500 subscription_plans.php     # Configura\u00e7\u00e3o de planos de assinatura\n\u2502   \u251c\u2500\u2500 tenant.php                 # Configura\u00e7\u00e3o multi-tenant\n\u2502   \u2514\u2500\u2500 feature_limits.php         # Limites de recursos por plano\n\u2502\n\u251c\u2500\u2500 controllers/                   # Controladores\n\u2502   \u251c\u2500\u2500 AuthController.php         # Controlador de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 SubscriptionController.php # Controlador de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 PlansController.php    # Controlador de planos\n\u2502   \u2502   \u251c\u2500\u2500 BillingController.php  # Controlador de faturamento\n\u2502   \u2502   \u2514\u2500\u2500 FeatureController.php  # Controlador de recursos dispon\u00edveis\n\u2502   \u251c\u2500\u2500 TenantController.php       # Controlador multi-tenant\n\u2502   \u251c\u2500\u2500 OnboardingController.php   # Controlador de configura\u00e7\u00e3o inicial\n\u2502   \u251c\u2500\u2500 DashboardController.php    # Controlador do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteDashboardController.php  # Dashboard espec\u00edfico para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodDashboardController.php  # Dashboard espec\u00edfico para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaDashboardController.php  # Dashboard espec\u00edfico para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioDashboardController.php   # Dashboard espec\u00edfico para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 DeliveryDashboardController.php  # Dashboard espec\u00edfico para delivery\n\u2502   \u251c\u2500\u2500 TableController.php        # Controlador de mesas\n\u2502   \u251c\u2500\u2500 OrderController.php        # Controlador de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrderController.php    # Pedidos individuais\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrderController.php     # Pedidos em grupo\n\u2502   \u251c\u2500\u2500 MenuController.php         # Controlador do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuController.php   # Card\u00e1pio para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuController.php   # Card\u00e1pio para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaMenuController.php   # Card\u00e1pio para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioMenuController.php    # Card\u00e1pio para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 SelfServiceMenuController.php # Card\u00e1pio para self-service\n\u2502   \u251c\u2500\u2500 KitchenController.php      # Controlador da cozinha\n\u2502   \u251c\u2500\u2500 InventoryController.php    # Controlador de estoque\n\u2502   \u251c\u2500\u2500 PaymentController.php      # Controlador de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 BillSplitController.php      # Controlador de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ReportController.php       # Controlador de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 iFoodController.php        # Controlador de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 SupplierController.php     # Controlador de fornecedores\n\u2502   \u2502   \u2514\u2500\u2500 QuickOrderController.php     # Controlador de pedidos r\u00e1pidos\n\u2502   \u251c\u2500\u2500 StaffController.php        # Controlador de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 TimeClockController.php      # Controlador de ponto\n\u2502   \u251c\u2500\u2500 CustomerController.php     # Controlador de clientes\n\u2502   \u251c\u2500\u2500 QRCodeController.php       # Controlador de gera\u00e7\u00e3o e gest\u00e3o de QR Codes\n\u2502   \u251c\u2500\u2500 RestaurantTypeController.php # Controlador de tipo de restaurante\n\u2502   \u2514\u2500\u2500 SettingsController.php     # Controlador de configura\u00e7\u00f5es\n\u2502\n\u251c\u2500\u2500 models/                        # Modelos\n\u2502   \u251c\u2500\u2500 User.php                   # Modelo de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 Account.php                # Modelo de conta (assinatura)\n\u2502   \u2502   \u251c\u2500\u2500 Subscription.php       # Modelo de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 Plan.php               # Modelo de plano\n\u2502   \u2502   \u251c\u2500\u2500 Invoice.php            # Modelo de fatura\n\u2502   \u2502   \u2514\u2500\u2500 Usage.php              # Modelo de uso de recursos\n\u2502   \u251c\u2500\u2500 Tenant.php                 # Modelo de tenant (separa\u00e7\u00e3o de dados)\n\u2502   \u251c\u2500\u2500 Restaurant.php             # Modelo de restaurante com tipo e configura\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 RestaurantType.php         # Modelo de tipos de restaurante\n\u2502   \u251c\u2500\u2500 CashRegister.php           # Modelo de caixa\n\u2502   \u251c\u2500\u2500 Table.php                  # Modelo de mesa\n\u2502   \u251c\u2500\u2500 Order.php                  # Modelo de pedido\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrder.php        # Modelo de pedido individual\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrder.php         # Modelo de pedido em grupo\n\u2502   \u251c\u2500\u2500 OrderItem.php              # Modelo de item de pedido\n\u2502   \u251c\u2500\u2500 MenuItem.php               # Modelo de item do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuItem.php   # Extens\u00e3o para itens de \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuItem.php   # Extens\u00e3o para itens de fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzaMenuItem.php      # Extens\u00e3o para pizza (metades, bordas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 RodizioMenuItem.php    # Extens\u00e3o para rod\u00edzio\n\u2502   \u251c\u2500\u2500 Inventory.php              # Modelo de estoque\n\u2502   \u2502   \u2514\u2500\u2500 StockMovement.php      # Modelo de movimenta\u00e7\u00e3o de estoque\n\u2502   \u251c\u2500\u2500 Reservation.php            # Modelo de reserva\n\u2502   \u251c\u2500\u2500 Payment.php                # Modelo de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 BillSplit.php          # Modelo de divis\u00e3o de conta\n\u2502   \u251c\u2500\u2500 Staff.php                  # Modelo de funcion\u00e1rio\n\u2502   \u2502   \u2514\u2500\u2500 TimeClock.php          # Modelo de registro de ponto\n\u2502   \u251c\u2500\u2500 Supplier.php               # Modelo de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierContact.php    # Modelo de contato de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierOrder.php      # Modelo de pedido para fornecedor\n\u2502   \u2502   \u2514\u2500\u2500 SupplierRating.php     # Modelo de avalia\u00e7\u00e3o de fornecedor\n\u2502   \u251c\u2500\u2500 Customer.php               # Modelo de cliente\n\u2502   \u2502   \u2514\u2500\u2500 LoyaltyProgram.php     # Modelo de programa de fidelidade\n\u2502   \u251c\u2500\u2500 MarketingCampaign.php      # Modelo de campanha de marketing\n\u2502   \u251c\u2500\u2500 QRCode.php                 # Modelo de QR Code\n\u2502   \u251c\u2500\u2500 RestaurantConfiguration.php # Modelo de configura\u00e7\u00e3o do restaurante\n\u2502   \u2514\u2500\u2500 RestaurantInterface.php    # Modelo de interface do restaurante\n\u2502\n\u251c\u2500\u2500 views/                         # Visualiza\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 auth/                      # Telas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 login.php              # Tela de login\n\u2502   \u2502   \u251c\u2500\u2500 reset-password.php     # Redefini\u00e7\u00e3o de senha\n\u2502   \u2502   \u2514\u2500\u2500 register.php           # Cadastro inicial\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 subscription/              # Telas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # P\u00e1gina de planos dispon\u00edveis\n\u2502   \u2502   \u251c\u2500\u2500 checkout.php           # Checkout de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 success.php            # Confirma\u00e7\u00e3o de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 billing.php            # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 upgrade.php            # Upgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 downgrade.php          # Downgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 cancel.php             # Cancelamento de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 payment-methods.php    # Gest\u00e3o de m\u00e9todos de pagamento\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 onboarding/                # Telas de configura\u00e7\u00e3o inicial\n\u2502   \u2502   \u251c\u2500\u2500 welcome.php            # Boas-vindas e introdu\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-type.php    # Sele\u00e7\u00e3o de tipo de restaurante\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-comparison.php # Compara\u00e7\u00e3o entre tipos\n\u2502   \u2502   \u251c\u2500\u2500 basic-info.php         # Informa\u00e7\u00f5es b\u00e1sicas\n\u2502   \u2502   \u251c\u2500\u2500 menu-setup.php         # Configura\u00e7\u00e3o inicial do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 operating-hours.php    # Hor\u00e1rios de funcionamento\n\u2502   \u2502   \u251c\u2500\u2500 table-setup.php        # Configura\u00e7\u00e3o de mesas/layout\n\u2502   \u2502   \u251c\u2500\u2500 staff-roles.php        # Defini\u00e7\u00e3o de cargos\n\u2502   \u2502   \u251c\u2500\u2500 payment-options.php    # Op\u00e7\u00f5es de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 finalize.php           # Finaliza\u00e7\u00e3o e ativa\u00e7\u00e3o\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 dashboard/                 # Telas do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 index.php              # Dashboard principal (din\u00e2mico por tipo)\n\u2502   \u2502   \u251c\u2500\u2500 account-status.php     # Status da conta e assinatura\n\u2502   \u2502   \u251c\u2500\u2500 alacarte/              # Dashboards espec\u00edficos por tipo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal \u00e0 la carte\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tables.php         # Visualiza\u00e7\u00e3o de mesas \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood/              # Fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal fast food\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 queue.php          # Fila de pedidos fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria/              # Pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal pizzaria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pizza-builder.php  # Construtor de pizza\n\u2502   \u2502   \u251c\u2500\u2500 rodizio/               # Rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal rod\u00edzio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rounds.php         # Controle de passadas\n\u2502   \u2502   \u251c\u2500\u2500 selfservice/           # Self-service\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal self-service\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scales.php         # Controle de balan\u00e7as\n\u2502   \u2502   \u251c\u2500\u2500 delivery/              # Delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal delivery\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 routes.php         # Controle de rotas de entrega\n\u2502   \u2502   \u2514\u2500\u2500 multiunit/             # Rede de restaurantes\n\u2502   \u2502       \u251c\u2500\u2500 index.php          # Dashboard principal rede\n\u2502   \u2502       \u2514\u2500\u2500 units.php          # Controle de unidades\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tables/                    # Telas de mesas\n\u2502   \u2502   \u251c\u2500\u2500 map.php                # Mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 order.php              # Cria\u00e7\u00e3o de pedido\n\u2502   \u2502   \u2514\u2500\u2500 multi-user.php         # Gest\u00e3o de mesas com m\u00faltiplos usu\u00e1rios\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 menu/                      # Telas do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 admin.php              # Gerenciamento do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 editor.php             # Editor de itens do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 customer.php           # Card\u00e1pio para o cliente (QR Code)\n\u2502   \u2502   \u251c\u2500\u2500 category-manager.php   # Gerenciador de categorias\n\u2502   \u2502   \u251c\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es e card\u00e1pios especiais\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Card\u00e1pios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Layout para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Layout para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Layout para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Layout para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 selfservice.php    # Layout para self-service\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 kitchen/                   # Telas da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 panel.php              # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory-usage.php    # Uso de ingredientes\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Pain\u00e9is espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Painel para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Painel para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Painel para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 rodizio.php        # Painel para rod\u00edzio\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 inventory/                 # Telas de estoque\n\u2502   \u2502   \u251c\u2500\u2500 management.php         # Gerenciamento de estoque\n\u2502   \u2502   \u251c\u2500\u2500 movements.php          # Movimenta\u00e7\u00f5es de estoque\n\u2502   \u2502   \u2514\u2500\u2500 alerts.php             # Alertas de estoque\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 payments/                  # Telas de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 process.php            # Processamento de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 receipt.php            # Recibo\n\u2502   \u2502   \u251c\u2500\u2500 split-bill.php         # Divis\u00e3o de conta\n\u2502   \u2502   \u2514\u2500\u2500 group-payment.php      # Pagamento em grupo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 reports/                   # Telas de relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 sales.php              # Relat\u00f3rios de vendas\n\u2502   \u2502   \u251c\u2500\u2500 cash.php               # Fechamento de caixa\n\u2502   \u2502   \u251c\u2500\u2500 performance.php        # Desempenho de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 financial.php          # Relat\u00f3rios financeiros\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Relat\u00f3rios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Relat\u00f3rios para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Relat\u00f3rios para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Relat\u00f3rios para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Relat\u00f3rios para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 delivery.php       # Relat\u00f3rios para delivery\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 ifood/                     # Telas de integra\u00e7\u00e3o com iFood\n\u2502   \u2502   \u2514\u2500\u2500 orders.php             # Pedidos do iFood\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 suppliers/                 # Telas de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 quick-order.php        # Pedido r\u00e1pido\n\u2502   \u2502   \u251c\u2500\u2500 history.php            # Hist\u00f3rico de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 ratings.php            # Avalia\u00e7\u00e3o de fornecedores\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 staff/                     # Telas de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do funcion\u00e1rio\n\u2502   \u2502   \u251c\u2500\u2500 schedule.php           # Escala de trabalho\n\u2502   \u2502   \u2514\u2500\u2500 time-clock/            # Sistema de ponto\n\u2502   \u2502       \u251c\u2500\u2500 register.php       # Registro de ponto\n\u2502   \u2502       \u251c\u2500\u2500 management.php     # Gest\u00e3o de ponto\n\u2502   \u2502       \u2514\u2500\u2500 reports.php        # Relat\u00f3rios de ponto\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 customers/                 # Telas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de clientes\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do cliente\n\u2502   \u2502   \u2514\u2500\u2500 loyalty.php            # Programa de fidelidade\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 marketing/                 # Telas de marketing\n\u2502   \u2502   \u251c\u2500\u2500 campaigns.php          # Campanhas de marketing\n\u2502   \u2502   \u2514\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 qrcode/                    # Telas de gest\u00e3o de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 generator.php          # Gerador de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 manager.php            # Gestor de QR Codes\n\u2502   \u2502   \u2514\u2500\u2500 preview.php            # Pr\u00e9-visualiza\u00e7\u00e3o de QR Codes\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 admin/                     # \u00c1rea administrativa da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 accounts.php           # Gest\u00e3o de contas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # Configura\u00e7\u00e3o de planos\n\u2502   \u2502   \u251c\u2500\u2500 statistics.php         # Estat\u00edsticas da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 support.php            # Sistema de suporte\n\u2502   \u2502   \u2514\u2500\u2500 settings.php           # Configura\u00e7\u00f5es da plataforma\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 settings/                  # Telas de configura\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 general.php            # Configura\u00e7\u00f5es gerais\n\u2502       \u251c\u2500\u2500 restaurant-type.php    # Configura\u00e7\u00e3o de tipo de restaurante\n\u2502       \u251c\u2500\u2500 interfaces.php         # Configura\u00e7\u00e3o de interfaces\n\u2502       \u251c\u2500\u2500 qrcode.php             # Configura\u00e7\u00e3o de QR Code\n\u2502       \u251c\u2500\u2500 group-orders.php       # Configura\u00e7\u00e3o de pedidos em grupo\n\u2502       \u251c\u2500\u2500 time-clock.php         # Configura\u00e7\u00e3o de ponto\n\u2502       \u251c\u2500\u2500 integrations.php       # Integra\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 account.php            # Configura\u00e7\u00f5es da conta/assinatura\n\u2502       \u2514\u2500\u2500 backup.php             # Backup e seguran\u00e7a\n\u2502\n\u251c\u2500\u2500 includes/                      # Arquivos inclu\u00eddos\n\u2502   \u251c\u2500\u2500 functions.php              # Fun\u00e7\u00f5es auxiliares\n\u2502   \u251c\u2500\u2500 validation.php             # Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 session.php                # Gerenciamento de sess\u00e3o\n\u2502   \u251c\u2500\u2500 security.php               # Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 currency.php               # Formata\u00e7\u00e3o de moeda\n\u2502   \u251c\u2500\u2500 date.php                   # Fun\u00e7\u00f5es de data e hora\n\u2502   \u251c\u2500\u2500 notification.php           # Sistema de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 restaurant-type-helper.php # Fun\u00e7\u00f5es auxiliares para tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface-loader.php       # Carregador de interfaces espec\u00edficas\n\u2502   \u251c\u2500\u2500 tenant-resolver.php        # Resolu\u00e7\u00e3o de tenant\n\u2502   \u251c\u2500\u2500 feature-checker.php        # Verifica\u00e7\u00e3o de recursos dispon\u00edveis por plano\n\u2502   \u2514\u2500\u2500 subscription-helper.php    # Fun\u00e7\u00f5es auxiliares para assinaturas\n\u2502\n\u251c\u2500\u2500 api/                           # Endpoints da API\n\u2502   \u251c\u2500\u2500 auth.php                   # API de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 subscription.php           # API de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # API de planos\n\u2502   \u2502   \u251c\u2500\u2500 webhooks.php           # Webhooks do Stripe\n\u2502   \u2502   \u2514\u2500\u2500 billing.php            # API de faturamento\n\u2502   \u251c\u2500\u2500 tables.php                 # API de mesas\n\u2502   \u251c\u2500\u2500 orders.php                 # API de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 group-orders.php       # API de pedidos em grupo\n\u2502   \u251c\u2500\u2500 menu.php                   # API do card\u00e1pio\n\u2502   \u251c\u2500\u2500 payments.php               # API de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 bill-split.php         # API de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ifood.php                  # API de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 suppliers.php              # API de fornecedores\n\u2502   \u251c\u2500\u2500 staff.php                  # API de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 time-clock.php         # API de registro de ponto\n\u2502   \u251c\u2500\u2500 customers.php              # API de clientes\n\u2502   \u251c\u2500\u2500 reports.php                # API de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 qrcode.php                 # API de QR Codes\n\u2502   \u2514\u2500\u2500 restaurant-type.php        # API de tipo de restaurante\n\u2502\n\u251c\u2500\u2500 services/                      # Servi\u00e7os\n\u2502   \u251c\u2500\u2500 StripeService.php          # Servi\u00e7o de pagamento Stripe\n\u2502   \u251c\u2500\u2500 SubscriptionService.php    # Servi\u00e7o de gerenciamento de assinaturas\n\u2502   \u251c\u2500\u2500 BillingService.php         # Servi\u00e7o de gerenciamento de faturas\n\u2502   \u251c\u2500\u2500 TenantService.php          # Servi\u00e7o de gest\u00e3o multi-tenant\n\u2502   \u251c\u2500\u2500 FeatureLimitService.php    # Servi\u00e7o de controle de limites por plano\n\u2502   \u251c\u2500\u2500 QRCodeService.php          # Servi\u00e7o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 PDFService.php             # Servi\u00e7o de gera\u00e7\u00e3o de PDF\n\u2502   \u251c\u2500\u2500 iFoodService.php           # Servi\u00e7o de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 EmailService.php           # Servi\u00e7o de e-mail\n\u2502   \u251c\u2500\u2500 SMSService.php             # Servi\u00e7o de SMS\n\u2502   \u251c\u2500\u2500 NotificationService.php    # Servi\u00e7o de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 ChartService.php           # Servi\u00e7o de gera\u00e7\u00e3o de gr\u00e1ficos\n\u2502   \u251c\u2500\u2500 BackupService.php          # Servi\u00e7o de backup\n\u2502   \u251c\u2500\u2500 RestaurantTypeService.php  # Servi\u00e7o de tipo de restaurante\n\u2502   \u251c\u2500\u2500 InterfaceService.php       # Servi\u00e7o de interfaces\n\u2502   \u251c\u2500\u2500 ScaleService.php           # Servi\u00e7o de integra\u00e7\u00e3o com balan\u00e7as\n\u2502   \u251c\u2500\u2500 DeliveryTrackingService.php # Servi\u00e7o de rastreamento de entregas\n\u2502   \u2514\u2500\u2500 RodizioTrackingService.php # Servi\u00e7o de controle de rod\u00edzio\n\u2502\n\u251c\u2500\u2500 database/                      # Arquivos de banco de dados\n\u2502   \u251c\u2500\u2500 migrations/                # Migra\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 create_tenants_table.php     # Tabela de tenants\n\u2502   \u2502   \u251c\u2500\u2500 create_accounts_table.php    # Tabela de contas\n\u2502   \u2502   \u251c\u2500\u2500 create_subscriptions_table.php # Tabela de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 create_plans_table.php       # Tabela de planos\n\u2502   \u2502   \u251c\u2500\u2500 create_invoices_table.php    # Tabela de faturas\n\u2502   \u2502   \u251c\u2500\u2500 create_usage_logs_table.php  # Tabela de uso de recursos\n\u2502   \u2502   \u251c\u2500\u2500 create_users_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_types_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurants_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_configurations_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_tables_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_menu_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_order_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_inventory_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_customers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_staff_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_time_clock_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_suppliers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_contacts_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_payments_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_bill_splits_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_qrcodes_table.php\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 seeds/                     # Seeds\n\u2502       \u251c\u2500\u2500 plans_seeder.php       # Seed para planos de assinatura\n\u2502       \u251c\u2500\u2500 features_seeder.php    # Seed para recursos por plano\n\u2502       \u251c\u2500\u2500 users_seeder.php\n\u2502       \u251c\u2500\u2500 restaurant_types_seeder.php\n\u2502       \u251c\u2500\u2500 menu_items_seeder.php\n\u2502       \u251c\u2500\u2500 suppliers_seeder.php\n\u2502       \u251c\u2500\u2500 staff_seeder.php\n\u2502       \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 public/                        # Arquivos p\u00fablicos\n\u2502   \u251c\u2500\u2500 index.php                  # Ponto de entrada principal\n\u2502   \u251c\u2500\u2500 pricing.php                # P\u00e1gina p\u00fablica de pre\u00e7os\n\u2502   \u251c\u2500\u2500 register.php               # P\u00e1gina de registro\n\u2502   \u251c\u2500\u2500 customer-menu.php          # P\u00e1gina do card\u00e1pio digital\n\u2502   \u251c\u2500\u2500 group-order.php            # P\u00e1gina de pedido em grupo\n\u2502   \u251c\u2500\u2500 time-clock.php             # P\u00e1gina de registro de ponto\n\u2502   \u251c\u2500\u2500 webhook/                   # Endpoints de webhooks\n\u2502   \u2502   \u2514\u2500\u2500 stripe.php             # Webhook do Stripe\n\u2502   \u251c\u2500\u2500 qr/                        # QR Codes gerados\n\u2502   \u2502   \u2514\u2500\u2500 tables/                # QR Codes para mesas\n\u2502   \u251c\u2500\u2500 receipt/                   # Recibos gerados\n\u2502   \u2514\u2500\u2500 .htaccess                  # Configura\u00e7\u00e3o do Apache\n\u2502\n\u251c\u2500\u2500 mobile/                        # Arquivos de interface mobile\n\u2502   \u251c\u2500\u2500 index.php                  # Entrada principal mobile\n\u2502   \u251c\u2500\u2500 menu.php                   # Card\u00e1pio digital mobile\n\u2502   \u251c\u2500\u2500 order.php                  # Interface de pedido mobile\n\u2502   \u251c\u2500\u2500 group-order.php            # Interface de pedido em grupo\n\u2502   \u251c\u2500\u2500 payment.php                # Interface de pagamento mobile\n\u2502   \u251c\u2500\u2500 types/                     # Interfaces espec\u00edficas por tipo\n\u2502   \u2502   \u251c\u2500\u2500 alacarte.php           # Interface mobile para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood.php           # Interface mobile para fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria.php           # Interface mobile para pizzaria\n\u2502   \u2502   \u2514\u2500\u2500 rodizio.php            # Interface mobile para rod\u00edzio\n\u2502   \u2514\u2500\u2500 staff/                     # Interface para funcion\u00e1rios\n\u2502       \u2514\u2500\u2500 time-clock.php         # Registro de ponto mobile\n\u2502\n\u251c\u2500\u2500 docs/                          # Documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 setup.md                   # Instru\u00e7\u00f5es de instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 admin-guide.md             # Guia do administrador\n\u2502   \u251c\u2500\u2500 user-guide.md              # Guia do usu\u00e1rio\n\u2502   \u251c\u2500\u2500 api-docs.md                # Documenta\u00e7\u00e3o da API\n\u2502   \u251c\u2500\u2500 database-schema.md         # Esquema do banco de dados\n\u2502   \u251c\u2500\u2500 subscription.md            # Documenta\u00e7\u00e3o do sistema de assinaturas\n\u2502   \u2514\u2500\u2500 restaurant-types/          # Documenta\u00e7\u00e3o espec\u00edfica por tipo\n\u2502       \u251c\u2500\u2500 alacarte.md            # Documenta\u00e7\u00e3o para \u00e0 la carte\n\u2502       \u251c\u2500\u2500 fastfood.md            # Documenta\u00e7\u00e3o para fast food\n\u2502       \u251c\u2500\u2500 pizzaria.md            # Documenta\u00e7\u00e3o para pizzaria\n\u2502       \u2514\u2500\u2500 ...                    # Outros tipos\n\u2502\n\u251c\u2500\u2500 tests/                         # Testes automatizados\n\u2502   \u251c\u2500\u2500 unit/                      # Testes unit\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 subscription/          # Testes de assinatura\n\u2502   \u251c\u2500\u2500 integration/               # Testes de integra\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 acceptance/                # Testes de aceita\u00e7\u00e3o\n\u2502\n\u251c\u2500\u2500 vendor/                        # Depend\u00eancias (Composer)\n\u2502\n\u251c\u2500\u2500 .htaccess                      # Configura\u00e7\u00e3o do Apache\n\u251c\u2500\u2500 index.php                      # Arquivo inicial (redirecionamento)\n\u251c\u2500\u2500 composer.json                  # Configura\u00e7\u00e3o do Composer\n\u251c\u2500\u2500 package.json                   # Configura\u00e7\u00e3o do NPM\n\u251c\u2500\u2500 README.md                      # Documenta\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 LICENSE                        # Licen\u00e7a do software\n\u2514\u2500\u2500 .gitignore                     # Arquivos ignorados pelo Git\n```\n\n## Conclus\u00e3o\n\nO Sistema de Gest\u00e3o de Restaurantes SaaS representa uma solu\u00e7\u00e3o completa e flex\u00edvel, adaptada para diversos tipos de estabelecimentos. A implementa\u00e7\u00e3o como servi\u00e7o por assinatura permite escalabilidade e sustentabilidade do neg\u00f3cio, enquanto a personaliza\u00e7\u00e3o por tipo de restaurante garante que cada cliente tenha uma experi\u00eancia otimizada para seu modelo espec\u00edfico.\n\nA arquitetura multi-tenant, combinada com um modelo de planos em n\u00edveis, permite atender desde pequenos estabelecimentos at\u00e9 grandes redes, com um caminho claro de crescimento que acompanha a evolu\u00e7\u00e3o do neg\u00f3cio do cliente.\n\n\n\nA integra\u00e7\u00e3o com servi\u00e7os essenciais como Stripe para pagamentos, iFood para delivery, e um sistema robusto de QR Codes para pedidos digitais posiciona o sistema como uma solu\u00e7\u00e3o moderna e completa para o mercado de restaurantes, que cada vez mais demanda digitaliza\u00e7\u00e3o e efici\u00eancia operacional.\n\nO projeto apresentado n\u00e3o apenas resolve os desafios operacionais do dia a dia de um restaurante, mas tamb\u00e9m oferece insights valiosos baseados em dados que podem impulsionar o crescimento e a lucratividade do neg\u00f3cio.\n\n\n\n## Resumo \n\n\n# Checkpoint de Desenvolvimento do Sistema de Gest\u00e3o de Restaurantes SaaS\n\n\n\n### Componentes Implementados:\n\n1. **Banco de Dados MySQL (100%)**\n   - Esquema completo com todas as tabelas necess\u00e1rias\n   - Rela\u00e7\u00f5es e chaves estrangeiras\n   - \u00cdndices para otimiza\u00e7\u00e3o\n   - Estrutura para dados JSON\n   - Suporte completo para multi-tenant\n   -- Cria\u00e7\u00e3o do banco de dados\nCREATE DATABASE restaurante_saas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nUSE restaurante_saas;\n\n-- -----------------------------------------------------\n-- Tabelas do Sistema SaaS (Plataforma)\n-- -----------------------------------------------------\n\n-- Tabela de tenants (restaurantes)\nCREATE TABLE tenants (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) NOT NULL UNIQUE,\n    restaurant_type VARCHAR(20) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL,\n    logo VARCHAR(255) DEFAULT NULL,\n    theme_color VARCHAR(7) DEFAULT '#3498db',\n    domain VARCHAR(100) DEFAULT NULL,\n    \n    -- Campos para configura\u00e7\u00e3o de pagamentos\n    payment_gateway ENUM('stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede') DEFAULT 'stripe',\n    payment_gateway_key VARCHAR(255) DEFAULT NULL,\n    payment_gateway_token VARCHAR(255) DEFAULT NULL,\n    bank_name VARCHAR(100) DEFAULT NULL,\n    bank_agency VARCHAR(20) DEFAULT NULL,\n    bank_account VARCHAR(30) DEFAULT NULL,\n    pix_key VARCHAR(255) DEFAULT NULL,\n    payment_methods JSON DEFAULT '{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}',\n    payment_settings JSON DEFAULT '{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}',\n    \n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de planos de assinatura\nCREATE TABLE plans (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    code VARCHAR(20) NOT NULL UNIQUE,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    billing_cycle ENUM('monthly', 'quarterly', 'semiannual', 'annual') DEFAULT 'monthly',\n    features JSON NOT NULL,\n    limits JSON NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    stripe_product_id VARCHAR(100) DEFAULT NULL,\n    stripe_price_id VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de assinaturas\nCREATE TABLE subscriptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    plan_id INT UNSIGNED NOT NULL,\n    stripe_subscription_id VARCHAR(100) DEFAULT NULL,\n    stripe_customer_id VARCHAR(100) DEFAULT NULL,\n    status ENUM('trial', 'active', 'past_due', 'canceled', 'suspended') NOT NULL DEFAULT 'trial',\n    trial_ends_at TIMESTAMP NULL DEFAULT NULL,\n    ends_at TIMESTAMP NULL DEFAULT NULL,\n    next_billing_at TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (plan_id) REFERENCES plans(id)\n) ENGINE=InnoDB;\n\n-- Tabela de faturas\nCREATE TABLE invoices (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    subscription_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED NOT NULL,\n    stripe_invoice_id VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('draft', 'open', 'paid', 'uncollectible', 'void') NOT NULL DEFAULT 'draft',\n    due_date TIMESTAMP NULL DEFAULT NULL,\n    paid_at TIMESTAMP NULL DEFAULT NULL,\n    pdf_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de controle de uso de recursos\nCREATE TABLE resource_usage (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    resource_type VARCHAR(50) NOT NULL,\n    resource_count INT NOT NULL DEFAULT 1,\n    year INT NOT NULL,\n    month INT NOT NULL,\n    day INT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_resource_usage_per_day (tenant_id, resource_type, year, month, day),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Usu\u00e1rios e Acesso\n-- -----------------------------------------------------\n\n-- Tabela de usu\u00e1rios\nCREATE TABLE users (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NULL DEFAULT NULL,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin') NOT NULL,\n    phone VARCHAR(20) DEFAULT NULL,\n    profile_image VARCHAR(255) DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE,\n    last_login TIMESTAMP NULL DEFAULT NULL,\n    password_reset_token VARCHAR(100) DEFAULT NULL,\n    password_reset_expires TIMESTAMP NULL DEFAULT NULL,\n    remember_token VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_user_email (email),\n    UNIQUE KEY unique_user_username (username),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es\nCREATE TABLE permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es por papel\nCREATE TABLE role_permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer') NOT NULL,\n    permission_id INT UNSIGNED NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_role_permission (tenant_id, role, permission_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id)\n) ENGINE=InnoDB;\n\n-- Tabela de log de acesso\nCREATE TABLE access_logs (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    user_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED DEFAULT NULL,\n    ip_address VARCHAR(45) NOT NULL,\n    user_agent VARCHAR(255) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    details JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00e3o do Restaurante\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es do restaurante\nCREATE TABLE restaurant_configurations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    opening_hours JSON DEFAULT NULL,\n    operating_days JSON DEFAULT NULL,\n    delivery_radius INT DEFAULT 5,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    min_delivery_value DECIMAL(10, 2) DEFAULT 0.00,\n    allow_pickup BOOLEAN DEFAULT TRUE,\n    allow_delivery BOOLEAN DEFAULT TRUE,\n    allow_reservations BOOLEAN DEFAULT TRUE,\n    allow_qrcode_orders BOOLEAN DEFAULT TRUE,\n    allow_group_orders BOOLEAN DEFAULT TRUE,\n    default_order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    estimated_preparation_time INT DEFAULT 30,\n    default_table_capacity INT DEFAULT 4,\n    use_kitchen_display BOOLEAN DEFAULT TRUE,\n    taxes_included BOOLEAN DEFAULT TRUE,\n    tax_rate DECIMAL(5, 2) DEFAULT 0.00,\n    service_fee DECIMAL(5, 2) DEFAULT 0.00,\n    tip_options JSON DEFAULT NULL,\n    notification_settings JSON DEFAULT NULL,\n    printer_settings JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de \u00e1reas do restaurante\nCREATE TABLE restaurant_areas (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de caixas/terminais\nCREATE TABLE cash_registers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    location VARCHAR(100) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de aberturas e fechamentos de caixa\nCREATE TABLE cash_register_operations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    operation_type ENUM('opening', 'closing') NOT NULL,\n    initial_amount DECIMAL(10, 2) DEFAULT 0.00,\n    final_amount DECIMAL(10, 2) DEFAULT 0.00,\n    system_calculated_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_notes TEXT DEFAULT NULL,\n    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    closing_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de reservas\nCREATE TABLE reservations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    customer_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) NOT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    number_of_people INT NOT NULL,\n    reservation_date DATE NOT NULL,\n    reservation_time TIME NOT NULL,\n    arrival_time TIMESTAMP NULL DEFAULT NULL,\n    departure_time TIMESTAMP NULL DEFAULT NULL,\n    status ENUM('pending', 'confirmed', 'seated', 'completed', 'canceled', 'no_show') DEFAULT 'pending',\n    special_requests TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Mesas e QR Code\n-- -----------------------------------------------------\n\n-- Tabela de mesas\nCREATE TABLE tables (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    area_id INT UNSIGNED DEFAULT NULL,\n    number VARCHAR(10) NOT NULL,\n    name VARCHAR(50) DEFAULT NULL,\n    capacity INT UNSIGNED DEFAULT 4,\n    position_x INT DEFAULT 0,\n    position_y INT DEFAULT 0,\n    status ENUM('available', 'occupied', 'reserved', 'cleaning', 'inactive') DEFAULT 'available',\n    qr_code VARCHAR(255) DEFAULT NULL,\n    qr_code_hash VARCHAR(64) DEFAULT NULL,\n    occupied_since TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_table_number_per_tenant (tenant_id, number),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (area_id) REFERENCES restaurant_areas(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de QR Codes\nCREATE TABLE qr_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    code VARCHAR(100) NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    type ENUM('table', 'menu', 'payment', 'custom') NOT NULL DEFAULT 'table',\n    data JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    scan_count INT UNSIGNED DEFAULT 0,\n    last_scanned TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de ocupa\u00e7\u00e3o de mesas\nCREATE TABLE table_occupancy_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED NOT NULL,\n    start_time TIMESTAMP NOT NULL,\n    end_time TIMESTAMP NULL DEFAULT NULL,\n    number_of_customers INT UNSIGNED DEFAULT 1,\n    order_id INT UNSIGNED DEFAULT NULL,\n    total_spent DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Card\u00e1pio e Itens\n-- -----------------------------------------------------\n\n-- Tabela de categorias de menu\nCREATE TABLE menu_categories (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    image VARCHAR(255) DEFAULT NULL,\n    sort_order INT DEFAULT 0,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_category_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens do menu\nCREATE TABLE menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    category_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    cost DECIMAL(10, 2) DEFAULT 0.00,\n    image VARCHAR(255) DEFAULT NULL,\n    preparation_time INT DEFAULT 15,\n    ingredients TEXT DEFAULT NULL,\n    allergens TEXT DEFAULT NULL,\n    nutritional_info JSON DEFAULT NULL,\n    available BOOLEAN DEFAULT TRUE,\n    featured BOOLEAN DEFAULT FALSE,\n    sort_order INT DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    restaurant_type_specific BOOLEAN DEFAULT FALSE,\n    restaurant_type_config JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES menu_categories(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de op\u00e7\u00f5es e adicionais para itens do menu\nCREATE TABLE menu_item_options (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_selections INT DEFAULT 0,\n    max_selections INT DEFAULT 1,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de valores para op\u00e7\u00f5es de itens do menu\nCREATE TABLE menu_item_option_values (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    option_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    price_adjustment DECIMAL(10, 2) DEFAULT 0.00,\n    available BOOLEAN DEFAULT TRUE,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (option_id) REFERENCES menu_item_options(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de card\u00e1pios especiais/promo\u00e7\u00f5es\nCREATE TABLE special_menus (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    start_date DATE DEFAULT NULL,\n    end_date DATE DEFAULT NULL,\n    start_time TIME DEFAULT NULL,\n    end_time TIME DEFAULT NULL,\n    days_of_week JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens em card\u00e1pios especiais\nCREATE TABLE special_menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    special_menu_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    special_price DECIMAL(10, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (special_menu_id) REFERENCES special_menus(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pedidos\n-- -----------------------------------------------------\n\n-- Tabela de pedidos\nCREATE TABLE orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    staff_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) DEFAULT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    order_number VARCHAR(20) NOT NULL,\n    order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'new',\n    subtotal DECIMAL(10, 2) NOT NULL,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    scheduled_for TIMESTAMP NULL DEFAULT NULL,\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP NULL DEFAULT NULL,\n    cancelled_at TIMESTAMP NULL DEFAULT NULL,\n    cancellation_reason TEXT DEFAULT NULL,\n    is_group_order BOOLEAN DEFAULT FALSE,\n    group_order_code VARCHAR(20) DEFAULT NULL,\n    payment_status ENUM('pending', 'paid', 'partially_paid', 'refunded', 'failed') DEFAULT 'pending',\n    source ENUM('in_person', 'qrcode', 'website', 'app', 'ifood', 'phone') DEFAULT 'in_person',\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n    FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de itens do pedido\nCREATE TABLE order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    options JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',\n    preparation_started_at TIMESTAMP NULL DEFAULT NULL,\n    preparation_completed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de status do pedido\nCREATE TABLE order_status_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') NOT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de entregas\nCREATE TABLE deliveries (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    delivery_address VARCHAR(255) NOT NULL,\n    delivery_city VARCHAR(100) NOT NULL,\n    delivery_state VARCHAR(2) NOT NULL,\n    delivery_zip_code VARCHAR(10) NOT NULL,\n    delivery_instructions TEXT DEFAULT NULL,\n    delivery_person_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'assigned', 'in_transit', 'delivered', 'failed') DEFAULT 'pending',\n    estimated_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    actual_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    tracking_code VARCHAR(50) DEFAULT NULL,\n    tracking_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (delivery_person_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pagamentos\n-- -----------------------------------------------------\n\n-- Tabela de pagamentos\nCREATE TABLE payments (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') NOT NULL,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    installments TINYINT DEFAULT 1,\n    card_brand VARCHAR(50) DEFAULT NULL,\n    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',\n    transaction_id VARCHAR(100) DEFAULT NULL,\n    payment_data JSON DEFAULT NULL,\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de divis\u00e3o de contas\nCREATE TABLE bill_splits (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    split_type ENUM('equal', 'custom', 'percentage', 'item') NOT NULL DEFAULT 'equal',\n    payment_status ENUM('pending', 'paid') DEFAULT 'pending',\n    items JSON DEFAULT NULL,\n    payment_link VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de transa\u00e7\u00f5es no caixa\nCREATE TABLE cash_register_transactions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    cash_register_operation_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    transaction_type ENUM('sale', 'refund', 'expense', 'deposit', 'withdrawal') NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') DEFAULT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type ENUM('order', 'invoice', 'expense', 'other') DEFAULT NULL,\n    description TEXT DEFAULT NULL,\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (cash_register_operation_id) REFERENCES cash_register_operations(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de cupons e descontos\nCREATE TABLE coupons (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    code VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    discount_type ENUM('percentage', 'fixed', 'free_item') NOT NULL,\n    discount_value DECIMAL(10, 2) NOT NULL,\n    free_item_id INT UNSIGNED DEFAULT NULL,\n    min_order_value DECIMAL(10, 2) DEFAULT 0.00,\n    max_discount DECIMAL(10, 2) DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    max_uses INT UNSIGNED DEFAULT NULL,\n    uses_count INT UNSIGNED DEFAULT 0,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_coupon_code_per_tenant (tenant_id, code),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (free_item_id) REFERENCES menu_items(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Estoque e Ingredientes\n-- -----------------------------------------------------\n\n-- Tabela de ingredientes\nCREATE TABLE ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    cost_per_unit DECIMAL(10, 4) NOT NULL,\n    inventory_alert_threshold DECIMAL(10, 2) DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    barcode VARCHAR(50) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de ingredientes por item do menu\nCREATE TABLE menu_item_ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_item_ingredient (menu_item_id, ingredient_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de estoque\nCREATE TABLE inventory (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL DEFAULT 0,\n    location VARCHAR(50) DEFAULT 'main',\n    last_count_date TIMESTAMP NULL DEFAULT NULL,\n    last_count_by INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_location (tenant_id, ingredient_id, location),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (last_count_by) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de movimenta\u00e7\u00f5es de estoque\nCREATE TABLE inventory_movements (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    movement_type ENUM('purchase', 'order_usage', 'adjustment', 'transfer', 'waste', 'return') NOT NULL,\n    unit_cost DECIMAL(10, 4) DEFAULT NULL,\n    location VARCHAR(50) DEFAULT 'main',\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de contagem de estoque (invent\u00e1rio)\nCREATE TABLE inventory_counts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    count_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    user_id INT UNSIGNED NOT NULL,\n    status ENUM('in_progress', 'completed', 'cancelled') DEFAULT 'in_progress',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de detalhes da contagem de estoque\nCREATE TABLE inventory_count_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    inventory_count_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    expected_quantity DECIMAL(10, 2) NOT NULL,\n    actual_quantity DECIMAL(10, 2) NOT NULL,\n    discrepancy DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (inventory_count_id) REFERENCES inventory_counts(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Funcion\u00e1rios\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de funcion\u00e1rios\nCREATE TABLE staff_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    department VARCHAR(100) DEFAULT NULL,\n    hire_date DATE DEFAULT NULL,\n    salary DECIMAL(10, 2) DEFAULT NULL,\n    hourly_rate DECIMAL(10, 2) DEFAULT NULL,\n    commission_rate DECIMAL(5, 2) DEFAULT NULL,\n    working_hours JSON DEFAULT NULL,\n    employee_id VARCHAR(50) DEFAULT NULL,\n    emergency_contact_name VARCHAR(100) DEFAULT NULL,\n    emergency_contact_phone VARCHAR(20) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_staff_employee_id (tenant_id, employee_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de registro de ponto\nCREATE TABLE time_clock (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP NULL DEFAULT NULL,\n    break_start TIMESTAMP NULL DEFAULT NULL,\n    break_end TIMESTAMP NULL DEFAULT NULL,\n    total_hours DECIMAL(5, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de comiss\u00f5es de vendas\nCREATE TABLE sales_commissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    commission_amount DECIMAL(10, 2) NOT NULL,\n    commission_rate DECIMAL(5, 2) NOT NULL,\n    status ENUM('pending', 'approved', 'paid', 'rejected') DEFAULT 'pending',\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de escalas de trabalho\nCREATE TABLE staff_schedules (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    schedule_date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Clientes\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de clientes\nCREATE TABLE customer_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    birth_date DATE DEFAULT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    allergy_info TEXT DEFAULT NULL,\n    favorite_items JSON DEFAULT NULL,\n    marketing_preferences JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de programa de fidelidade\nCREATE TABLE loyalty_program (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_per_currency DECIMAL(10, 2) DEFAULT 1.00,\n    points_validity_days INT UNSIGNED DEFAULT 365,\n    min_points_to_redeem INT UNSIGNED DEFAULT 100,\n    currency_per_point DECIMAL(10, 4) DEFAULT 0.01,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de n\u00edveis de fidelidade\nCREATE TABLE loyalty_tiers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_points INT UNSIGNED NOT NULL,\n    multiplier DECIMAL(5, 2) DEFAULT 1.00,\n    benefits JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pontos de fidelidade\nCREATE TABLE loyalty_points (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    points INT NOT NULL,\n    source ENUM('purchase', 'reward', 'bonus', 'adjustment', 'redemption') NOT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    is_expired BOOLEAN DEFAULT FALSE,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de recompensas do programa de fidelidade\nCREATE TABLE loyalty_rewards (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_required INT UNSIGNED NOT NULL,\n    reward_type ENUM('discount', 'free_item', 'gift', 'coupon') NOT NULL,\n    reward_value JSON NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de resgates de recompensas\nCREATE TABLE loyalty_redemptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    loyalty_reward_id INT UNSIGNED NOT NULL,\n    points_used INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'approved', 'used', 'expired', 'cancelled') DEFAULT 'pending',\n    redemption_code VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    used_at TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_reward_id) REFERENCES loyalty_rewards(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Fornecedores\n-- -----------------------------------------------------\n\n-- Tabela de fornecedores\nCREATE TABLE suppliers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) DEFAULT NULL,\n    email VARCHAR(100) DEFAULT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    contact_name VARCHAR(100) DEFAULT NULL,\n    contact_phone VARCHAR(20) DEFAULT NULL,\n    contact_email VARCHAR(100) DEFAULT NULL,\n    category VARCHAR(50) DEFAULT NULL,\n    payment_terms VARCHAR(100) DEFAULT NULL,\n    delivery_time INT DEFAULT NULL,\n    minimum_order DECIMAL(10, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de produtos de fornecedores\nCREATE TABLE supplier_products (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    sku VARCHAR(50) DEFAULT NULL,\n    supplier_sku VARCHAR(50) DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    ingredient_id INT UNSIGNED DEFAULT NULL,\n    conversion_factor DECIMAL(10, 4) DEFAULT 1.0000,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos a fornecedores\nCREATE TABLE supplier_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_number VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expected_delivery_date DATE DEFAULT NULL,\n    delivery_date DATE DEFAULT NULL,\n    status ENUM('draft', 'sent', 'confirmed', 'partially_received', 'received', 'cancelled') DEFAULT 'draft',\n    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0.00,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    shipping DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    payment_status ENUM('pending', 'partial', 'paid', 'cancelled') DEFAULT 'pending',\n    payment_method VARCHAR(50) DEFAULT NULL,\n    payment_details JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de itens de pedidos a fornecedores\nCREATE TABLE supplier_order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED NOT NULL,\n    supplier_product_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    quantity_received DECIMAL(10, 2) DEFAULT 0.00,\n    status ENUM('pending', 'partial', 'complete', 'cancelled') DEFAULT 'pending',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_product_id) REFERENCES supplier_products(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de avalia\u00e7\u00e3o de fornecedores\nCREATE TABLE supplier_ratings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    quality_rating TINYINT UNSIGNED DEFAULT NULL,\n    service_rating TINYINT UNSIGNED DEFAULT NULL,\n    price_rating TINYINT UNSIGNED DEFAULT NULL,\n    delivery_rating TINYINT UNSIGNED DEFAULT NULL,\n    overall_rating TINYINT UNSIGNED NOT NULL,\n    comments TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Relat\u00f3rios e M\u00e9tricas\n-- -----------------------------------------------------\n\n-- Tabela de relat\u00f3rios salvos\nCREATE TABLE saved_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    report_type VARCHAR(50) NOT NULL,\n    parameters JSON NOT NULL,\n    public BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de relat\u00f3rios agendados\nCREATE TABLE scheduled_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    saved_report_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    frequency ENUM('daily', 'weekly', 'monthly', 'quarterly') NOT NULL,\n    day_of_week TINYINT UNSIGNED DEFAULT NULL,\n    day_of_month TINYINT UNSIGNED DEFAULT NULL,\n    time_of_day TIME NOT NULL,\n    recipients JSON NOT NULL,\n    last_sent TIMESTAMP NULL DEFAULT NULL,\n    next_scheduled TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (saved_report_id) REFERENCES saved_reports(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de m\u00e9tricas di\u00e1rias\nCREATE TABLE daily_metrics (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    metric_date DATE NOT NULL,\n    sales DECIMAL(10, 2) DEFAULT 0.00,\n    orders INT UNSIGNED DEFAULT 0,\n    customers INT UNSIGNED DEFAULT 0,\n    average_ticket DECIMAL(10, 2) DEFAULT 0.00,\n    tables_served INT UNSIGNED DEFAULT 0,\n    average_table_time INT UNSIGNED DEFAULT 0,\n    staff_count INT UNSIGNED DEFAULT 0,\n    labor_cost DECIMAL(10, 2) DEFAULT 0.00,\n    cogs DECIMAL(10, 2) DEFAULT 0.00,\n    profit_margin DECIMAL(5, 2) DEFAULT 0.00,\n    item_metrics JSON DEFAULT NULL,\n    payment_methods JSON DEFAULT NULL,\n    source_metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_tenant_date (tenant_id, metric_date),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Integra\u00e7\u00f5es Externas\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es de integra\u00e7\u00e3o com iFood\nCREATE TABLE ifood_integration (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    merchant_id VARCHAR(100) NOT NULL,\n    api_key VARCHAR(255) NOT NULL,\n    merchant_token VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT FALSE,\n    auto_accept_orders BOOLEAN DEFAULT FALSE,\n    default_preparation_time INT UNSIGNED DEFAULT 30,\n    sync_menu BOOLEAN DEFAULT TRUE,\n    sync_status BOOLEAN DEFAULT TRUE,\n    menu_last_sync TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos do iFood\nCREATE TABLE ifood_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    ifood_order_id VARCHAR(100) NOT NULL,\n    ifood_status VARCHAR(50) NOT NULL,\n    status_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    order_json JSON NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ifood_order (tenant_id, ifood_order_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de mapeamento de itens do card\u00e1pio com iFood\nCREATE TABLE ifood_menu_mapping (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ifood_item_id VARCHAR(100) NOT NULL,\n    ifood_category_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_mapping (tenant_id, menu_item_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de webhooks recebidos\nCREATE TABLE webhooks (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    source VARCHAR(50) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    webhook_id VARCHAR(100) NOT NULL,\n    payload JSON NOT NULL,\n    processed BOOLEAN DEFAULT FALSE,\n    error_message TEXT DEFAULT NULL,\n    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Marketing e Comunica\u00e7\u00e3o\n-- -----------------------------------------------------\n\n-- Tabela de campanhas de marketing\nCREATE TABLE marketing_campaigns (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    campaign_type ENUM('email', 'sms', 'push', 'in_app', 'multi_channel') NOT NULL,\n    target_audience JSON DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    content JSON NOT NULL,\n    metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de mensagens enviadas\nCREATE TABLE sent_messages (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    campaign_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    message_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    recipient VARCHAR(100) NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('sent', 'delivered', 'opened', 'clicked', 'bounced', 'failed') DEFAULT 'sent',\n    status_updated_at TIMESTAMP NULL DEFAULT NULL,\n    tracking_data JSON DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (campaign_id) REFERENCES marketing_campaigns(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de modelos de comunica\u00e7\u00e3o\nCREATE TABLE message_templates (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    template_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    variables JSON DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00f5es Fiscais\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es fiscais\nCREATE TABLE fiscal_settings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    company_tax_regime VARCHAR(50) DEFAULT NULL,\n    tax_id VARCHAR(50) DEFAULT NULL,\n    state_tax_id VARCHAR(50) DEFAULT NULL,\n    municipal_tax_id VARCHAR(50) DEFAULT NULL,\n    tax_rates JSON DEFAULT NULL,\n    fiscal_printer_model VARCHAR(100) DEFAULT NULL,\n    fiscal_printer_serial VARCHAR(100) DEFAULT NULL,\n    nfce_token VARCHAR(255) DEFAULT NULL,\n    nfce_certificate VARCHAR(255) DEFAULT NULL,\n    nfce_environment ENUM('production', 'sandbox') DEFAULT 'sandbox',\n    nfce_series INT UNSIGNED DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de notas fiscais\nCREATE TABLE fiscal_receipts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    receipt_type ENUM('nfce', 'nfe', 'sat', 'nfse') NOT NULL,\n    receipt_number VARCHAR(50) NOT NULL,\n    receipt_series VARCHAR(10) DEFAULT NULL,\n    receipt_key VARCHAR(100) DEFAULT NULL,\n    status ENUM('pending', 'issued', 'cancelled', 'error') DEFAULT 'pending',\n    issue_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_reason TEXT DEFAULT NULL,\n    receipt_url VARCHAR(255) DEFAULT NULL,\n    receipt_data JSON DEFAULT NULL,\n    qr_code TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de c\u00f3digo de produtos fiscais\nCREATE TABLE fiscal_item_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ncm VARCHAR(20) DEFAULT NULL,\n    cest VARCHAR(20) DEFAULT NULL,\n    cfop VARCHAR(10) DEFAULT NULL,\n    icms_rate DECIMAL(5, 2) DEFAULT NULL,\n    pis_rate DECIMAL(5, 2) DEFAULT NULL,\n    cofins_rate DECIMAL(5, 2) DEFAULT NULL,\n    iss_rate DECIMAL(5, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Dados iniciais\n-- -----------------------------------------------------\n\n-- Inserir planos de assinatura\nINSERT INTO plans (name, code, description, price, billing_cycle, features, limits, active) VALUES\n('Plano B\u00e1sico', 'basic', 'Ideal para pequenos estabelecimentos com funcionalidades essenciais', 99.90, 'monthly', \n '[\"qrcode_basic\", \"basic_reports\"]', \n '{\"max_tables\": 10, \"max_users\": 5, \"max_menu_items\": 50, \"max_monthly_orders\": 500}', \n true),\n('Plano Padr\u00e3o', 'standard', 'Perfeito para restaurantes de m\u00e9dio porte com recursos completos', 199.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\"]', \n '{\"max_tables\": 25, \"max_users\": 15, \"max_menu_items\": 150, \"max_monthly_orders\": 2000}', \n true),\n('Plano Premium', 'premium', 'Solu\u00e7\u00e3o completa para grandes estabelecimentos com funcionalidades avan\u00e7adas', 349.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\"]', \n '{\"max_tables\": 50, \"max_users\": 30, \"max_menu_items\": 300, \"max_monthly_orders\": 5000}', \n true),\n('Plano Enterprise', 'enterprise', 'Solu\u00e7\u00e3o personalizada para redes de restaurantes e franquias', 599.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\", \"api_access\", \"custom_integrations\"]', \n '{\"max_tables\": -1, \"max_users\": -1, \"max_menu_items\": -1, \"max_monthly_orders\": -1}', \n true);\n\n-- Inserir usu\u00e1rio admin para testes (senha: admin123)\nINSERT INTO users (username, email, password, name, role, active, email_verified) VALUES\n('admin', 'admin@restaurantesaas.com.br', '$2y$12$WxkpKAQQ1RBoOaNUvDH4R.UJYPzMvEVDkn5P3nCWfxmYUQQeMLOsW', 'Administrador', 'platform_admin', true, true);\n\n-- Inserir permiss\u00f5es b\u00e1sicas\nINSERT INTO permissions (name, description) VALUES\n('view_dashboard', 'Visualizar dashboard'),\n('manage_menu', 'Gerenciar card\u00e1pio'),\n('manage_orders', 'Gerenciar pedidos'),\n('manage_tables', 'Gerenciar mesas'),\n('manage_inventory', 'Gerenciar estoque'),\n('manage_staff', 'Gerenciar funcion\u00e1rios'),\n('manage_customers', 'Gerenciar clientes'),\n('manage_payments', 'Gerenciar pagamentos'),\n('view_reports', 'Visualizar relat\u00f3rios'),\n('manage_settings', 'Gerenciar configura\u00e7\u00f5es'),\n('manage_integrations', 'Gerenciar integra\u00e7\u00f5es'),\n('admin_access', 'Acesso administrativo completo');\n\n2. **Estrutura de Diret\u00f3rios (100%)**\n\n#!/bin/bash\n\n# Criar diret\u00f3rio raiz\nmkdir -p restaurante-sistema\n\n# Criar estrutura de assets\nmkdir -p restaurante-sistema/assets/css/restaurant-types\nmkdir -p restaurante-sistema/assets/js/restaurant-types\nmkdir -p restaurante-sistema/assets/images/logo\nmkdir -p restaurante-sistema/assets/images/icons/{menu,status,actions,payment,subscription}\nmkdir -p restaurante-sistema/assets/images/menu\nmkdir -p restaurante-sistema/assets/images/ui\nmkdir -p restaurante-sistema/assets/images/plans\nmkdir -p restaurante-sistema/assets/images/restaurant-types/{alacarte,fastfood,pizzaria}\nmkdir -p restaurante-sistema/assets/fonts\n\n# Criar arquivos CSS\ntouch restaurante-sistema/assets/css/main.css\ntouch restaurante-sistema/assets/css/login.css\ntouch restaurante-sistema/assets/css/dashboard.css\ntouch restaurante-sistema/assets/css/tables.css\ntouch restaurante-sistema/assets/css/menu.css\ntouch restaurante-sistema/assets/css/kitchen.css\ntouch restaurante-sistema/assets/css/reports.css\ntouch restaurante-sistema/assets/css/ponto.css\ntouch restaurante-sistema/assets/css/fornecedores.css\ntouch restaurante-sistema/assets/css/customer-mobile.css\ntouch restaurante-sistema/assets/css/subscription.css\ntouch restaurante-sistema/assets/css/pricing.css\ntouch restaurante-sistema/assets/css/billing.css\ntouch restaurante-sistema/assets/css/onboarding.css\n\n# Criar arquivos CSS espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/css/restaurant-types/alacarte.css\ntouch restaurante-sistema/assets/css/restaurant-types/fastfood.css\ntouch restaurante-sistema/assets/css/restaurant-types/pizzaria.css\ntouch restaurante-sistema/assets/css/restaurant-types/rodizio.css\ntouch restaurante-sistema/assets/css/restaurant-types/selfservice.css\ntouch restaurante-sistema/assets/css/restaurant-types/delivery.css\ntouch restaurante-sistema/assets/css/restaurant-types/foodtruck.css\ntouch restaurante-sistema/assets/css/restaurant-types/bar.css\ntouch restaurante-sistema/assets/css/restaurant-types/cafeteria.css\ntouch restaurante-sistema/assets/css/restaurant-types/multiunit.css\n\n# Criar arquivos JavaScript\ntouch restaurante-sistema/assets/js/main.js\ntouch restaurante-sistema/assets/js/login.js\ntouch restaurante-sistema/assets/js/dashboard.js\ntouch restaurante-sistema/assets/js/tables.js\ntouch restaurante-sistema/assets/js/orders.js\ntouch restaurante-sistema/assets/js/menu.js\ntouch restaurante-sistema/assets/js/kitchen.js\ntouch restaurante-sistema/assets/js/inventory.js\ntouch restaurante-sistema/assets/js/payments.js\ntouch restaurante-sistema/assets/js/stripe-integration.js\ntouch restaurante-sistema/assets/js/subscription.js\ntouch restaurante-sistema/assets/js/pricing-calculator.js\ntouch restaurante-sistema/assets/js/billing-portal.js\ntouch restaurante-sistema/assets/js/charts.js\ntouch restaurante-sistema/assets/js/ponto.js\ntouch restaurante-sistema/assets/js/supplier-manager.js\ntouch restaurante-sistema/assets/js/group-orders.js\ntouch restaurante-sistema/assets/js/bill-splitter.js\ntouch restaurante-sistema/assets/js/onboarding.js\n\n# Criar arquivos JavaScript espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/js/restaurant-types/alacarte.js\ntouch restaurante-sistema/assets/js/restaurant-types/fastfood.js\ntouch restaurante-sistema/assets/js/restaurant-types/pizzaria.js\ntouch restaurante-sistema/assets/js/restaurant-types/rodizio.js\ntouch restaurante-sistema/assets/js/restaurant-types/selfservice.js\ntouch restaurante-sistema/assets/js/restaurant-types/delivery.js\ntouch restaurante-sistema/assets/js/restaurant-types/multiunit.js\n\n# Criar estrutura de config\nmkdir -p restaurante-sistema/config\ntouch restaurante-sistema/config/database.php\ntouch restaurante-sistema/config/constants.php\ntouch restaurante-sistema/config/stripe.php\ntouch restaurante-sistema/config/email.php\ntouch restaurante-sistema/config/sms.php\ntouch restaurante-sistema/config/qrcode.php\ntouch restaurante-sistema/config/ifood.php\ntouch restaurante-sistema/config/restaurant_types.php\ntouch restaurante-sistema/config/interface_settings.php\ntouch restaurante-sistema/config/order_methods.php\ntouch restaurante-sistema/config/subscription_plans.php\ntouch restaurante-sistema/config/tenant.php\ntouch restaurante-sistema/config/feature_limits.php\n\n# Criar estrutura de controllers\nmkdir -p restaurante-sistema/controllers/subscription\nmkdir -p restaurante-sistema/controllers/DashboardController/{AlacarteDashboardController.php,FastFoodDashboardController.php,PizzariaDashboardController.php,RodizioDashboardController.php,DeliveryDashboardController.php}\nmkdir -p restaurante-sistema/controllers/OrderController\nmkdir -p restaurante-sistema/controllers/MenuController\nmkdir -p restaurante-sistema/controllers/PaymentController\nmkdir -p restaurante-sistema/controllers/SupplierController\nmkdir -p restaurante-sistema/controllers/StaffController\n\ntouch restaurante-sistema/controllers/AuthController.php\ntouch restaurante-sistema/controllers/SubscriptionController.php\ntouch restaurante-sistema/controllers/subscription/PlansController.php\ntouch restaurante-sistema/controllers/subscription/BillingController.php\ntouch restaurante-sistema/controllers/subscription/FeatureController.php\ntouch restaurante-sistema/controllers/TenantController.php\ntouch restaurante-sistema/controllers/OnboardingController.php\ntouch restaurante-sistema/controllers/DashboardController.php\ntouch restaurante-sistema/controllers/TableController.php\ntouch restaurante-sistema/controllers/OrderController.php\ntouch restaurante-sistema/controllers/OrderController/SingleOrderController.php\ntouch restaurante-sistema/controllers/OrderController/GroupOrderController.php\ntouch restaurante-sistema/controllers/MenuController.php\ntouch restaurante-sistema/controllers/MenuController/AlacarteMenuController.php\ntouch restaurante-sistema/controllers/MenuController/FastFoodMenuController.php\ntouch restaurante-sistema/controllers/MenuController/PizzariaMenuController.php\ntouch restaurante-sistema/controllers/MenuController/RodizioMenuController.php\ntouch restaurante-sistema/controllers/MenuController/SelfServiceMenuController.php\ntouch restaurante-sistema/controllers/KitchenController.php\ntouch restaurante-sistema/controllers/InventoryController.php\ntouch restaurante-sistema/controllers/PaymentController.php\ntouch restaurante-sistema/controllers/PaymentController/BillSplitController.php\ntouch restaurante-sistema/controllers/ReportController.php\ntouch restaurante-sistema/controllers/iFoodController.php\ntouch restaurante-sistema/controllers/SupplierController.php\ntouch restaurante-sistema/controllers/SupplierController/QuickOrderController.php\ntouch restaurante-sistema/controllers/StaffController.php\ntouch restaurante-sistema/controllers/StaffController/TimeClockController.php\ntouch restaurante-sistema/controllers/CustomerController.php\ntouch restaurante-sistema/controllers/QRCodeController.php\ntouch restaurante-sistema/controllers/RestaurantTypeController.php\ntouch restaurante-sistema/controllers/SettingsController.php\n\n# Criar estrutura de models\nmkdir -p restaurante-sistema/models/Account\nmkdir -p restaurante-sistema/models/Order\nmkdir -p restaurante-sistema/models/MenuItem\nmkdir -p restaurante-sistema/models/Inventory\nmkdir -p restaurante-sistema/models/Payment\nmkdir -p restaurante-sistema/models/Staff\nmkdir -p restaurante-sistema/models/Supplier\nmkdir -p restaurante-sistema/models/Customer\n\ntouch restaurante-sistema/models/User.php\ntouch restaurante-sistema/models/Account.php\ntouch restaurante-sistema/models/Account/Subscription.php\ntouch restaurante-sistema/models/Account/Plan.php\ntouch restaurante-sistema/models/Account/Invoice.php\ntouch restaurante-sistema/models/Account/Usage.php\ntouch restaurante-sistema/models/Tenant.php\ntouch restaurante-sistema/models/Restaurant.php\ntouch restaurante-sistema/models/RestaurantType.php\ntouch restaurante-sistema/models/CashRegister.php\ntouch restaurante-sistema/models/Table.php\ntouch restaurante-sistema/models/Order.php\ntouch restaurante-sistema/models/Order/SingleOrder.php\ntouch restaurante-sistema/models/Order/GroupOrder.php\ntouch restaurante-sistema/models/OrderItem.php\ntouch restaurante-sistema/models/MenuItem.php\ntouch restaurante-sistema/models/MenuItem/AlacarteMenuItem.php\ntouch restaurante-sistema/models/MenuItem/FastFoodMenuItem.php\ntouch restaurante-sistema/models/MenuItem/PizzaMenuItem.php\ntouch restaurante-sistema/models/MenuItem/RodizioMenuItem.php\ntouch restaurante-sistema/models/Inventory.php\ntouch restaurante-sistema/models/Inventory/StockMovement.php\ntouch restaurante-sistema/models/Reservation.php\ntouch restaurante-sistema/models/Payment.php\ntouch restaurante-sistema/models/Payment/BillSplit.php\ntouch restaurante-sistema/models/Staff.php\ntouch restaurante-sistema/models/Staff/TimeClock.php\ntouch restaurante-sistema/models/Supplier.php\ntouch restaurante-sistema/models/Supplier/SupplierContact.php\ntouch restaurante-sistema/models/Supplier/SupplierOrder.php\ntouch restaurante-sistema/models/Supplier/SupplierRating.php\ntouch restaurante-sistema/models/Customer.php\ntouch restaurante-sistema/models/Customer/LoyaltyProgram.php\ntouch restaurante-sistema/models/MarketingCampaign.php\ntouch restaurante-sistema/models/QRCode.php\ntouch restaurante-sistema/models/RestaurantConfiguration.php\ntouch restaurante-sistema/models/RestaurantInterface.php\n\n# Criar estrutura de views\nmkdir -p restaurante-sistema/views/auth\nmkdir -p restaurante-sistema/views/subscription\nmkdir -p restaurante-sistema/views/onboarding\nmkdir -p restaurante-sistema/views/dashboard/{alacarte,fastfood,pizzaria,rodizio,selfservice,delivery,multiunit}\nmkdir -p restaurante-sistema/views/tables\nmkdir -p restaurante-sistema/views/menu/types\nmkdir -p restaurante-sistema/views/kitchen/types\nmkdir -p restaurante-sistema/views/inventory\nmkdir -p restaurante-sistema/views/payments\nmkdir -p restaurante-sistema/views/reports/types\nmkdir -p restaurante-sistema/views/ifood\nmkdir -p restaurante-sistema/views/suppliers\nmkdir -p restaurante-sistema/views/staff/time-clock\nmkdir -p restaurante-sistema/views/customers\nmkdir -p restaurante-sistema/views/marketing\nmkdir -p restaurante-sistema/views/qrcode\nmkdir -p restaurante-sistema/views/admin\nmkdir -p restaurante-sistema/views/settings\n\n# Criar arquivos de views de autentica\u00e7\u00e3o\ntouch restaurante-sistema/views/auth/login.php\ntouch restaurante-sistema/views/auth/reset-password.php\ntouch restaurante-sistema/views/auth/register.php\n\n# Criar arquivos de views de assinatura\ntouch restaurante-sistema/views/subscription/plans.php\ntouch restaurante-sistema/views/subscription/checkout.php\ntouch restaurante-sistema/views/subscription/success.php\ntouch restaurante-sistema/views/subscription/billing.php\ntouch restaurante-sistema/views/subscription/upgrade.php\ntouch restaurante-sistema/views/subscription/downgrade.php\ntouch restaurante-sistema/views/subscription/cancel.php\ntouch restaurante-sistema/views/subscription/payment-methods.php\n\n# Criar arquivos de views de onboarding\ntouch restaurante-sistema/views/onboarding/welcome.php\ntouch restaurante-sistema/views/onboarding/restaurant-type.php\ntouch restaurante-sistema/views/onboarding/restaurant-comparison.php\ntouch restaurante-sistema/views/onboarding/basic-info.php\ntouch restaurante-sistema/views/onboarding/menu-setup.php\ntouch restaurante-sistema/views/onboarding/operating-hours.php\ntouch restaurante-sistema/views/onboarding/table-setup.php\ntouch restaurante-sistema/views/onboarding/staff-roles.php\ntouch restaurante-sistema/views/onboarding/payment-options.php\ntouch restaurante-sistema/views/onboarding/finalize.php\n\n# Criar arquivos de views de dashboard\ntouch restaurante-sistema/views/dashboard/index.php\ntouch restaurante-sistema/views/dashboard/account-status.php\ntouch restaurante-sistema/views/dashboard/alacarte/index.php\ntouch restaurante-sistema/views/dashboard/alacarte/tables.php\ntouch restaurante-sistema/views/dashboard/fastfood/index.php\ntouch restaurante-sistema/views/dashboard/fastfood/queue.php\ntouch restaurante-sistema/views/dashboard/pizzaria/index.php\ntouch restaurante-sistema/views/dashboard/pizzaria/pizza-builder.php\ntouch restaurante-sistema/views/dashboard/rodizio/index.php\ntouch restaurante-sistema/views/dashboard/rodizio/rounds.php\ntouch restaurante-sistema/views/dashboard/selfservice/index.php\ntouch restaurante-sistema/views/dashboard/selfservice/scales.php\ntouch restaurante-sistema/views/dashboard/delivery/index.php\ntouch restaurante-sistema/views/dashboard/delivery/routes.php\ntouch restaurante-sistema/views/dashboard/multiunit/index.php\ntouch restaurante-sistema/views/dashboard/multiunit/units.php\n\n# Criar mais arquivos de views (continua\u00e7\u00e3o)\ntouch restaurante-sistema/views/tables/map.php\ntouch restaurante-sistema/views/tables/order.php\ntouch restaurante-sistema/views/tables/multi-user.php\n\ntouch restaurante-sistema/views/menu/admin.php\ntouch restaurante-sistema/views/menu/editor.php\ntouch restaurante-sistema/views/menu/customer.php\ntouch restaurante-sistema/views/menu/category-manager.php\ntouch restaurante-sistema/views/menu/promotions.php\ntouch restaurante-sistema/views/menu/types/alacarte.php\ntouch restaurante-sistema/views/menu/types/fastfood.php\ntouch restaurante-sistema/views/menu/types/pizzaria.php\ntouch restaurante-sistema/views/menu/types/rodizio.php\ntouch restaurante-sistema/views/menu/types/selfservice.php\n\ntouch restaurante-sistema/views/kitchen/panel.php\ntouch restaurante-sistema/views/kitchen/inventory-usage.php\ntouch restaurante-sistema/views/kitchen/types/alacarte.php\ntouch restaurante-sistema/views/kitchen/types/fastfood.php\ntouch restaurante-sistema/views/kitchen/types/pizzaria.php\ntouch restaurante-sistema/views/kitchen/types/rodizio.php\n\ntouch restaurante-sistema/views/inventory/management.php\ntouch restaurante-sistema/views/inventory/movements.php\ntouch restaurante-sistema/views/inventory/alerts.php\n\ntouch restaurante-sistema/views/payments/process.php\ntouch restaurante-sistema/views/payments/receipt.php\ntouch restaurante-sistema/views/payments/split-bill.php\ntouch restaurante-sistema/views/payments/group-payment.php\n\ntouch restaurante-sistema/views/reports/sales.php\ntouch restaurante-sistema/views/reports/cash.php\ntouch restaurante-sistema/views/reports/performance.php\ntouch restaurante-sistema/views/reports/financial.php\ntouch restaurante-sistema/views/reports/types/alacarte.php\ntouch restaurante-sistema/views/reports/types/fastfood.php\ntouch restaurante-sistema/views/reports/types/pizzaria.php\ntouch restaurante-sistema/views/reports/types/rodizio.php\ntouch restaurante-sistema/views/reports/types/delivery.php\n\ntouch restaurante-sistema/views/ifood/orders.php\n\ntouch restaurante-sistema/views/suppliers/list.php\ntouch restaurante-sistema/views/suppliers/details.php\ntouch restaurante-sistema/views/suppliers/quick-order.php\ntouch restaurante-sistema/views/suppliers/history.php\ntouch restaurante-sistema/views/suppliers/ratings.php\n\ntouch restaurante-sistema/views/staff/list.php\ntouch restaurante-sistema/views/staff/details.php\ntouch restaurante-sistema/views/staff/schedule.php\ntouch restaurante-sistema/views/staff/time-clock/register.php\ntouch restaurante-sistema/views/staff/time-clock/management.php\ntouch restaurante-sistema/views/staff/time-clock/reports.php\n\ntouch restaurante-sistema/views/customers/list.php\ntouch restaurante-sistema/views/customers/details.php\ntouch restaurante-sistema/views/customers/loyalty.php\n\ntouch restaurante-sistema/views/marketing/campaigns.php\ntouch restaurante-sistema/views/marketing/promotions.php\n\ntouch restaurante-sistema/views/qrcode/generator.php\ntouch restaurante-sistema/views/qrcode/manager.php\ntouch restaurante-sistema/views/qrcode/preview.php\n\ntouch restaurante-sistema/views/admin/accounts.php\ntouch restaurante-sistema/views/admin/plans.php\ntouch restaurante-sistema/views/admin/statistics.php\ntouch restaurante-sistema/views/admin/support.php\ntouch restaurante-sistema/views/admin/settings.php\n\ntouch restaurante-sistema/views/settings/general.php\ntouch restaurante-sistema/views/settings/restaurant-type.php\ntouch restaurante-sistema/views/settings/interfaces.php\ntouch restaurante-sistema/views/settings/qrcode.php\ntouch restaurante-sistema/views/settings/group-orders.php\ntouch restaurante-sistema/views/settings/time-clock.php\ntouch restaurante-sistema/views/settings/integrations.php\ntouch restaurante-sistema/views/settings/account.php\ntouch restaurante-sistema/views/settings/backup.php\n\n# Criar estrutura de includes\nmkdir -p restaurante-sistema/includes\ntouch restaurante-sistema/includes/functions.php\ntouch restaurante-sistema/includes/validation.php\ntouch restaurante-sistema/includes/session.php\ntouch restaurante-sistema/includes/security.php\ntouch restaurante-sistema/includes/currency.php\ntouch restaurante-sistema/includes/date.php\ntouch restaurante-sistema/includes/notification.php\ntouch restaurante-sistema/includes/restaurant-type-helper.php\ntouch restaurante-sistema/includes/interface-loader.php\ntouch restaurante-sistema/includes/tenant-resolver.php\ntouch restaurante-sistema/includes/feature-checker.php\ntouch restaurante-sistema/includes/subscription-helper.php\n\n# Criar estrutura de API\nmkdir -p restaurante-sistema/api/subscription\nmkdir -p restaurante-sistema/api/orders\nmkdir -p restaurante-sistema/api/payments\nmkdir -p restaurante-sistema/api/staff\n\ntouch restaurante-sistema/api/auth.php\ntouch restaurante-sistema/api/subscription.php\ntouch restaurante-sistema/api/subscription/plans.php\ntouch restaurante-sistema/api/subscription/webhooks.php\ntouch restaurante-sistema/api/subscription/billing.php\ntouch restaurante-sistema/api/tables.php\ntouch restaurante-sistema/api/orders.php\ntouch restaurante-sistema/api/orders/group-orders.php\ntouch restaurante-sistema/api/menu.php\ntouch restaurante-sistema/api/payments.php\ntouch restaurante-sistema/api/payments/bill-split.php\ntouch restaurante-sistema/api/ifood.php\ntouch restaurante-sistema/api/suppliers.php\ntouch restaurante-sistema/api/staff.php\ntouch restaurante-sistema/api/staff/time-clock.php\ntouch restaurante-sistema/api/customers.php\ntouch restaurante-sistema/api/reports.php\ntouch restaurante-sistema/api/qrcode.php\ntouch restaurante-sistema/api/restaurant-type.php\n\n# Criar estrutura de services\nmkdir -p restaurante-sistema/services\ntouch restaurante-sistema/services/StripeService.php\ntouch restaurante-sistema/services/SubscriptionService.php\ntouch restaurante-sistema/services/BillingService.php\ntouch restaurante-sistema/services/TenantService.php\ntouch restaurante-sistema/services/FeatureLimitService.php\ntouch restaurante-sistema/services/QRCodeService.php\ntouch restaurante-sistema/services/PDFService.php\ntouch restaurante-sistema/services/iFoodService.php\ntouch restaurante-sistema/services/EmailService.php\ntouch restaurante-sistema/services/SMSService.php\ntouch restaurante-sistema/services/NotificationService.php\ntouch restaurante-sistema/services/ChartService.php\ntouch restaurante-sistema/services/BackupService.php\ntouch restaurante-sistema/services/RestaurantTypeService.php\ntouch restaurante-sistema/services/InterfaceService.php\ntouch restaurante-sistema/services/ScaleService.php\ntouch restaurante-sistema/services/DeliveryTrackingService.php\ntouch restaurante-sistema/services/RodizioTrackingService.php\n\n# Criar estrutura de database\nmkdir -p restaurante-sistema/database/migrations\nmkdir -p restaurante-sistema/database/seeds\n\ntouch restaurante-sistema/database/migrations/create_tenants_table.php\ntouch restaurante-sistema/database/migrations/create_accounts_table.php\ntouch restaurante-sistema/database/migrations/create_subscriptions_table.php\ntouch restaurante-sistema/database/migrations/create_plans_table.php\ntouch restaurante-sistema/database/migrations/create_invoices_table.php\ntouch restaurante-sistema/database/migrations/create_usage_logs_table.php\ntouch restaurante-sistema/database/migrations/create_users_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_types_table.php\ntouch restaurante-sistema/database/migrations/create_restaurants_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_configurations_table.php\ntouch restaurante-sistema/database/migrations/create_tables_table.php\ntouch restaurante-sistema/database/migrations/create_menu_items_table.php\ntouch restaurante-sistema/database/migrations/create_orders_table.php\ntouch restaurante-sistema/database/migrations/create_order_items_table.php\ntouch restaurante-sistema/database/migrations/create_inventory_table.php\ntouch restaurante-sistema/database/migrations/create_customers_table.php\ntouch restaurante-sistema/database/migrations/create_staff_table.php\ntouch restaurante-sistema/database/migrations/create_time_clock_table.php\ntouch restaurante-sistema/database/migrations/create_suppliers_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_orders_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_contacts_table.php\ntouch restaurante-sistema/database/migrations/create_payments_table.php\ntouch restaurante-sistema/database/migrations/create_bill_splits_table.php\ntouch restaurante-sistema/database/migrations/create_qrcodes_table.php\n\ntouch restaurante-sistema/database/seeds/plans_seeder.php\ntouch restaurante-sistema/database/seeds/features_seeder.php\ntouch restaurante-sistema/database/seeds/users_seeder.php\ntouch restaurante-sistema/database/seeds/restaurant_types_seeder.php\ntouch restaurante-sistema/database/seeds/menu_items_seeder.php\ntouch restaurante-sistema/database/seeds/suppliers_seeder.php\ntouch restaurante-sistema/database/seeds/staff_seeder.php\n\n# Criar estrutura de public\nmkdir -p restaurante-sistema/public/webhook\nmkdir -p restaurante-sistema/public/qr/tables\nmkdir -p restaurante-sistema/public/receipt\n\ntouch restaurante-sistema/public/index.php\ntouch restaurante-sistema/public/pricing.php\ntouch restaurante-sistema/public/register.php\ntouch restaurante-sistema/public/customer-menu.php\ntouch restaurante-sistema/public/group-order.php\ntouch restaurante-sistema/public/time-clock.php\ntouch restaurante-sistema/public/webhook/stripe.php\ntouch restaurante-sistema/public/.htaccess\n\n# Criar estrutura de mobile\nmkdir -p restaurante-sistema/mobile/types\nmkdir -p restaurante-sistema/mobile/staff\n\ntouch restaurante-sistema/mobile/index.php\ntouch restaurante-sistema/mobile/menu.php\ntouch restaurante-sistema/mobile/order.php\ntouch restaurante-sistema/mobile/group-order.php\ntouch restaurante-sistema/mobile/payment.php\ntouch restaurante-sistema/mobile/types/alacarte.php\ntouch restaurante-sistema/mobile/types/fastfood.php\ntouch restaurante-sistema/mobile/types/pizzaria.php\ntouch restaurante-sistema/mobile/types/rodizio.php\ntouch restaurante-sistema/mobile/staff/time-clock.php\n\n# Criar estrutura de docs\nmkdir -p restaurante-sistema/docs/restaurant-types\n\ntouch restaurante-sistema/docs/setup.md\ntouch restaurante-sistema/docs/admin-guide.md\ntouch restaurante-sistema/docs/user-guide.md\ntouch restaurante-sistema/docs/api-docs.md\ntouch restaurante-sistema/docs/database-schema.md\ntouch restaurante-sistema/docs/subscription.md\ntouch restaurante-sistema/docs/restaurant-types/alacarte.md\ntouch restaurante-sistema/docs/restaurant-types/fastfood.md\ntouch restaurante-sistema/docs/restaurant-types/pizzaria.md\n\n# Criar estrutura de tests\nmkdir -p restaurante-sistema/tests/unit/subscription\nmkdir -p restaurante-sistema/tests/integration\nmkdir -p restaurante-sistema/tests/acceptance\n\n# Criar estrutura de vendor (diret\u00f3rio vazio para Composer)\nmkdir -p restaurante-sistema/vendor\n\n# Criar arquivos raiz\ntouch restaurante-sistema/.htaccess\ntouch restaurante-sistema/index.php\ntouch restaurante-sistema/composer.json\ntouch restaurante-sistema/package.json\ntouch restaurante-sistema/README.md\ntouch restaurante-sistema/LICENSE\ntouch restaurante-sistema/.gitignore\n\n\ntudo acima meno o banco de dados precisar ser criado, incluindo o diret\u00f3rio\n\n# CHECKPOINT DE DESENVOLVIMENTO - SISTEMA DE GEST\u00c3O DE RESTAURANTES SAAS\n\n## PROGRESSO ATUAL: 0% CONCLU\u00cdDO\n\n\nEste checkpoint resume o progresso atual e define claramente os pr\u00f3ximos passos para o desenvolvimento. Em sua pr\u00f3xima conversa, voc\u00ea pode continuar a partir deste ponto, concentrando-se na implementa\u00e7\u00e3o dos m\u00f3dulos listados acima.\n\n\n\n\n\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\n- /core/config/app.php\n\n## Requisitos para o Pr\u00f3ximo Passo\nCrie esse projeto inteiro seguindo as intruscaoes faca 10% do projeto inteiro \n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# Desenvolvimento do M\u00f3dulo Core (10% do Projeto)\n\nVou criar os arquivos essenciais para o m\u00f3dulo core, que representa a base do sistema de gest\u00e3o de restaurantes SaaS. Este m\u00f3dulo fornecer\u00e1 a infraestrutura necess\u00e1ria para autentica\u00e7\u00e3o, gest\u00e3o de tenants e a estrutura base para o resto do sistema.\n\n## 1. Configura\u00e7\u00e3o do Banco de Dados\n\n### `/config/database.php`\n```php\n<?php\n/**\n * Configura\u00e7\u00e3o de conex\u00e3o com o banco de dados\n * Sistema de Gest\u00e3o de Restaurantes SaaS\n */\n\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'root'); // Altere para seu usu\u00e1rio MySQL\ndefine('DB_PASS', ''); // Altere para sua senha MySQL\ndefine('DB_NAME', 'restaurante_saas');\ndefine('DB_CHARSET', 'utf8mb4');\n\n/**\n * Classe Database - Gerencia a conex\u00e3o com o banco de dados\n */\nclass Database {\n    private static $instance = null;\n    private $connection;\n    \n    /**\n     * Construtor privado para controlar a cria\u00e7\u00e3o de inst\u00e2ncias\n     */\n    private function __construct() {\n        try {\n            $dsn = \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME . \";charset=\" . DB_CHARSET;\n            $options = [\n                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n                PDO::ATTR_EMULATE_PREPARES => false,\n            ];\n            \n            $this->connection = new PDO($dsn, DB_USER, DB_PASS, $options);\n        } catch (PDOException $e) {\n            error_log('Erro de conex\u00e3o: ' . $e->getMessage());\n            die('Erro ao conectar ao banco de dados. Por favor, contate o administrador.');\n        }\n    }\n    \n    /**\n     * Padr\u00e3o Singleton para garantir uma \u00fanica inst\u00e2ncia da conex\u00e3o\n     */\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n    \n    /**\n     * Retorna a conex\u00e3o com o banco de dados\n     */\n    public function getConnection() {\n        return $this->connection;\n    }\n    \n    /**\n     * Previne a clonagem da inst\u00e2ncia\n     */\n    private function __clone() {}\n    \n    /**\n     * Previne a desserializa\u00e7\u00e3o da inst\u00e2ncia\n     */\n    private function __wakeup() {}\n}\n```\n\n## 2. Funcionalidades B\u00e1sicas\n\n### `/includes/functions.php`\n```php\n<?php\n/**\n * Fun\u00e7\u00f5es auxiliares para o sistema\n * Sistema de Gest\u00e3o de Restaurantes SaaS\n */\n\n/**\n * Retorna a URL base do sistema\n */\nfunction baseUrl() {\n    $protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';\n    $host = $_SERVER['HTTP_HOST'];\n    $script = dirname($_SERVER['SCRIPT_NAME']);\n    $base = $protocol . '://' . $host . $script;\n    \n    // Remove barras extras no final\n    return rtrim($base, '/');\n}\n\n/**\n * Redireciona para uma URL espec\u00edfica\n */\nfunction redirect($url) {\n    header(\"Location: $url\");\n    exit;\n}\n\n/**\n * Sanitiza entrada do usu\u00e1rio\n */\nfunction sanitize($input) {\n    if (is_array($input)) {\n        foreach ($input as $key => $value) {\n            $input[$key] = sanitize($value);\n        }\n        return $input;\n    }\n    \n    return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');\n}\n\n/**\n * Gera um token CSRF para proteger formul\u00e1rios\n */\nfunction generateCsrfToken() {\n    if (!isset($_SESSION['csrf_token'])) {\n        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n    }\n    return $_SESSION['csrf_token'];\n}\n\n/**\n * Verifica se o token CSRF \u00e9 v\u00e1lido\n */\nfunction verifyCsrfToken($token) {\n    if (!isset($_SESSION['csrf_token']) || $token !== $_SESSION['csrf_token']) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * Formata uma data no padr\u00e3o brasileiro\n */\nfunction formatDate($date, $format = 'd/m/Y H:i') {\n    $dateTime = new DateTime($date);\n    return $dateTime->format($format);\n}\n\n/**\n * Formata um valor para moeda brasileira\n */\nfunction formatCurrency($value) {\n    return 'R$ ' . number_format($value, 2, ',', '.');\n}\n\n/**\n * Gera um slug a partir de um texto\n */\nfunction createSlug($text) {\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-z0-9\\s-]/', '', $text);\n    $text = preg_replace('/[\\s-]+/', '-', $text);\n    $text = trim($text, '-');\n    \n    return $text;\n}\n\n/**\n * Envia um email usando o sistema de email configurado\n */\nfunction sendEmail($to, $subject, $message, $from = null) {\n    // Implementa\u00e7\u00e3o simples, pode ser expandida para usar PHPMailer ou similar\n    $headers = \"MIME-Version: 1.0\" . \"\\r\\n\";\n    $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";\n    \n    if ($from) {\n        $headers .= \"From: $from\" . \"\\r\\n\";\n    }\n    \n    return mail($to, $subject, $message, $headers);\n}\n\n/**\n * Registra log no sistema\n */\nfunction logActivity($user_id, $action, $details = null, $tenant_id = null) {\n    global $db;\n    \n    $conn = Database::getInstance()->getConnection();\n    \n    $query = \"INSERT INTO access_logs (user_id, tenant_id, ip_address, user_agent, action, details) \n              VALUES (?, ?, ?, ?, ?, ?)\";\n    \n    try {\n        $stmt = $conn->prepare($query);\n        $ip = $_SERVER['REMOTE_ADDR'];\n        $ua = $_SERVER['HTTP_USER_AGENT'];\n        $detailsJson = $details ? json_encode($details) : null;\n        \n        $stmt->execute([$user_id, $tenant_id, $ip, $ua, $action, $detailsJson]);\n        return true;\n    } catch (PDOException $e) {\n        error_log('Erro ao registrar log: ' . $e->getMessage());\n        return false;\n    }\n}\n\n/**\n * Verifica se o usu\u00e1rio tem permiss\u00e3o para acessar um recurso\n */\nfunction hasPermission($userId, $permissionName, $tenantId = null) {\n    $conn = Database::getInstance()->getConnection();\n    \n    $query = \"SELECT p.id \n              FROM users u\n              JOIN role_permissions rp ON u.role = rp.role\n              JOIN permissions p ON rp.permission_id = p.id\n              WHERE u.id = ? AND p.name = ?\";\n    \n    $params = [$userId, $permissionName];\n    \n    if ($tenantId) {\n        $query .= \" AND rp.tenant_id = ?\";\n        $params[] = $tenantId;\n    }\n    \n    try {\n        $stmt = $conn->prepare($query);\n        $stmt->execute($params);\n        \n        return $stmt->rowCount() > 0;\n    } catch (PDOException $e) {\n        error_log('Erro ao verificar permiss\u00e3o: ' . $e->getMessage());\n        return false;\n    }\n}\n```\n\n### `/includes/validation.php`\n```php\n<?php\n/**\n * Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n * Sistema de Gest\u00e3o de Restaurantes SaaS\n */\n\n/**\n * Valida um email\n */\nfunction isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n\n/**\n * Valida uma senha conforme crit\u00e9rios de seguran\u00e7a\n * - M\u00ednimo 8 caracteres\n * - Pelo menos uma letra mai\u00fascula\n * - Pelo menos uma letra min\u00fascula\n * - Pelo menos um n\u00famero\n */\nfunction isValidPassword($password) {\n    if (strlen($password) < 8) {\n        return false;\n    }\n    \n    if (!preg_match('/[A-Z]/', $password)) {\n        return false;\n    }\n    \n    if (!preg_match('/[a-z]/', $password)) {\n        return false;\n    }\n    \n    if (!preg_match('/[0-9]/', $password)) {\n        return false;\n    }\n    \n    return true;\n}\n\n/**\n * Valida um CNPJ\n */\nfunction isValidCnpj($cnpj) {\n    // Remove caracteres n\u00e3o num\u00e9ricos\n    $cnpj = preg_replace('/[^0-9]/', '', $cnpj);\n    \n    // Verifica se tem 14 d\u00edgitos\n    if (strlen($cnpj) != 14) {\n        return false;\n    }\n    \n    // Verifica se todos os d\u00edgitos s\u00e3o iguais\n    if (preg_match('/(\\d)\\1{13}/', $cnpj)) {\n        return false;\n    }\n    \n    // C\u00e1lculo do primeiro d\u00edgito verificador\n    $soma = 0;\n    $multiplicador = 5;\n    \n    for ($i = 0; $i < 12; $i++) {\n        $soma += $cnpj[$i] * $multiplicador;\n        $multiplicador = ($multiplicador == 2) ? 9 : $multiplicador - 1;\n    }\n    \n    $resto = $soma % 11;\n    $dv1 = ($resto < 2) ? 0 : 11 - $resto;\n    \n    // C\u00e1lculo do segundo d\u00edgito verificador\n    $soma = 0;\n    $multiplicador = 6;\n    \n    for ($i = 0; $i < 13; $i++) {\n        $soma += $cnpj[$i] * $multiplicador;\n        $multiplicador = ($multiplicador == 2) ? 9 : $multiplicador - 1;\n    }\n    \n    $resto = $soma % 11;\n    $dv2 = ($resto < 2) ? 0 : 11 - $resto;\n    \n    // Verifica se os d\u00edgitos verificadores est\u00e3o corretos\n    return ($cnpj[12] == $dv1 && $cnpj[13] == $dv2);\n}\n\n/**\n * Valida um telefone (formato brasileiro)\n */\nfunction isValidPhone($phone) {\n    // Remove caracteres n\u00e3o num\u00e9ricos\n    $phone = preg_replace('/[^0-9]/', '', $phone);\n    \n    // Verifica se tem entre 10 e 11 d\u00edgitos (com ou sem DDD)\n    if (strlen($phone) < 10 || strlen($phone) > 11) {\n        return false;\n    }\n    \n    return true;\n}\n\n/**\n * Valida um CEP\n */\nfunction isValidZipCode($zipCode) {\n    // Remove caracteres n\u00e3o num\u00e9ricos\n    $zipCode = preg_replace('/[^0-9]/', '', $zipCode);\n    \n    // Verifica se tem 8 d\u00edgitos\n    return strlen($zipCode) == 8;\n}\n\n/**\n * Valida uma data no formato ISO (YYYY-MM-DD)\n */\nfunction isValidDate($date) {\n    if (!preg_match('/^\\d{4}-\\d{2}-\\d{2}$/', $date)) {\n        return false;\n    }\n    \n    $parts = explode('-', $date);\n    return checkdate($parts[1], $parts[2], $parts[0]);\n}\n\n/**\n * Verifica se um dado existe no banco de dados\n */\nfunction existsInDatabase($table, $field, $value, $tenantId = null) {\n    $conn = Database::getInstance()->getConnection();\n    \n    $query = \"SELECT COUNT(*) as count FROM $table WHERE $field = ?\";\n    $params = [$value];\n    \n    if ($tenantId !== null && $table != 'tenants') {\n        $query .= \" AND tenant_id = ?\";\n        $params[] = $tenantId;\n    }\n    \n    try {\n        $stmt = $conn->prepare($query);\n        $stmt->execute($params);\n        $result = $stmt->fetch();\n        \n        return $result['count'] > 0;\n    } catch (PDOException $e) {\n        error_log('Erro ao verificar exist\u00eancia no banco: ' . $e->getMessage());\n        return false;\n    }\n}\n```\n\n### `/includes/session.php`\n```php\n<?php\n/**\n * Gerenciamento de sess\u00e3o\n * Sistema de Gest\u00e3o de Restaurantes SaaS\n */\n\n// Inicia a sess\u00e3o se ainda n\u00e3o foi iniciada\nif (session_status() === PHP_SESSION_NONE) {\n    // Configura cookies seguros para sess\u00e3o\n    $cookieParams = session_get_cookie_params();\n    session_set_cookie_params(\n        $cookieParams[\"lifetime\"],\n        $cookieParams[\"path\"],\n        $cookieParams[\"domain\"],\n        isset($_SERVER['HTTPS']), // Secure cookie se HTTPS\n        true // HTTP only\n    );\n    \n    session_name('RESTAURANTE_SAAS_SESSION');\n    session_start();\n}\n\n/**\n * Define um valor na sess\u00e3o\n */\nfunction setSessionValue($key, $value) {\n    $_SESSION[$key] = $value;\n}\n\n/**\n * Obt\u00e9m um valor da sess\u00e3o\n */\nfunction getSessionValue($key, $default = null) {\n    return isset($_SESSION[$key]) ? $_SESSION[$key] : $default;\n}\n\n/**\n * Remove um valor da sess\u00e3o\n */\nfunction removeSessionValue($key) {\n    if (isset($_SESSION[$key])) {\n        unset($_SESSION[$key]);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Limpa todos os dados da sess\u00e3o\n */\nfunction clearSession() {\n    session_unset();\n    session_destroy();\n    \n    // For\u00e7a um novo ID de sess\u00e3o para evitar fixa\u00e7\u00e3o de sess\u00e3o\n    if (session_status() === PHP_SESSION_ACTIVE) {\n        session_regenerate_id(true);\n    }\n}\n\n/**\n * Regenera o ID da sess\u00e3o (usado ap\u00f3s login para prevenir session fixation)\n */\nfunction regenerateSession() {\n    return session_regenerate_id(true);\n}\n\n/**\n * Define informa\u00e7\u00f5es do usu\u00e1rio na sess\u00e3o ap\u00f3s login\n */\nfunction setUserSession($userId, $name, $email, $role, $tenantId = null) {\n    setSessionValue('user_id', $userId);\n    setSessionValue('user_name', $name);\n    setSessionValue('user_email', $email);\n    setSessionValue('user_role', $role);\n    \n    if ($tenantId) {\n        setSessionValue('tenant_id', $tenantId);\n    }\n    \n    // Regenera o ID da sess\u00e3o por seguran\u00e7a\n    regenerateSession();\n    \n    // Define o \u00faltimo acesso\n    setSessionValue('last_activity', time());\n}\n\n/**\n * Verifica se o usu\u00e1rio est\u00e1 logado\n */\nfunction isLoggedIn() {\n    return getSessionValue('user_id') !== null;\n}\n\n/**\n * Obt\u00e9m o ID do usu\u00e1rio logado\n */\nfunction getCurrentUserId() {\n    return getSessionValue('user_id');\n}\n\n/**\n * Obt\u00e9m o papel/fun\u00e7\u00e3o do usu\u00e1rio logado\n */\nfunction getCurrentUserRole() {\n    return getSessionValue('user_role');\n}\n\n/**\n * Obt\u00e9m o ID do tenant atual\n */\nfunction getCurrentTenantId() {\n    return getSessionValue('tenant_id');\n}\n\n/**\n * Verifica se a sess\u00e3o expirou por inatividade\n * Retorna true se a sess\u00e3o expirou\n */\nfunction isSessionExpired($maxIdleTime = 1800) { // 30 minutos padr\u00e3o\n    $lastActivity = getSessionValue('last_activity');\n    \n    if ($lastActivity && (time() - $lastActivity > $maxIdleTime)) {\n        clearSession();\n        return true;\n    }\n    \n    // Atualiza o timestamp da \u00faltima atividade\n    setSessionValue('last_activity', time());\n    return false;\n}\n\n/**\n * Faz logout do usu\u00e1rio\n */\nfunction logoutUser() {\n    // Registra o logout no log de atividades\n    if (isLoggedIn()) {\n        $userId = getCurrentUserId();\n        $tenantId = getCurrentTenantId();\n        logActivity($userId, 'logout', null, $tenantId);\n    }\n    \n    // Limpa a sess\u00e3o\n    clearSession();\n    \n    // Inicia uma nova sess\u00e3o\n    session_start();\n}\n```\n\n### `/includes/security.php`\n```php\n<?php\n/**\n * Fun\u00e7\u00f5es de seguran\u00e7a\n * Sistema de Gest\u00e3o de Restaurantes SaaS\n */\n\n/**\n * Gera um hash seguro para senha\n */\nfunction hashPassword($password) {\n    return password_hash($password, PASSWORD_BCRYPT, ['cost' => 12]);\n}\n\n/**\n * Verifica se a senha corresponde ao hash\n */\nfunction verifyPassword($password, $hash) {\n    return password_verify($password, $hash);\n}\n\n/**\n * Verifica se o hash da senha precisa ser atualizado\n */\nfunction passwordNeedsRehash($hash) {\n    return password_needs_rehash($hash, PASSWORD_BCRYPT, ['cost' => 12]);\n}\n\n/**\n * Gera um token aleat\u00f3rio\n */\nfunction generateRandomToken($length = 32) {\n    return bin2hex(random_bytes($length / 2));\n}\n\n/**\n * Escapa HTML para prevenir XSS\n */\nfunction escapeHtml($text) {\n    return htmlspecialchars($text, ENT_QUOTES, 'UTF-8');\n}\n\n/**\n * Prote\u00e7\u00e3o contra CSRF para formul\u00e1rios\n * Adiciona um campo hidden com o token CSRF\n */\nfunction csrfField() {\n    $token = generateCsrfToken();\n    return '<input type=\"hidden\" name=\"csrf_token\" value=\"' . $token . '\">';\n}\n\n/**\n * Verifica o token CSRF em uma requisi\u00e7\u00e3o POST\n */\nfunction checkCsrfToken() {\n    if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n        if (!isset($_POST['csrf_token']) || !verifyCsrfToken($_POST['csrf_token'])) {\n            die('Erro de valida\u00e7\u00e3o CSRF. Por favor, tente novamente.');\n        }\n    }\n}\n\n/**\n * Define headers de seguran\u00e7a para todas as p\u00e1ginas\n */\nfunction setSecurityHeaders() {\n    // Prote\u00e7\u00e3o contra clickjacking\n    header('X-Frame-Options: DENY');\n    \n    // Prote\u00e7\u00e3o contra MIME-type sniffing\n    header('X-Content-Type-Options: nosniff');\n    \n    // Habilita prote\u00e7\u00e3o XSS em navegadores modernos\n    header('X-XSS-Protection: 1; mode=block');\n    \n    // Pol\u00edtica de seguran\u00e7a de conte\u00fado (CSP)\n    header(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' https://js.stripe.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' https://*.stripe.com;\");\n    \n    // For\u00e7a HTTPS\n    if (!isset($_SERVER['HTTPS']) || $_SERVER['HTTPS'] !== 'on') {\n        // Comentado para facilitar desenvolvimento local, descomente em produ\u00e7\u00e3o:\n        // header('Location: https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);\n        // exit;\n    }\n}\n\n/**\n * Limita tentativas de login para evitar for\u00e7a bruta\n */\nfunction checkLoginAttempts($email, $maxAttempts = 5, $timeWindow = 300) {\n    $conn = Database::getInstance()->getConnection();\n    \n    try {\n        // Limpa tentativas antigas\n        $stmt = $conn->prepare(\"DELETE FROM login_attempts WHERE attempt_time < DATE_SUB(NOW(), INTERVAL ? SECOND)\");\n        $stmt->execute([$timeWindow]);\n        \n        // Conta tentativas recentes\n        $stmt = $conn->prepare(\"SELECT COUNT(*) as count FROM login_attempts WHERE email = ? AND attempt_time > DATE_SUB(NOW(), INTERVAL ? SECOND)\");\n        $stmt->execute([$email, $timeWindow]);\n        $result = $stmt->fetch();\n        \n        if ($result['count'] >= $maxAttempts) {\n            return false; // Bloqueado\n        }\n        \n        return true; // N\u00e3o bloqueado\n    } catch (PDOException $e) {\n        error_log('Erro ao verificar tentativas de login: ' . $e->getMessage());\n        return true; // Em caso de erro, permitir o login\n    }\n}\n\n/**\n * Registra uma tentativa de login\n */\nfunction recordLoginAttempt($email, $success = false) {\n    $conn = Database::getInstance()->getConnection();\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO login_attempts (email, ip_address, user_agent, success) VALUES (?, ?, ?, ?)\");\n        $stmt->execute([$email, $_SERVER['REMOTE_ADDR'], $_SERVER['HTTP_USER_AGENT'], $success ? 1 : 0]);\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log('Erro ao registrar tentativa de login: ' . $e->getMessage());\n        return false;\n    }\n}\n```\n\n## 3. Implementa\u00e7\u00e3o do Sistema Multi-Tenant\n\n### `/includes/tenant-resolver.php`\n```php\n<?php\n/**\n * Gerenciamento de multi-tenant\n * Sistema de Gest\u00e3o de Restaurantes SaaS\n */\n\n/**\n * Resolve o tenant atual baseado no dom\u00ednio ou subdomain\n */\nfunction resolveTenantByDomain() {\n    $host = $_SERVER['HTTP_HOST'];\n    \n    // Se for o dom\u00ednio principal, n\u00e3o \u00e9 um tenant espec\u00edfico\n    if ($host === 'restaurantesaas.com.br' || $host === 'www.restaurantesaas.com.br') {\n        return null;\n    }\n    \n    $conn = Database::getInstance()->getConnection();\n    \n    try {\n        // Verifica se \u00e9 um subdom\u00ednio\n        if (preg_match('/([^.]+)\\.restaurantesaas\\.com\\.br/', $host, $matches)) {\n            $slug = $matches[1];\n            \n            $stmt = $conn->prepare(\"SELECT id, name FROM tenants WHERE slug = ? AND active = 1\");\n            $stmt->execute([$slug]);\n            $tenant = $stmt->fetch();\n            \n            if ($tenant) {\n                return $tenant;\n            }\n        }\n        \n        // Verifica se \u00e9 um dom\u00ednio personalizado\n        $stmt = $conn->prepare(\"SELECT id, name FROM tenants WHERE domain = ? AND active = 1\");\n        $stmt->execute([$host]);\n        $tenant = $stmt->fetch();\n        \n        if ($tenant) {\n            return $tenant;\n        }\n        \n        return null;\n    } catch (PDOException $e) {\n        error_log('Erro ao resolver tenant: ' . $e->getMessage());\n        return null;\n    }\n}\n\n/**\n * Obt\u00e9m informa\u00e7\u00f5es detalhadas do tenant atual\n */\nfunction getCurrentTenantDetails() {\n    $tenantId = getCurrentTenantId();\n    \n    if (!$tenantId) {\n        return null;\n    }\n    \n    $conn = Database::getInstance()->getConnection();\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM tenants WHERE id = ? AND active = 1\");\n        $stmt->execute([$tenantId]);\n        return $stmt->fetch();\n    } catch (PDOException $e) {\n        error_log('Erro ao obter detalhes do tenant: ' . $e->getMessage());\n        return null;\n    }\n}\n\n/**\n * Verifica se o restaurante est\u00e1 ativo e a assinatura v\u00e1lida\n */\nfunction isTenantActive($tenantId) {\n    $conn = Database::getInstance()->getConnection();\n    \n    try {\n        $stmt = $conn->prepare(\"\n            SELECT t.active, s.status, s.ends_at \n            FROM tenants t\n            LEFT JOIN subscriptions s ON t.id = s.tenant_id\n            WHERE t.id = ?\n            ORDER BY s.created_at DESC\n            LIMIT 1\n        \");\n        $stmt->execute([$tenantId]);\n        $result = $stmt->fetch();\n        \n        if (!$result || !$result['active']) {\n            return false;\n        }\n        \n        // Verifica o status da assinatura\n        if (!$result['status'] || $result['status'] === 'cancelled' || $result['status'] === 'suspended') {\n            return false;\n        }\n        \n        // Verifica se a assinatura expirou (para assinaturas n\u00e3o recorrentes)\n        if ($result['ends_at'] && strtotime($result['ends_at']) < time()) {\n            return false;\n        }\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log('Erro ao verificar atividade do tenant: ' . $e->getMessage());\n        return false;\n    }\n}\n\n/**\n * Define o tenant atual para o contexto da aplica\u00e7\u00e3o\n */\nfunction setCurrentTenant($tenantId) {\n    if ($tenantId && isTenantActive($tenantId)) {\n        setSessionValue('tenant_id', $tenantId);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Verifica limites do plano para o tenant atual\n */\nfunction checkTenantLimits($resourceType, $currentCount = null) {\n    $tenantId = getCurrentTenantId();\n    \n    if (!$tenantId) {\n        return false;\n    }\n    \n    $conn = Database::getInstance()->getConnection();\n    \n    try {\n        // Obt\u00e9m o plano atual do tenant\n        $stmt = $conn->prepare(\"\n            SELECT p.limits \n            FROM subscriptions s\n            JOIN plans p ON s.plan_id = p.id\n            WHERE s.tenant_id = ? AND s.status IN ('trial', 'active')\n            ORDER BY s.created_at DESC\n            LIMIT 1\n        \");\n        $stmt->execute([$tenantId]);\n        $result = $stmt->fetch();\n        \n        if (!$result) {\n            return false;\n        }\n        \n        $limits = json_decode($result['limits'], true);\n        \n        // Mapeia o tipo de recurso para o campo de limite correspondente\n        $limitField = '';\n        switch ($resourceType) {\n            case 'table':\n                $limitField = 'max_tables';\n                break;\n            case 'user':\n                $limitField = 'max_users';\n                break;\n            case 'menu_item':\n                $limitField = 'max_menu_items';\n                break;\n            case 'order':\n                $limitField = 'max_monthly_orders';\n                break;\n            default:\n                return false;\n        }\n        \n        // Se o limite for -1, significa ilimitado\n        if (isset($limits[$limitField]) && $limits[$limitField] == -1) {\n            return true;\n        }\n        \n        // Se j\u00e1 temos a contagem atual, usamos ela\n        if ($currentCount !== null) {\n            return $currentCount < $limits[$limitField];\n        }\n        \n        // Caso contr\u00e1rio, contamos os recursos no banco\n        $table = '';\n        switch ($resourceType) {\n            case 'table':\n                $table = 'tables';\n                break;\n            case 'user':\n                $table = 'users';\n                break;\n            case 'menu_item':\n                $table = 'menu_items';\n                break;\n            case 'order':\n                // Para pedidos, consideramos apenas o m\u00eas atual\n                $table = 'orders';\n                $stmt = $conn->prepare(\"\n                    SELECT COUNT(*) as count \n                    FROM orders \n                    WHERE tenant_id = ? AND MONTH(created_at) = MONTH(CURRENT_DATE()) \n                    AND YEAR(created_at) = YEAR(CURRENT_DATE())\n                \");\n                $stmt->execute([$tenantId]);\n                $countResult = $stmt->fetch();\n                return $countResult['count'] < $limits[$limitField];\n        }\n        \n        if ($table) {\n            $stmt = $conn->prepare(\"SELECT COUNT(*) as count FROM $table WHERE tenant_id = ?\");\n            $stmt->execute([$tenantId]);\n            $countResult = $stmt->fetch();\n            return $countResult['count'] < $limits[$limitField];\n        }\n        \n        return false;\n    } catch (PDOException $e) {\n        error_log('Erro ao verificar limites do tenant: ' . $e->getMessage());\n        return false;\n    }\n}\n\n/**\n * Registra o uso de um recurso\n */\nfunction recordResourceUsage($resourceType, $count = 1) {\n    $tenantId = getCurrentTenantId();\n    \n    if (!$tenantId) {\n        return false;\n    }\n    \n    $conn = Database::getInstance()->getConnection();\n    \n    try {\n        $year = date('Y');\n        $month = date('n');\n        $day = date('j');\n        \n        // Verifica se j\u00e1 existe um registro para este recurso hoje\n        $stmt = $conn->prepare(\"\n            SELECT id, resource_count \n            FROM resource_usage \n            WHERE tenant_id = ? AND resource_type = ? AND year = ? AND month = ? AND day = ?\n        \");\n        $stmt->execute([$tenantId, $resourceType, $year, $month, $day]);\n        $existing = $stmt->fetch();\n        \n        if ($existing) {\n            // Atualiza o contador existente\n            $newCount = $existing['resource_count'] + $count;\n            $stmt = $conn->prepare(\"\n                UPDATE resource_usage \n                SET resource_count = ? \n                WHERE id = ?\n            \");\n            $stmt->execute([$newCount, $existing['id']]);\n        } else {\n            // Cria um novo registro\n            $stmt = $conn->prepare(\"\n                INSERT INTO resource_usage (tenant_id, resource_type, resource_count, year, month, day) \n                VALUES (?, ?, ?, ?, ?, ?)\n            \");\n            $stmt->execute([$tenantId, $resourceType, $count, $year, $month, $day]);\n        }\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log('Erro ao registrar uso de recurso: ' . $e->getMessage());\n        return false;\n    }\n}\n```\n\n## 4. Modelo de Usuario e Autentica\u00e7\u00e3o\n\n### `/models/User.php`\n```php\n<?php\n/**\n * Modelo de Usu\u00e1rio\n * Sistema de Gest\u00e3o de Restaurantes SaaS\n */\n\nclass User {\n    private $conn;\n    \n    /**\n     * Construtor\n     */\n    public function __construct() {\n        $this->conn = Database::getInstance()->getConnection();\n    }\n    \n    /**\n     * Busca um usu\u00e1rio pelo ID\n     */\n    public function getById($id, $tenantId = null) {\n        $query = \"SELECT * FROM users WHERE id = ?\";\n        $params = [$id];\n        \n        if ($tenantId) {\n            $query .= \" AND (tenant_id = ? OR tenant_id IS NULL)\";\n            $params[] = $tenantId;\n        }\n        \n        try {\n            $stmt = $this->conn->prepare($query);\n            $stmt->execute($params);\n            return $stmt->fetch();\n        } catch (PDOException $e) {\n            error_log('Erro ao buscar usu\u00e1rio por ID: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Busca um usu\u00e1rio pelo email\n     */\n    public function getByEmail($email) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM users WHERE email = ?\");\n            $stmt->execute([$email]);\n            return $stmt->fetch();\n        } catch (PDOException $e) {\n            error_log('Erro ao buscar usu\u00e1rio por email: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Busca um usu\u00e1rio pelo nome de usu\u00e1rio\n     */\n    public function getByUsername($username) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n            $stmt->execute([$username]);\n            return $stmt->fetch();\n        } catch (PDOException $e) {\n            error_log('Erro ao buscar usu\u00e1rio por username: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Cria um novo usu\u00e1rio\n     */\n    public function create($data) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                INSERT INTO users (tenant_id, username, email, password, name, role, phone, active)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n            \");\n            \n            $stmt->execute([\n                $data['tenant_id'] ?? null,\n                $data['username'],\n                $data['email'],\n                hashPassword($data['password']),\n                $data['name'],\n                $data['role'],\n                $data['phone'] ?? null,\n                $data['active'] ?? true\n            ]);\n            \n            return $this->conn->lastInsertId();\n        } catch (PDOException $e) {\n            error_log('Erro ao criar usu\u00e1rio: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Atualiza um usu\u00e1rio existente\n     */\n    public function update($id, $data, $tenantId = null) {\n        // Constr\u00f3i a query de update dinamicamente\n        $updateFields = [];\n        $params = [];\n        \n        foreach ($data as $key => $value) {\n            // Ignora campos que n\u00e3o devem ser atualizados diretamente\n            if ($key === 'id' || $key === 'tenant_id') {\n                continue;\n            }\n            \n            // Trata a senha separadamente\n            if ($key === 'password') {\n                $updateFields[] = \"password = ?\";\n                $params[] = hashPassword($value);\n                continue;\n            }\n            \n            $updateFields[] = \"$key = ?\";\n            $params[] = $value;\n        }\n        \n        // Adiciona ID e tenant_id aos par\u00e2metros\n        $params[] = $id;\n        \n        $query = \"UPDATE users SET \" . implode(', ', $updateFields) . \" WHERE id = ?\";\n        \n        if ($tenantId) {\n            $query .= \" AND tenant_id = ?\";\n            $params[] = $tenantId;\n        }\n        \n        try {\n            $stmt = $this->conn->prepare($query);\n            $stmt->execute($params);\n            \n            return $stmt->rowCount() > 0;\n        } catch (PDOException $e) {\n            error_log('Erro ao atualizar usu\u00e1rio: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Exclui um usu\u00e1rio\n     */\n    public function delete($id, $tenantId = null) {\n        $query = \"DELETE FROM users WHERE id = ?\";\n        $params = [$id];\n        \n        if ($tenantId) {\n            $query .= \" AND tenant_id = ?\";\n            $params[] = $tenantId;\n        }\n        \n        try {\n            $stmt = $this->conn->prepare($query);\n            $stmt->execute($params);\n            \n            return $stmt->rowCount() > 0;\n        } catch (PDOException $e) {\n            error_log('Erro ao excluir usu\u00e1rio: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Lista todos os usu\u00e1rios de um tenant\n     */\n    public function listByTenant($tenantId, $filters = [], $page = 1, $limit = 20) {\n        $offset = ($page - 1) * $limit;\n        \n        $query = \"SELECT * FROM users WHERE tenant_id = ?\";\n        $params = [$tenantId];\n        \n        // Aplica filtros\n        if (isset($filters['role']) && $filters['role']) {\n            $query .= \" AND role = ?\";\n            $params[] = $filters['role'];\n        }\n        \n        if (isset($filters['active'])) {\n            $query .= \" AND active = ?\";\n            $params[] = $filters['active'] ? 1 : 0;\n        }\n        \n        if (isset($filters['search']) && $filters['search']) {\n            $query .= \" AND (name LIKE ? OR email LIKE ? OR username LIKE ?)\";\n            $searchTerm = '%' . $filters['search'] . '%';\n            $params[] = $searchTerm;\n            $params[] = $searchTerm;\n            $params[] = $searchTerm;\n        }\n        \n        // Ordena\u00e7\u00e3o e pagina\u00e7\u00e3o\n        $query .= \" ORDER BY name ASC LIMIT ? OFFSET ?\";\n        $params[] = $limit;\n        $params[] = $offset;\n        \n        try {\n            $stmt = $this->conn->prepare($query);\n            $stmt->execute($params);\n            \n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            error_log('Erro ao listar usu\u00e1rios: ' . $e->getMessage());\n            return [];\n        }\n    }\n    \n    /**\n     * Conta o total de usu\u00e1rios de um tenant (para pagina\u00e7\u00e3o)\n     */\n    public function countByTenant($tenantId, $filters = []) {\n        $query = \"SELECT COUNT(*) as total FROM users WHERE tenant_id = ?\";\n        $params = [$tenantId];\n        \n        // Aplica filtros\n        if (isset($filters['role']) && $filters['role']) {\n            $query .= \" AND role = ?\";\n            $params[] = $filters['role'];\n        }\n        \n        if (isset($filters['active'])) {\n            ",
                "tokens_used": 49831,
                "response_time": 119.55
            },
            {
                "id": "0ad5b47f4fcc6e5261acf13b240fb80c",
                "timestamp": "2025-03-17T22:31:24.085766",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\n\n\n# Projeto Completo - Sistema de Gest\u00e3o de Restaurantes SaaS\n\n## 1. Tecnologias que devem ser usadas\n\nHTML,CSS,Javascript,PHP, mysql essa aplica\u00e7ao dever ser feita em web apenas\n\n## 1. Vis\u00e3o Geral do Projeto\n\n### 1.1 Descri\u00e7\u00e3o do Projeto\n\nO projeto consiste em um sistema de gest\u00e3o de restaurantes oferecido como servi\u00e7o por assinatura (SaaS - Software as a Service). O sistema atende a diversos tipos de estabelecimentos (\u00e0 la carte, fast food, pizzaria, rod\u00edzio, etc.) com funcionalidades adaptadas para cada modelo de neg\u00f3cio, permitindo opera\u00e7\u00f5es atrav\u00e9s de QR Code ou atendimento tradicional com gar\u00e7ons.\n\n### 1.2 Objetivos Principais\n\n1. Oferecer um sistema completo e personaliz\u00e1vel para gest\u00e3o de restaurantes\n2. Permitir flexibilidade para diferentes modelos de neg\u00f3cio\n3. Implementar uma estrutura escal\u00e1vel baseada em assinaturas\n4. Garantir uma experi\u00eancia otimizada tanto para restaurantes quanto para clientes finais\n5. Proporcionar integra\u00e7\u00e3o com servi\u00e7os externos (Stripe, iFood, etc.)\n\n### 1.3 P\u00fablico-Alvo\n\n- Restaurantes tradicionais \u00e0 la carte\n- Fast-foods e lanchonetes\n- Pizzarias e delivery\n- Rod\u00edzios e buf\u00eas\n- Bares e pubs\n- Food trucks\n- Redes de restaurantes\n\n### 1.4 Proposta de Valor\n\n- Redu\u00e7\u00e3o de custos operacionais\n- Aumento da efici\u00eancia no atendimento\n- Melhoria da experi\u00eancia do cliente\n- Maior controle financeiro e operacional\n- Insights de neg\u00f3cio baseados em dados\n- Flexibilidade para diferentes modelos e tamanhos de opera\u00e7\u00e3o\n\n## 2. Arquitetura do Sistema\n\n### 2.1 Vis\u00e3o Geral da Arquitetura\n\nO sistema utiliza uma arquitetura de tr\u00eas camadas:\n\n1. **Camada de Apresenta\u00e7\u00e3o**: Interfaces web e mobile para diferentes perfis de usu\u00e1rio\n2. **Camada de Aplica\u00e7\u00e3o**: L\u00f3gica de neg\u00f3cio, processamento e servi\u00e7os\n3. **Camada de Dados**: Persist\u00eancia e gerenciamento de dados\n\n### 2.2 Modelo Multi-Tenant\n\nO sistema \u00e9 constru\u00eddo com arquitetura multi-tenant, onde m\u00faltiplos restaurantes (tenants) compartilham a mesma infraestrutura, mas com dados completamente isolados:\n\n- Cada tenant possui um identificador \u00fanico\n- Todas as opera\u00e7\u00f5es de banco de dados incluem filtro por tenant\n- Recursos s\u00e3o alocados conforme o plano de assinatura\n- Backups s\u00e3o individualizados por tenant\n\n### 2.3 Infraestrutura de Nuvem\n\nA plataforma ser\u00e1 hospedada em infraestrutura de nuvem para garantir:\n\n- Alta disponibilidade (99.9+%)\n- Escalabilidade horizontal e vertical\n- Balanceamento de carga\n- Backups automatizados\n- Recupera\u00e7\u00e3o de desastres\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n\n### 2.4 Integra\u00e7\u00f5es Externas\n\nO sistema se integrar\u00e1 com diversos servi\u00e7os externos:\n\n- Stripe para processamento de pagamentos e assinaturas\n- iFood e outras plataformas de delivery\n- Sistemas fiscais e emiss\u00e3o de notas\n- Servi\u00e7os de email e SMS\n- Gateways de pagamento para opera\u00e7\u00f5es do restaurante\n\n## 3. Implementa\u00e7\u00e3o da Plataforma SaaS\n\n### 3.1 Sistema de Assinaturas\n\n#### 3.1.1 Estrutura de Planos\n\nImplementa\u00e7\u00e3o de diferentes n\u00edveis de planos:\n\n- **Plano B\u00e1sico**: Funcionalidades essenciais para pequenos estabelecimentos\n- **Plano Padr\u00e3o**: Recursos intermedi\u00e1rios para m\u00e9dios restaurantes\n- **Plano Premium**: Funcionalidades completas para grandes opera\u00e7\u00f5es\n- **Plano Enterprise**: Solu\u00e7\u00f5es personalizadas para redes e franquias\n\n#### 3.1.2 Gerenciamento de Assinaturas\n\nDesenvolvimento do fluxo completo de gest\u00e3o de assinaturas:\n\n- Cadastro e onboarding\n- Per\u00edodo de teste gratuito\n- Convers\u00e3o para assinatura paga\n- Gest\u00e3o de m\u00e9todos de pagamento\n- Renova\u00e7\u00f5es autom\u00e1ticas\n- Upgrades e downgrades de plano\n- Cancelamentos e reten\u00e7\u00e3o\n\n#### 3.1.3 Integra\u00e7\u00e3o com Stripe\n\nImplementa\u00e7\u00e3o da integra\u00e7\u00e3o completa com a API do Stripe:\n\n- Cria\u00e7\u00e3o de produtos e planos no Stripe\n- Processamento de pagamentos recorrentes\n- Gest\u00e3o de cart\u00f5es e m\u00e9todos de pagamento\n- Webhooks para eventos de pagamento\n- Tratamento de falhas e disputas\n- Gera\u00e7\u00e3o de faturas e recibos\n\n#### 3.1.4 Controle de Limites e Recursos\n\nDesenvolvimento de mecanismos para controlar a utiliza\u00e7\u00e3o conforme o plano:\n\n- Verifica\u00e7\u00e3o de limites (mesas, usu\u00e1rios, etc.)\n- Monitoramento de uso de recursos\n- Notifica\u00e7\u00f5es de limite pr\u00f3ximo\n- Op\u00e7\u00f5es de upgrade quando necess\u00e1rio\n- Controle de acesso a m\u00f3dulos premium\n\n### 3.2 Portal Administrativo\n\n#### 3.2.1 Gest\u00e3o de Clientes\n\nCria\u00e7\u00e3o de interfaces para administradores da plataforma:\n\n- Dashboard de clientes ativos\n- Detalhes de conta e consumo\n- Hist\u00f3rico de pagamentos\n- Ferramentas de suporte\n- A\u00e7\u00f5es administrativas (suspender, cancelar, etc.)\n\n#### 3.2.2 Relat\u00f3rios e Analytics\n\nImplementa\u00e7\u00e3o de ferramentas de an\u00e1lise para a opera\u00e7\u00e3o SaaS:\n\n- M\u00e9tricas de aquisi\u00e7\u00e3o de clientes\n- Taxas de convers\u00e3o e reten\u00e7\u00e3o\n- Receita recorrente mensal (MRR)\n- Valor do tempo de vida do cliente (LTV)\n- Custos de aquisi\u00e7\u00e3o de cliente (CAC)\n- Churn e renova\u00e7\u00f5es\n\n#### 3.2.3 Sistema de Suporte\n\nDesenvolvimento de ferramentas para atendimento ao cliente:\n\n- Sistema de tickets\n- Base de conhecimento\n- Chat ao vivo\n- Suporte por email\n- Escalamento para diferentes n\u00edveis\n- M\u00e9tricas de satisfa\u00e7\u00e3o e tempo de resposta\n\n## 4. Implementa\u00e7\u00e3o do Sistema de Gest\u00e3o de Restaurantes\n\n### 4.1 Personaliza\u00e7\u00e3o por Tipo de Restaurante\n\n#### 4.1.1 Onboarding e Configura\u00e7\u00e3o\n\nCria\u00e7\u00e3o do processo de configura\u00e7\u00e3o inicial:\n\n- Sele\u00e7\u00e3o do tipo de restaurante\n- Compara\u00e7\u00e3o entre tipos\n- Configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas\n- Setup inicial de mesas e ambiente\n- Cadastro de card\u00e1pio inicial\n- Configura\u00e7\u00e3o de funcion\u00e1rios e acessos\n\n#### 4.1.2 Interfaces Espec\u00edficas\n\nDesenvolvimento de interfaces adaptadas para cada tipo:\n\n- \u00c0 la carte: Foco em mesas e reservas\n- Fast Food: Foco em fila de pedidos e agilidade\n- Pizzaria: Construtor de pizza meio a meio\n- Rod\u00edzio: Controle de passadas e tempos\n- Delivery: Rastreamento e rotas\n- Self-service: Integra\u00e7\u00e3o com balan\u00e7as\n- Food Truck: Interface simplificada e mobile-first\n\n#### 4.1.3 Fluxos de Trabalho Personalizados\n\nImplementa\u00e7\u00e3o de fluxos adaptados para cada modelo:\n\n- L\u00f3gica de neg\u00f3cio espec\u00edfica por tipo\n- Regras de prioriza\u00e7\u00e3o de pedidos\n- Controles especializados (forno, passadas, pesagem)\n- Relat\u00f3rios e m\u00e9tricas relevantes para cada modelo\n\n### 4.2 M\u00f3dulo de Comandas e Pedidos\n\n#### 4.2.1 Gest\u00e3o de Mesas\n\nDesenvolvimento do sistema de controle de mesas:\n\n- Mapa visual de mesas\n- Status em tempo real\n- Controle de ocupa\u00e7\u00e3o\n- Timer de perman\u00eancia\n- Hist\u00f3rico de uso\n\n#### 4.2.2 Sistema de Pedidos\n\nImplementa\u00e7\u00e3o do fluxo completo de pedidos:\n\n- Registro de pedidos (via QR Code e gar\u00e7om)\n- Modifica\u00e7\u00f5es e adi\u00e7\u00f5es\n- Encaminhamento para cozinha\n- Notifica\u00e7\u00f5es de status\n- Fechamento e pagamento\n\n#### 4.2.3 QR Code para Clientes\n\nDesenvolvimento da experi\u00eancia de pedido via QR Code:\n\n- Gera\u00e7\u00e3o de QR Codes para mesas\n- Interface adaptada para mobile\n- Registro de dados do cliente\n- Card\u00e1pio digital interativo\n- Carrinho de pedidos\n- Solicita\u00e7\u00e3o de atendimento\n- Pagamento pelo smartphone\n\n#### 4.2.4 Divis\u00e3o de Contas\n\nImplementa\u00e7\u00e3o de mecanismos para divis\u00e3o de contas:\n\n- Divis\u00e3o por item\n- Divis\u00e3o igual entre participantes\n- Divis\u00e3o percentual\n- M\u00faltiplos pagamentos\n- Contas parciais\n\n### 4.3 M\u00f3dulo de Cozinha\n\n#### 4.3.1 Painel de Produ\u00e7\u00e3o\n\nDesenvolvimento da interface para cozinha:\n\n- Fila de pedidos em tempo real\n- Classifica\u00e7\u00e3o por prioridade\n- Temporizadores de preparo\n- Status visual por pedido\n- Alertas para pedidos atrasados\n\n#### 4.3.2 Gest\u00e3o de Estoque\n\nImplementa\u00e7\u00e3o do controle de estoque integrado:\n\n- Cadastro de ingredientes e insumos\n- Abate autom\u00e1tico do estoque\n- Alertas de estoque baixo\n- Previs\u00e3o de necessidade\n- Pedidos autom\u00e1ticos\n\n#### 4.3.3 Controles Espec\u00edficos\n\nCria\u00e7\u00e3o de funcionalidades especializadas:\n\n- Temporizadores para forno\n- Controle de passadas para rod\u00edzio\n- Separa\u00e7\u00e3o de delivery e local\n- Alertas para al\u00e9rgenos\n\n### 4.4 M\u00f3dulo de Pagamentos\n\n#### 4.4.1 Processamento de Pagamentos\n\nImplementa\u00e7\u00e3o dos fluxos de pagamento:\n\n- Integra\u00e7\u00e3o com Stripe para pagamentos\n- Suporte a cart\u00f5es de cr\u00e9dito/d\u00e9bito\n- Pagamentos via PIX\n- Dinheiro e outras formas locais\n- Concilia\u00e7\u00e3o financeira\n\n#### 4.4.2 Fechamento de Caixa\n\nDesenvolvimento do processo de fechamento:\n\n- Abertura e fechamento de caixa\n- Registro de entradas e sa\u00eddas\n- Contagem f\u00edsica\n- Detec\u00e7\u00e3o de diferen\u00e7as\n- Relat\u00f3rio de fechamento\n\n#### 4.4.3 Emiss\u00e3o de Comprovantes\n\nImplementa\u00e7\u00e3o da gera\u00e7\u00e3o de documentos:\n\n- Recibos digitais\n- Envio por email ou WhatsApp\n- Integra\u00e7\u00e3o com sistemas fiscais\n- Armazenamento de comprovantes\n\n### 4.5 M\u00f3dulo de Funcion\u00e1rios\n\n#### 4.5.1 Controle de Acesso\n\nDesenvolvimento do sistema de acesso:\n\n- Cadastro de funcion\u00e1rios\n- Perfis de permiss\u00e3o\n- Autentica\u00e7\u00e3o segura\n- Registro de atividades\n- Pol\u00edticas de seguran\u00e7a\n\n#### 4.5.2 Registro de Ponto\n\nImplementa\u00e7\u00e3o do controle de ponto:\n\n- Registro de entrada e sa\u00edda\n- Valida\u00e7\u00e3o por localiza\u00e7\u00e3o\n- C\u00e1lculo de horas trabalhadas\n- Controle de intervalos\n- Exporta\u00e7\u00e3o para folha de pagamento\n\n#### 4.5.3 Desempenho e Comiss\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para gest\u00e3o de desempenho:\n\n- M\u00e9tricas por funcion\u00e1rio\n- C\u00e1lculo de comiss\u00f5es\n- Avalia\u00e7\u00e3o de desempenho\n- Classifica\u00e7\u00e3o por objetivos\n- Feedback e desenvolvimento\n\n### 4.6 M\u00f3dulo de Fornecedores\n\n#### 4.6.1 Cadastro e Gest\u00e3o\n\nImplementa\u00e7\u00e3o do gerenciamento de fornecedores:\n\n- Cadastro detalhado de fornecedores\n- Categoriza\u00e7\u00e3o por tipo de produto\n- Condi\u00e7\u00f5es comerciais\n- Contatos de emerg\u00eancia\n- Avalia\u00e7\u00e3o de desempenho\n\n#### 4.6.2 Pedidos e Reposi\u00e7\u00e3o\n\nDesenvolvimento do fluxo de compras:\n\n- Pedidos r\u00e1pidos\n- Sugest\u00e3o autom\u00e1tica de reposi\u00e7\u00e3o\n- Aprova\u00e7\u00e3o de pedidos\n- Acompanhamento de entrega\n- Recebimento e confer\u00eancia\n\n#### 4.6.3 Hist\u00f3rico e Avalia\u00e7\u00e3o\n\nCria\u00e7\u00e3o de ferramentas para an\u00e1lise de fornecedores:\n\n- Hist\u00f3rico de pedidos\n- Cumprimento de prazos\n- Qualidade de produtos\n- Competitividade de pre\u00e7os\n- Ranking de fornecedores\n\n### 4.7 M\u00f3dulo de Relat\u00f3rios\n\n#### 4.7.1 Relat\u00f3rios Operacionais\n\nImplementa\u00e7\u00e3o de relat\u00f3rios para a opera\u00e7\u00e3o di\u00e1ria:\n\n- Vendas por per\u00edodo\n- Ocupa\u00e7\u00e3o de mesas\n- Tempo m\u00e9dio de atendimento\n- Itens mais vendidos\n- Cancelamentos e devolu\u00e7\u00f5es\n\n#### 4.7.2 Relat\u00f3rios Financeiros\n\nDesenvolvimento de an\u00e1lises financeiras:\n\n- Faturamento por per\u00edodo\n- Custos e despesas\n- Lucratividade por produto\n- Fluxo de caixa\n- Proje\u00e7\u00f5es e comparativos\n\n#### 4.7.3 Dashboards e Analytics\n\nCria\u00e7\u00e3o de pain\u00e9is visuais e an\u00e1lises:\n\n- Dashboard executivo\n- Gr\u00e1ficos e visualiza\u00e7\u00f5es\n- Tend\u00eancias e sazonalidade\n- An\u00e1lise de dados em tempo real\n- Exporta\u00e7\u00e3o para Excel/PDF\n\n### 4.8 M\u00f3dulo de Marketing e CRM\n\n#### 4.8.1 Cadastro de Clientes\n\nImplementa\u00e7\u00e3o do gerenciamento de clientes:\n\n- Captura de dados via QR Code\n- Hist\u00f3rico de pedidos\n- Prefer\u00eancias e restri\u00e7\u00f5es\n- Segmenta\u00e7\u00e3o de clientes\n- Privacidade e LGPD\n\n#### 4.8.2 Programa de Fidelidade\n\nDesenvolvimento de sistema de fideliza\u00e7\u00e3o:\n\n- Ac\u00famulo de pontos por compra\n- N\u00edveis de fidelidade\n- Recompensas e benef\u00edcios\n- Promo\u00e7\u00f5es personalizadas\n- An\u00e1lise de engajamento\n\n#### 4.8.3 Campanhas e Promo\u00e7\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para a\u00e7\u00f5es de marketing:\n\n- Cria\u00e7\u00e3o de campanhas\n- Descontos e ofertas especiais\n- Comunica\u00e7\u00e3o por email e SMS\n- Aniversariantes do m\u00eas\n- Mensura\u00e7\u00e3o de resultados\n\n## 5. Integra\u00e7\u00f5es com Servi\u00e7os Externos\n\n### 5.1 Integra\u00e7\u00e3o com Plataformas de Delivery\n\n#### 5.1.1 iFood e Outras Plataformas\n\nImplementa\u00e7\u00e3o de conex\u00e3o com marketplaces:\n\n- Recebimento de pedidos em tempo real\n- Aceita\u00e7\u00e3o/rejei\u00e7\u00e3o autom\u00e1tica\n- Atualiza\u00e7\u00e3o de status\n- Sincroniza\u00e7\u00e3o de card\u00e1pio\n- Concilia\u00e7\u00e3o financeira\n\n#### 5.1.2 Delivery Pr\u00f3prio\n\nDesenvolvimento de sistema pr\u00f3prio de delivery:\n\n- Cadastro de entregadores\n- Roteiriza\u00e7\u00e3o de entregas\n- Rastreamento em tempo real\n- \u00c1reas e taxas de entrega\n- Gest\u00e3o de frota\n\n### 5.2 Integra\u00e7\u00e3o com Sistemas Fiscais\n\n#### 5.2.1 Emiss\u00e3o de Notas Fiscais\n\nImplementa\u00e7\u00e3o de processos fiscais:\n\n- Emiss\u00e3o de NFC-e, NF-e\n- Valida\u00e7\u00e3o com WebServices da SEFAZ\n- Armazenamento e envio de documentos\n- Tratamento de conting\u00eancia\n- Relat\u00f3rios fiscais\n\n#### 5.2.2 Concilia\u00e7\u00e3o Cont\u00e1bil\n\nDesenvolvimento de ferramentas para contabilidade:\n\n- Exporta\u00e7\u00e3o para sistemas cont\u00e1beis\n- Plano de contas configur\u00e1vel\n- Relat\u00f3rios para DRE\n- Apura\u00e7\u00e3o de impostos\n- Fechamento mensal\n\n### 5.3 Integra\u00e7\u00e3o com Balan\u00e7as\n\n#### 5.3.1 Para Self-Service\n\nImplementa\u00e7\u00e3o de conex\u00e3o com balan\u00e7as:\n\n- Leitura de peso em tempo real\n- C\u00e1lculo autom\u00e1tico de valor\n- Calibra\u00e7\u00e3o e configura\u00e7\u00e3o\n- Modo offline para conting\u00eancia\n- Registro de pesagens\n\n#### 5.3.2 Para Controle de Estoque\n\nDesenvolvimento de pesagem para estoque:\n\n- Pesagem de insumos\n- Convers\u00e3o de unidades\n- Controle de quebra e perdas\n- Rastreabilidade\n- Invent\u00e1rio f\u00edsico\n\n### 5.4 Integra\u00e7\u00e3o com Equipamentos\n\n#### 5.4.1 Impressoras e Comandas\n\nImplementa\u00e7\u00e3o de sistema de impress\u00e3o:\n\n- Impress\u00e3o de comandas para cozinha\n- Impress\u00e3o de contas e recibos\n- Suporte a diversas marcas de impressoras\n- Configura\u00e7\u00e3o de layouts\n- Tratamento de falhas\n\n#### 5.4.2 Displays de Cozinha\n\nDesenvolvimento de integra\u00e7\u00e3o com displays:\n\n- Exibi\u00e7\u00e3o de pedidos em andamento\n- Alertas visuais e sonoros\n- Temporizadores\n- Confirma\u00e7\u00e3o por toque\n- Sincroniza\u00e7\u00e3o em tempo real\n\n## 6. Infraestrutura e Hospedagem\n\n### 6.1 Ambiente de Produ\u00e7\u00e3o\n\n#### 6.1.1 Servidores Web\n\nConfigura\u00e7\u00e3o da infraestrutura web:\n\n- Servidores web redundantes\n- Balanceadores de carga\n- Certificados SSL/TLS\n- Cache e otimiza\u00e7\u00e3o\n- Monitoramento 24/7\n\n#### 6.1.2 Banco de Dados\n\nImplementa\u00e7\u00e3o da camada de dados:\n\n- Cluster de banco de dados MySQL\n- Replica\u00e7\u00e3o e alta disponibilidade\n- Backups automatizados\n- Particionamento por tenant\n- Otimiza\u00e7\u00e3o de performance\n\n#### 6.1.3 Armazenamento\n\nConfigura\u00e7\u00e3o de sistemas de armazenamento:\n\n- Sistema de arquivos distribu\u00eddo\n- Armazenamento para backups\n- CDN para assets est\u00e1ticos\n- Pol\u00edticas de reten\u00e7\u00e3o\n- Compress\u00e3o e otimiza\u00e7\u00e3o\n\n### 6.2 Escalabilidade\n\n#### 6.2.1 Horizontal\n\nImplementa\u00e7\u00e3o de mecanismos de crescimento:\n\n- Auto-scaling de servidores\n- Gerenciamento de capacidade\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n- Load balancing avan\u00e7ado\n- Cont\u00eaineres e orquestra\u00e7\u00e3o\n\n#### 6.2.2 Vertical\n\nPlanejamento para crescimento de recursos:\n\n- Upgrades de hardware\n- Otimiza\u00e7\u00e3o de software\n- Benchmarking e performance\n- Ajuste de recursos por demanda\n- Monitoramento de gargalos\n\n### 6.3 Monitoramento e Logging\n\n#### 6.3.1 Monitoramento de Sistema\n\nImplementa\u00e7\u00e3o de sistemas de observabilidade:\n\n- Monitoramento em tempo real\n- Alertas autom\u00e1ticos\n- Dashboards operacionais\n- An\u00e1lise de tend\u00eancias\n- Detec\u00e7\u00e3o de anomalias\n\n#### 6.3.2 Logging e Auditoria\n\nDesenvolvimento de registro de eventos:\n\n- Centraliza\u00e7\u00e3o de logs\n- Reten\u00e7\u00e3o configur\u00e1vel\n- Busca e an\u00e1lise\n- Trilhas de auditoria\n- Exporta\u00e7\u00e3o e conformidade\n\n### 6.4 Continuidade de Neg\u00f3cio\n\n#### 6.4.1 Backups\n\nImplementa\u00e7\u00e3o de estrat\u00e9gia de backups:\n\n- Backups di\u00e1rios automatizados\n- Backups incrementais\n- Verifica\u00e7\u00e3o de integridade\n- Restaura\u00e7\u00e3o testada\n- Armazenamento offsite\n\n#### 6.4.2 Disaster Recovery\n\nDesenvolvimento de plano de recupera\u00e7\u00e3o:\n\n- Site alternativo\n- Procedimentos documentados\n- Tempo de recupera\u00e7\u00e3o definido\n- Testes regulares\n- Comunica\u00e7\u00e3o de incidentes\n\n#### 6.4.3 Modo Offline\n\nImplementa\u00e7\u00e3o de funcionamento offline:\n\n- Opera\u00e7\u00f5es b\u00e1sicas sem internet\n- Sincroniza\u00e7\u00e3o autom\u00e1tica\n- Buffer local de transa\u00e7\u00f5es\n- Reconcilia\u00e7\u00e3o ap\u00f3s reconex\u00e3o\n- Notifica\u00e7\u00f5es de status\n\n## 7. Testes e Garantia de Qualidade\n\n### 7.1 Estrat\u00e9gia de Testes\n\n#### 7.1.1 Testes Unit\u00e1rios\n\nImplementa\u00e7\u00e3o de testes de componentes:\n\n- Cobertura de c\u00f3digo\n- Testes automatizados\n- Mock de depend\u00eancias\n- Valida\u00e7\u00e3o de regras de neg\u00f3cio\n- Integra\u00e7\u00e3o com CI/CD\n\n#### 7.1.2 Testes de Integra\u00e7\u00e3o\n\nDesenvolvimento de valida\u00e7\u00e3o de integra\u00e7\u00f5es:\n\n- Teste de APIs\n- Simula\u00e7\u00f5es de servi\u00e7os externos\n- Valida\u00e7\u00e3o de fluxos completos\n- Ambientes de teste isolados\n- Automa\u00e7\u00e3o de casos de teste\n\n#### 7.1.3 Testes de Aceita\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de valida\u00e7\u00e3o do usu\u00e1rio:\n\n- Testes de usabilidade\n- Cen\u00e1rios de uso real\n- Valida\u00e7\u00e3o com stakeholders\n- Feedback documentado\n- Aprova\u00e7\u00e3o formal\n\n### 7.2 Garantia de Qualidade\n\n#### 7.2.1 Revis\u00e3o de C\u00f3digo\n\nEstabelecimento de processos de revis\u00e3o:\n\n- Padr\u00f5es de codifica\u00e7\u00e3o\n- Pull/merge requests\n- Code reviews\n- An\u00e1lise est\u00e1tica\n- M\u00e9tricas de qualidade\n\n#### 7.2.2 Controle de Vers\u00e3o\n\nImplementa\u00e7\u00e3o de gerenciamento de vers\u00f5es:\n\n- Git flow ou similar\n- Ambientes separados (DEV/STG/PROD)\n- Tagging de vers\u00f5es\n- Gest\u00e3o de releases\n- Changelogs e documenta\u00e7\u00e3o\n\n#### 7.2.3 Testes de Performance\n\nDesenvolvimento de valida\u00e7\u00e3o de desempenho:\n\n- Testes de carga\n- Benchmarking\n- Otimiza\u00e7\u00e3o de recursos\n- Monitoramento de impacto\n- Simula\u00e7\u00e3o de multi-tenancy\n\n## 8. Seguran\u00e7a e Conformidade\n\n### 8.1 Seguran\u00e7a de Aplica\u00e7\u00e3o\n\n#### 8.1.1 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de controle de acesso:\n\n- Autentica\u00e7\u00e3o forte (2FA)\n- Gerenciamento de sess\u00f5es\n- Controle de acesso baseado em perfil\n- Pol\u00edticas de senha\n- Prote\u00e7\u00e3o contra for\u00e7a bruta\n\n#### 8.1.2 Prote\u00e7\u00e3o de Dados\n\nDesenvolvimento de mecanismos de prote\u00e7\u00e3o:\n\n- Criptografia em tr\u00e2nsito (TLS)\n- Criptografia em repouso\n- Tokeniza\u00e7\u00e3o de dados sens\u00edveis\n- Mascaramento de informa\u00e7\u00f5es\n- Acesso baseado em necessidade\n\n#### 8.1.3 Seguran\u00e7a de API\n\nImplementa\u00e7\u00e3o de prote\u00e7\u00e3o de endpoints:\n\n- Autentica\u00e7\u00e3o por token (JWT)\n- Rate limiting\n- Valida\u00e7\u00e3o de entrada\n- CORS configurado\n- Prote\u00e7\u00e3o contra ataques comuns\n\n### 8.2 Conformidade\n\n#### 8.2.1 LGPD/GDPR\n\nAdequa\u00e7\u00e3o \u00e0 legisla\u00e7\u00e3o de privacidade:\n\n- Invent\u00e1rio de dados pessoais\n- Termos de uso e privacidade\n- Mecanismos de consentimento\n- Direitos do titular (acesso, exclus\u00e3o)\n- Relat\u00f3rios de impacto\n\n#### 8.2.2 PCI DSS\n\nConformidade para processamento de pagamentos:\n\n- Seguran\u00e7a de dados de cart\u00e3o\n- Tokeniza\u00e7\u00e3o via Stripe\n- Escopo reduzido de PCI\n- Varreduras de seguran\u00e7a\n- Treinamento e conscientiza\u00e7\u00e3o\n\n#### 8.2.3 Auditoria e Compliance\n\nImplementa\u00e7\u00e3o de pr\u00e1ticas de conformidade:\n\n- Trilhas de auditoria\n- Logs imut\u00e1veis\n- Evid\u00eancias de controle\n- Relat\u00f3rios de compliance\n- Revis\u00f5es peri\u00f3dicas\n\n## 9. Lan\u00e7amento e Opera\u00e7\u00f5es\n\n### 9.1 Estrat\u00e9gia de Lan\u00e7amento\n\n#### 9.1.1 MVP e Roadmap\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Defini\u00e7\u00e3o do MVP inicial\n- Prioriza\u00e7\u00e3o de funcionalidades\n- Roadmap de m\u00e9dio prazo\n- Feedback loops planejados\n- Marcos e m\u00e9tricas de sucesso\n\n#### 9.1.2 Beta e Early Adopters\n\nImplementa\u00e7\u00e3o de programa inicial:\n\n- Sele\u00e7\u00e3o de clientes beta\n- Incentivos para early adopters\n- Coleta estruturada de feedback\n- Ciclos r\u00e1pidos de itera\u00e7\u00e3o\n- Estrat\u00e9gia de expans\u00e3o\n\n#### 9.1.3 Go-to-Market\n\nDesenvolvimento de estrat\u00e9gia comercial:\n\n- Posicionamento de mercado\n- Estrat\u00e9gia de pre\u00e7os\n- Canais de aquisi\u00e7\u00e3o\n- Materiais de marketing\n- Plano de vendas\n\n### 9.2 Opera\u00e7\u00f5es Cont\u00ednuas\n\n#### 9.2.1 Suporte ao Cliente\n\nImplementa\u00e7\u00e3o de estrutura de atendimento:\n\n- Equipe de suporte escalonada\n- Base de conhecimento\n- Procedimentos documentados\n- M\u00e9tricas de atendimento\n- Feedback e melhoria cont\u00ednua\n\n#### 9.2.2 Monitoramento de Uso\n\nDesenvolvimento de an\u00e1lise de utiliza\u00e7\u00e3o:\n\n- Telemetria de uso\n- Detec\u00e7\u00e3o de problemas\n- M\u00e9tricas de engajamento\n- An\u00e1lise de churn\n- Oportunidades de upsell\n\n#### 9.2.3 SLA e Garantias\n\nEstabelecimento de acordos de n\u00edvel de servi\u00e7o:\n\n- Disponibilidade garantida\n- Tempo de resposta para suporte\n- Resolu\u00e7\u00e3o de incidentes\n- Compensa\u00e7\u00f5es por falhas\n- Comunica\u00e7\u00e3o proativa\n\n## 10. Manuten\u00e7\u00e3o e Evolu\u00e7\u00e3o\n\n### 10.1 Desenvolvimento Cont\u00ednuo\n\n#### 10.1.1 Novas Funcionalidades\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Processo de coleta de requisitos\n- Prioriza\u00e7\u00e3o baseada em valor\n- Desenvolvimento \u00e1gil\n- Testes de conceito\n- Valida\u00e7\u00e3o com usu\u00e1rios\n\n#### 10.1.2 Corre\u00e7\u00f5es e Melhorias\n\nImplementa\u00e7\u00e3o de processo de manuten\u00e7\u00e3o:\n\n- Triagem de bugs e issues\n- Prioriza\u00e7\u00e3o por impacto\n- Janelas de manuten\u00e7\u00e3o\n- Hotfixes para problemas cr\u00edticos\n- Refatora\u00e7\u00e3o planejada\n\n#### 10.1.3 Atualiza\u00e7\u00f5es de Tecnologia\n\nPlano para evolu\u00e7\u00e3o tecnol\u00f3gica:\n\n- Atualiza\u00e7\u00f5es de seguran\u00e7a\n- Atualiza\u00e7\u00e3o de frameworks\n- Migra\u00e7\u00e3o planejada\n- Testes de compatibilidade\n- Comunica\u00e7\u00e3o de mudan\u00e7as\n\n### 10.2 An\u00e1lise e Otimiza\u00e7\u00e3o\n\n#### 10.2.1 Performance\n\nMonitoramento e melhoria cont\u00ednua:\n\n- An\u00e1lise de gargalos\n- Otimiza\u00e7\u00e3o de consultas\n- Refinamento de caching\n- Monitoramento de uso de recursos\n- Benchmarking peri\u00f3dico\n\n#### 10.2.2 Custo-Benef\u00edcio\n\nAvalia\u00e7\u00e3o financeira constante:\n\n- An\u00e1lise de custos operacionais\n- Otimiza\u00e7\u00e3o de recursos\n- Renegocia\u00e7\u00e3o com fornecedores\n- Efici\u00eancia energ\u00e9tica\n- Automa\u00e7\u00e3o de processos\n\n#### 10.2.3 Experi\u00eancia do Usu\u00e1rio\n\nMelhoria cont\u00ednua da UX:\n\n- Testes de usabilidade\n- An\u00e1lise de caminhos e convers\u00e3o\n- Feedback estruturado\n- A/B testing\n- Pesquisas de satisfa\u00e7\u00e3o\n\n## 11. Diret\u00f3rio Completo do Projeto\n\n```\nrestaurante-sistema/\n\u2502\n\u251c\u2500\u2500 assets/                        # Arquivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 css/                       # Estilos CSS\n\u2502   \u2502   \u251c\u2500\u2500 main.css               # Estilo principal\n\u2502   \u2502   \u251c\u2500\u2500 login.css              # Estilos da p\u00e1gina de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.css          # Estilos do painel principal\n\u2502   \u2502   \u251c\u2500\u2500 tables.css             # Estilos do mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 menu.css               # Estilos do card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.css            # Estilos do painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 reports.css            # Estilos dos relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 ponto.css              # Estilos para o sistema de ponto\n\u2502   \u2502   \u251c\u2500\u2500 fornecedores.css       # Estilos para gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 customer-mobile.css    # Estilos para interface mobile do cliente\n\u2502   \u2502   \u251c\u2500\u2500 subscription.css       # Estilos para p\u00e1ginas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 pricing.css            # Estilos para p\u00e1gina de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing.css            # Estilos para gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Estilos espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.css       # Estilo para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.css       # Estilo para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.css       # Estilo para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.css        # Estilo para rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.css    # Estilo para self-service/buf\u00ea\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.css       # Estilo para delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foodtruck.css      # Estilo para food truck\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bar.css            # Estilo para bar/pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cafeteria.css      # Estilo para cafeteria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.css      # Estilo para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.css         # Estilos para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 js/                        # Arquivos JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # JavaScript principal\n\u2502   \u2502   \u251c\u2500\u2500 login.js               # L\u00f3gica de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js           # Funcionalidades do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 tables.js              # Gerenciamento de mesas\n\u2502   \u2502   \u251c\u2500\u2500 orders.js              # Processamento de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 menu.js                # Card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.js             # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory.js           # Controle de estoque\n\u2502   \u2502   \u251c\u2500\u2500 payments.js            # Processamento de pagamentos\n\u2502   \u2502   \u251c\u2500\u2500 stripe-integration.js  # Integra\u00e7\u00e3o com Stripe\n\u2502   \u2502   \u251c\u2500\u2500 subscription.js        # L\u00f3gica de gerenciamento de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 pricing-calculator.js  # Calculadora de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing-portal.js      # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 charts.js              # L\u00f3gica para gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 ponto.js               # L\u00f3gica de registro de ponto\n\u2502   \u2502   \u251c\u2500\u2500 supplier-manager.js    # Gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 group-orders.js        # L\u00f3gica de pedidos em grupo\n\u2502   \u2502   \u251c\u2500\u2500 bill-splitter.js       # Divis\u00e3o de contas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Scripts espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.js        # L\u00f3gica para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.js        # L\u00f3gica para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.js        # L\u00f3gica para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.js         # L\u00f3gica para rod\u00edzio (controle de passadas)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.js     # L\u00f3gica para self-service (integra\u00e7\u00e3o com balan\u00e7as)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.js        # L\u00f3gica para delivery (rastreamento)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.js       # L\u00f3gica para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.js          # L\u00f3gica para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 images/                    # Imagens\n\u2502   \u2502   \u251c\u2500\u2500 logo/                  # Logotipos\n\u2502   \u2502   \u251c\u2500\u2500 icons/                 # \u00cdcones\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 menu/              # \u00cdcones para categorias do menu\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status/            # \u00cdcones de status\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 actions/           # \u00cdcones para a\u00e7\u00f5es\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 payment/           # \u00cdcones para m\u00e9todos de pagamento\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 subscription/      # \u00cdcones para planos de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 menu/                  # Imagens dos pratos\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Elementos da interface\n\u2502   \u2502   \u251c\u2500\u2500 plans/                 # Imagens para os planos de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 restaurant-types/      # Imagens espec\u00edficas por tipo de restaurante\n\u2502   \u2502       \u251c\u2500\u2500 alacarte/          # Imagens para restaurante \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood/          # Imagens para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria/          # Imagens para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 ...                # Outros tipos\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fonts/                     # Fontes\n\u2502\n\u251c\u2500\u2500 config/                        # Arquivos de configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 database.php               # Configura\u00e7\u00e3o da conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 constants.php              # Constantes da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 stripe.php                 # Configura\u00e7\u00e3o da API do Stripe\n\u2502   \u251c\u2500\u2500 email.php                  # Configura\u00e7\u00e3o de emails\n\u2502   \u251c\u2500\u2500 sms.php                    # Configura\u00e7\u00e3o de SMS\n\u2502   \u251c\u2500\u2500 qrcode.php                 # Configura\u00e7\u00e3o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 ifood.php                  # Configura\u00e7\u00e3o da API do iFood\n\u2502   \u251c\u2500\u2500 restaurant_types.php       # Configura\u00e7\u00e3o de tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface_settings.php     # Configura\u00e7\u00f5es de interface por tipo\n\u2502   \u251c\u2500\u2500 order_methods.php          # Configura\u00e7\u00f5es de m\u00e9todos de pedido\n\u2502   \u251c\u2500\u2500 subscription_plans.php     # Configura\u00e7\u00e3o de planos de assinatura\n\u2502   \u251c\u2500\u2500 tenant.php                 # Configura\u00e7\u00e3o multi-tenant\n\u2502   \u2514\u2500\u2500 feature_limits.php         # Limites de recursos por plano\n\u2502\n\u251c\u2500\u2500 controllers/                   # Controladores\n\u2502   \u251c\u2500\u2500 AuthController.php         # Controlador de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 SubscriptionController.php # Controlador de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 PlansController.php    # Controlador de planos\n\u2502   \u2502   \u251c\u2500\u2500 BillingController.php  # Controlador de faturamento\n\u2502   \u2502   \u2514\u2500\u2500 FeatureController.php  # Controlador de recursos dispon\u00edveis\n\u2502   \u251c\u2500\u2500 TenantController.php       # Controlador multi-tenant\n\u2502   \u251c\u2500\u2500 OnboardingController.php   # Controlador de configura\u00e7\u00e3o inicial\n\u2502   \u251c\u2500\u2500 DashboardController.php    # Controlador do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteDashboardController.php  # Dashboard espec\u00edfico para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodDashboardController.php  # Dashboard espec\u00edfico para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaDashboardController.php  # Dashboard espec\u00edfico para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioDashboardController.php   # Dashboard espec\u00edfico para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 DeliveryDashboardController.php  # Dashboard espec\u00edfico para delivery\n\u2502   \u251c\u2500\u2500 TableController.php        # Controlador de mesas\n\u2502   \u251c\u2500\u2500 OrderController.php        # Controlador de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrderController.php    # Pedidos individuais\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrderController.php     # Pedidos em grupo\n\u2502   \u251c\u2500\u2500 MenuController.php         # Controlador do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuController.php   # Card\u00e1pio para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuController.php   # Card\u00e1pio para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaMenuController.php   # Card\u00e1pio para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioMenuController.php    # Card\u00e1pio para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 SelfServiceMenuController.php # Card\u00e1pio para self-service\n\u2502   \u251c\u2500\u2500 KitchenController.php      # Controlador da cozinha\n\u2502   \u251c\u2500\u2500 InventoryController.php    # Controlador de estoque\n\u2502   \u251c\u2500\u2500 PaymentController.php      # Controlador de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 BillSplitController.php      # Controlador de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ReportController.php       # Controlador de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 iFoodController.php        # Controlador de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 SupplierController.php     # Controlador de fornecedores\n\u2502   \u2502   \u2514\u2500\u2500 QuickOrderController.php     # Controlador de pedidos r\u00e1pidos\n\u2502   \u251c\u2500\u2500 StaffController.php        # Controlador de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 TimeClockController.php      # Controlador de ponto\n\u2502   \u251c\u2500\u2500 CustomerController.php     # Controlador de clientes\n\u2502   \u251c\u2500\u2500 QRCodeController.php       # Controlador de gera\u00e7\u00e3o e gest\u00e3o de QR Codes\n\u2502   \u251c\u2500\u2500 RestaurantTypeController.php # Controlador de tipo de restaurante\n\u2502   \u2514\u2500\u2500 SettingsController.php     # Controlador de configura\u00e7\u00f5es\n\u2502\n\u251c\u2500\u2500 models/                        # Modelos\n\u2502   \u251c\u2500\u2500 User.php                   # Modelo de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 Account.php                # Modelo de conta (assinatura)\n\u2502   \u2502   \u251c\u2500\u2500 Subscription.php       # Modelo de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 Plan.php               # Modelo de plano\n\u2502   \u2502   \u251c\u2500\u2500 Invoice.php            # Modelo de fatura\n\u2502   \u2502   \u2514\u2500\u2500 Usage.php              # Modelo de uso de recursos\n\u2502   \u251c\u2500\u2500 Tenant.php                 # Modelo de tenant (separa\u00e7\u00e3o de dados)\n\u2502   \u251c\u2500\u2500 Restaurant.php             # Modelo de restaurante com tipo e configura\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 RestaurantType.php         # Modelo de tipos de restaurante\n\u2502   \u251c\u2500\u2500 CashRegister.php           # Modelo de caixa\n\u2502   \u251c\u2500\u2500 Table.php                  # Modelo de mesa\n\u2502   \u251c\u2500\u2500 Order.php                  # Modelo de pedido\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrder.php        # Modelo de pedido individual\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrder.php         # Modelo de pedido em grupo\n\u2502   \u251c\u2500\u2500 OrderItem.php              # Modelo de item de pedido\n\u2502   \u251c\u2500\u2500 MenuItem.php               # Modelo de item do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuItem.php   # Extens\u00e3o para itens de \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuItem.php   # Extens\u00e3o para itens de fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzaMenuItem.php      # Extens\u00e3o para pizza (metades, bordas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 RodizioMenuItem.php    # Extens\u00e3o para rod\u00edzio\n\u2502   \u251c\u2500\u2500 Inventory.php              # Modelo de estoque\n\u2502   \u2502   \u2514\u2500\u2500 StockMovement.php      # Modelo de movimenta\u00e7\u00e3o de estoque\n\u2502   \u251c\u2500\u2500 Reservation.php            # Modelo de reserva\n\u2502   \u251c\u2500\u2500 Payment.php                # Modelo de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 BillSplit.php          # Modelo de divis\u00e3o de conta\n\u2502   \u251c\u2500\u2500 Staff.php                  # Modelo de funcion\u00e1rio\n\u2502   \u2502   \u2514\u2500\u2500 TimeClock.php          # Modelo de registro de ponto\n\u2502   \u251c\u2500\u2500 Supplier.php               # Modelo de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierContact.php    # Modelo de contato de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierOrder.php      # Modelo de pedido para fornecedor\n\u2502   \u2502   \u2514\u2500\u2500 SupplierRating.php     # Modelo de avalia\u00e7\u00e3o de fornecedor\n\u2502   \u251c\u2500\u2500 Customer.php               # Modelo de cliente\n\u2502   \u2502   \u2514\u2500\u2500 LoyaltyProgram.php     # Modelo de programa de fidelidade\n\u2502   \u251c\u2500\u2500 MarketingCampaign.php      # Modelo de campanha de marketing\n\u2502   \u251c\u2500\u2500 QRCode.php                 # Modelo de QR Code\n\u2502   \u251c\u2500\u2500 RestaurantConfiguration.php # Modelo de configura\u00e7\u00e3o do restaurante\n\u2502   \u2514\u2500\u2500 RestaurantInterface.php    # Modelo de interface do restaurante\n\u2502\n\u251c\u2500\u2500 views/                         # Visualiza\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 auth/                      # Telas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 login.php              # Tela de login\n\u2502   \u2502   \u251c\u2500\u2500 reset-password.php     # Redefini\u00e7\u00e3o de senha\n\u2502   \u2502   \u2514\u2500\u2500 register.php           # Cadastro inicial\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 subscription/              # Telas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # P\u00e1gina de planos dispon\u00edveis\n\u2502   \u2502   \u251c\u2500\u2500 checkout.php           # Checkout de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 success.php            # Confirma\u00e7\u00e3o de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 billing.php            # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 upgrade.php            # Upgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 downgrade.php          # Downgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 cancel.php             # Cancelamento de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 payment-methods.php    # Gest\u00e3o de m\u00e9todos de pagamento\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 onboarding/                # Telas de configura\u00e7\u00e3o inicial\n\u2502   \u2502   \u251c\u2500\u2500 welcome.php            # Boas-vindas e introdu\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-type.php    # Sele\u00e7\u00e3o de tipo de restaurante\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-comparison.php # Compara\u00e7\u00e3o entre tipos\n\u2502   \u2502   \u251c\u2500\u2500 basic-info.php         # Informa\u00e7\u00f5es b\u00e1sicas\n\u2502   \u2502   \u251c\u2500\u2500 menu-setup.php         # Configura\u00e7\u00e3o inicial do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 operating-hours.php    # Hor\u00e1rios de funcionamento\n\u2502   \u2502   \u251c\u2500\u2500 table-setup.php        # Configura\u00e7\u00e3o de mesas/layout\n\u2502   \u2502   \u251c\u2500\u2500 staff-roles.php        # Defini\u00e7\u00e3o de cargos\n\u2502   \u2502   \u251c\u2500\u2500 payment-options.php    # Op\u00e7\u00f5es de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 finalize.php           # Finaliza\u00e7\u00e3o e ativa\u00e7\u00e3o\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 dashboard/                 # Telas do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 index.php              # Dashboard principal (din\u00e2mico por tipo)\n\u2502   \u2502   \u251c\u2500\u2500 account-status.php     # Status da conta e assinatura\n\u2502   \u2502   \u251c\u2500\u2500 alacarte/              # Dashboards espec\u00edficos por tipo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal \u00e0 la carte\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tables.php         # Visualiza\u00e7\u00e3o de mesas \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood/              # Fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal fast food\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 queue.php          # Fila de pedidos fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria/              # Pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal pizzaria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pizza-builder.php  # Construtor de pizza\n\u2502   \u2502   \u251c\u2500\u2500 rodizio/               # Rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal rod\u00edzio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rounds.php         # Controle de passadas\n\u2502   \u2502   \u251c\u2500\u2500 selfservice/           # Self-service\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal self-service\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scales.php         # Controle de balan\u00e7as\n\u2502   \u2502   \u251c\u2500\u2500 delivery/              # Delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal delivery\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 routes.php         # Controle de rotas de entrega\n\u2502   \u2502   \u2514\u2500\u2500 multiunit/             # Rede de restaurantes\n\u2502   \u2502       \u251c\u2500\u2500 index.php          # Dashboard principal rede\n\u2502   \u2502       \u2514\u2500\u2500 units.php          # Controle de unidades\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tables/                    # Telas de mesas\n\u2502   \u2502   \u251c\u2500\u2500 map.php                # Mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 order.php              # Cria\u00e7\u00e3o de pedido\n\u2502   \u2502   \u2514\u2500\u2500 multi-user.php         # Gest\u00e3o de mesas com m\u00faltiplos usu\u00e1rios\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 menu/                      # Telas do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 admin.php              # Gerenciamento do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 editor.php             # Editor de itens do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 customer.php           # Card\u00e1pio para o cliente (QR Code)\n\u2502   \u2502   \u251c\u2500\u2500 category-manager.php   # Gerenciador de categorias\n\u2502   \u2502   \u251c\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es e card\u00e1pios especiais\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Card\u00e1pios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Layout para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Layout para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Layout para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Layout para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 selfservice.php    # Layout para self-service\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 kitchen/                   # Telas da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 panel.php              # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory-usage.php    # Uso de ingredientes\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Pain\u00e9is espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Painel para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Painel para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Painel para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 rodizio.php        # Painel para rod\u00edzio\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 inventory/                 # Telas de estoque\n\u2502   \u2502   \u251c\u2500\u2500 management.php         # Gerenciamento de estoque\n\u2502   \u2502   \u251c\u2500\u2500 movements.php          # Movimenta\u00e7\u00f5es de estoque\n\u2502   \u2502   \u2514\u2500\u2500 alerts.php             # Alertas de estoque\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 payments/                  # Telas de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 process.php            # Processamento de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 receipt.php            # Recibo\n\u2502   \u2502   \u251c\u2500\u2500 split-bill.php         # Divis\u00e3o de conta\n\u2502   \u2502   \u2514\u2500\u2500 group-payment.php      # Pagamento em grupo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 reports/                   # Telas de relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 sales.php              # Relat\u00f3rios de vendas\n\u2502   \u2502   \u251c\u2500\u2500 cash.php               # Fechamento de caixa\n\u2502   \u2502   \u251c\u2500\u2500 performance.php        # Desempenho de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 financial.php          # Relat\u00f3rios financeiros\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Relat\u00f3rios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Relat\u00f3rios para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Relat\u00f3rios para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Relat\u00f3rios para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Relat\u00f3rios para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 delivery.php       # Relat\u00f3rios para delivery\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 ifood/                     # Telas de integra\u00e7\u00e3o com iFood\n\u2502   \u2502   \u2514\u2500\u2500 orders.php             # Pedidos do iFood\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 suppliers/                 # Telas de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 quick-order.php        # Pedido r\u00e1pido\n\u2502   \u2502   \u251c\u2500\u2500 history.php            # Hist\u00f3rico de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 ratings.php            # Avalia\u00e7\u00e3o de fornecedores\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 staff/                     # Telas de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do funcion\u00e1rio\n\u2502   \u2502   \u251c\u2500\u2500 schedule.php           # Escala de trabalho\n\u2502   \u2502   \u2514\u2500\u2500 time-clock/            # Sistema de ponto\n\u2502   \u2502       \u251c\u2500\u2500 register.php       # Registro de ponto\n\u2502   \u2502       \u251c\u2500\u2500 management.php     # Gest\u00e3o de ponto\n\u2502   \u2502       \u2514\u2500\u2500 reports.php        # Relat\u00f3rios de ponto\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 customers/                 # Telas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de clientes\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do cliente\n\u2502   \u2502   \u2514\u2500\u2500 loyalty.php            # Programa de fidelidade\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 marketing/                 # Telas de marketing\n\u2502   \u2502   \u251c\u2500\u2500 campaigns.php          # Campanhas de marketing\n\u2502   \u2502   \u2514\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 qrcode/                    # Telas de gest\u00e3o de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 generator.php          # Gerador de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 manager.php            # Gestor de QR Codes\n\u2502   \u2502   \u2514\u2500\u2500 preview.php            # Pr\u00e9-visualiza\u00e7\u00e3o de QR Codes\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 admin/                     # \u00c1rea administrativa da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 accounts.php           # Gest\u00e3o de contas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # Configura\u00e7\u00e3o de planos\n\u2502   \u2502   \u251c\u2500\u2500 statistics.php         # Estat\u00edsticas da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 support.php            # Sistema de suporte\n\u2502   \u2502   \u2514\u2500\u2500 settings.php           # Configura\u00e7\u00f5es da plataforma\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 settings/                  # Telas de configura\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 general.php            # Configura\u00e7\u00f5es gerais\n\u2502       \u251c\u2500\u2500 restaurant-type.php    # Configura\u00e7\u00e3o de tipo de restaurante\n\u2502       \u251c\u2500\u2500 interfaces.php         # Configura\u00e7\u00e3o de interfaces\n\u2502       \u251c\u2500\u2500 qrcode.php             # Configura\u00e7\u00e3o de QR Code\n\u2502       \u251c\u2500\u2500 group-orders.php       # Configura\u00e7\u00e3o de pedidos em grupo\n\u2502       \u251c\u2500\u2500 time-clock.php         # Configura\u00e7\u00e3o de ponto\n\u2502       \u251c\u2500\u2500 integrations.php       # Integra\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 account.php            # Configura\u00e7\u00f5es da conta/assinatura\n\u2502       \u2514\u2500\u2500 backup.php             # Backup e seguran\u00e7a\n\u2502\n\u251c\u2500\u2500 includes/                      # Arquivos inclu\u00eddos\n\u2502   \u251c\u2500\u2500 functions.php              # Fun\u00e7\u00f5es auxiliares\n\u2502   \u251c\u2500\u2500 validation.php             # Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 session.php                # Gerenciamento de sess\u00e3o\n\u2502   \u251c\u2500\u2500 security.php               # Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 currency.php               # Formata\u00e7\u00e3o de moeda\n\u2502   \u251c\u2500\u2500 date.php                   # Fun\u00e7\u00f5es de data e hora\n\u2502   \u251c\u2500\u2500 notification.php           # Sistema de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 restaurant-type-helper.php # Fun\u00e7\u00f5es auxiliares para tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface-loader.php       # Carregador de interfaces espec\u00edficas\n\u2502   \u251c\u2500\u2500 tenant-resolver.php        # Resolu\u00e7\u00e3o de tenant\n\u2502   \u251c\u2500\u2500 feature-checker.php        # Verifica\u00e7\u00e3o de recursos dispon\u00edveis por plano\n\u2502   \u2514\u2500\u2500 subscription-helper.php    # Fun\u00e7\u00f5es auxiliares para assinaturas\n\u2502\n\u251c\u2500\u2500 api/                           # Endpoints da API\n\u2502   \u251c\u2500\u2500 auth.php                   # API de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 subscription.php           # API de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # API de planos\n\u2502   \u2502   \u251c\u2500\u2500 webhooks.php           # Webhooks do Stripe\n\u2502   \u2502   \u2514\u2500\u2500 billing.php            # API de faturamento\n\u2502   \u251c\u2500\u2500 tables.php                 # API de mesas\n\u2502   \u251c\u2500\u2500 orders.php                 # API de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 group-orders.php       # API de pedidos em grupo\n\u2502   \u251c\u2500\u2500 menu.php                   # API do card\u00e1pio\n\u2502   \u251c\u2500\u2500 payments.php               # API de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 bill-split.php         # API de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ifood.php                  # API de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 suppliers.php              # API de fornecedores\n\u2502   \u251c\u2500\u2500 staff.php                  # API de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 time-clock.php         # API de registro de ponto\n\u2502   \u251c\u2500\u2500 customers.php              # API de clientes\n\u2502   \u251c\u2500\u2500 reports.php                # API de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 qrcode.php                 # API de QR Codes\n\u2502   \u2514\u2500\u2500 restaurant-type.php        # API de tipo de restaurante\n\u2502\n\u251c\u2500\u2500 services/                      # Servi\u00e7os\n\u2502   \u251c\u2500\u2500 StripeService.php          # Servi\u00e7o de pagamento Stripe\n\u2502   \u251c\u2500\u2500 SubscriptionService.php    # Servi\u00e7o de gerenciamento de assinaturas\n\u2502   \u251c\u2500\u2500 BillingService.php         # Servi\u00e7o de gerenciamento de faturas\n\u2502   \u251c\u2500\u2500 TenantService.php          # Servi\u00e7o de gest\u00e3o multi-tenant\n\u2502   \u251c\u2500\u2500 FeatureLimitService.php    # Servi\u00e7o de controle de limites por plano\n\u2502   \u251c\u2500\u2500 QRCodeService.php          # Servi\u00e7o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 PDFService.php             # Servi\u00e7o de gera\u00e7\u00e3o de PDF\n\u2502   \u251c\u2500\u2500 iFoodService.php           # Servi\u00e7o de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 EmailService.php           # Servi\u00e7o de e-mail\n\u2502   \u251c\u2500\u2500 SMSService.php             # Servi\u00e7o de SMS\n\u2502   \u251c\u2500\u2500 NotificationService.php    # Servi\u00e7o de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 ChartService.php           # Servi\u00e7o de gera\u00e7\u00e3o de gr\u00e1ficos\n\u2502   \u251c\u2500\u2500 BackupService.php          # Servi\u00e7o de backup\n\u2502   \u251c\u2500\u2500 RestaurantTypeService.php  # Servi\u00e7o de tipo de restaurante\n\u2502   \u251c\u2500\u2500 InterfaceService.php       # Servi\u00e7o de interfaces\n\u2502   \u251c\u2500\u2500 ScaleService.php           # Servi\u00e7o de integra\u00e7\u00e3o com balan\u00e7as\n\u2502   \u251c\u2500\u2500 DeliveryTrackingService.php # Servi\u00e7o de rastreamento de entregas\n\u2502   \u2514\u2500\u2500 RodizioTrackingService.php # Servi\u00e7o de controle de rod\u00edzio\n\u2502\n\u251c\u2500\u2500 database/                      # Arquivos de banco de dados\n\u2502   \u251c\u2500\u2500 migrations/                # Migra\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 create_tenants_table.php     # Tabela de tenants\n\u2502   \u2502   \u251c\u2500\u2500 create_accounts_table.php    # Tabela de contas\n\u2502   \u2502   \u251c\u2500\u2500 create_subscriptions_table.php # Tabela de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 create_plans_table.php       # Tabela de planos\n\u2502   \u2502   \u251c\u2500\u2500 create_invoices_table.php    # Tabela de faturas\n\u2502   \u2502   \u251c\u2500\u2500 create_usage_logs_table.php  # Tabela de uso de recursos\n\u2502   \u2502   \u251c\u2500\u2500 create_users_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_types_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurants_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_configurations_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_tables_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_menu_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_order_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_inventory_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_customers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_staff_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_time_clock_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_suppliers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_contacts_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_payments_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_bill_splits_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_qrcodes_table.php\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 seeds/                     # Seeds\n\u2502       \u251c\u2500\u2500 plans_seeder.php       # Seed para planos de assinatura\n\u2502       \u251c\u2500\u2500 features_seeder.php    # Seed para recursos por plano\n\u2502       \u251c\u2500\u2500 users_seeder.php\n\u2502       \u251c\u2500\u2500 restaurant_types_seeder.php\n\u2502       \u251c\u2500\u2500 menu_items_seeder.php\n\u2502       \u251c\u2500\u2500 suppliers_seeder.php\n\u2502       \u251c\u2500\u2500 staff_seeder.php\n\u2502       \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 public/                        # Arquivos p\u00fablicos\n\u2502   \u251c\u2500\u2500 index.php                  # Ponto de entrada principal\n\u2502   \u251c\u2500\u2500 pricing.php                # P\u00e1gina p\u00fablica de pre\u00e7os\n\u2502   \u251c\u2500\u2500 register.php               # P\u00e1gina de registro\n\u2502   \u251c\u2500\u2500 customer-menu.php          # P\u00e1gina do card\u00e1pio digital\n\u2502   \u251c\u2500\u2500 group-order.php            # P\u00e1gina de pedido em grupo\n\u2502   \u251c\u2500\u2500 time-clock.php             # P\u00e1gina de registro de ponto\n\u2502   \u251c\u2500\u2500 webhook/                   # Endpoints de webhooks\n\u2502   \u2502   \u2514\u2500\u2500 stripe.php             # Webhook do Stripe\n\u2502   \u251c\u2500\u2500 qr/                        # QR Codes gerados\n\u2502   \u2502   \u2514\u2500\u2500 tables/                # QR Codes para mesas\n\u2502   \u251c\u2500\u2500 receipt/                   # Recibos gerados\n\u2502   \u2514\u2500\u2500 .htaccess                  # Configura\u00e7\u00e3o do Apache\n\u2502\n\u251c\u2500\u2500 mobile/                        # Arquivos de interface mobile\n\u2502   \u251c\u2500\u2500 index.php                  # Entrada principal mobile\n\u2502   \u251c\u2500\u2500 menu.php                   # Card\u00e1pio digital mobile\n\u2502   \u251c\u2500\u2500 order.php                  # Interface de pedido mobile\n\u2502   \u251c\u2500\u2500 group-order.php            # Interface de pedido em grupo\n\u2502   \u251c\u2500\u2500 payment.php                # Interface de pagamento mobile\n\u2502   \u251c\u2500\u2500 types/                     # Interfaces espec\u00edficas por tipo\n\u2502   \u2502   \u251c\u2500\u2500 alacarte.php           # Interface mobile para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood.php           # Interface mobile para fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria.php           # Interface mobile para pizzaria\n\u2502   \u2502   \u2514\u2500\u2500 rodizio.php            # Interface mobile para rod\u00edzio\n\u2502   \u2514\u2500\u2500 staff/                     # Interface para funcion\u00e1rios\n\u2502       \u2514\u2500\u2500 time-clock.php         # Registro de ponto mobile\n\u2502\n\u251c\u2500\u2500 docs/                          # Documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 setup.md                   # Instru\u00e7\u00f5es de instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 admin-guide.md             # Guia do administrador\n\u2502   \u251c\u2500\u2500 user-guide.md              # Guia do usu\u00e1rio\n\u2502   \u251c\u2500\u2500 api-docs.md                # Documenta\u00e7\u00e3o da API\n\u2502   \u251c\u2500\u2500 database-schema.md         # Esquema do banco de dados\n\u2502   \u251c\u2500\u2500 subscription.md            # Documenta\u00e7\u00e3o do sistema de assinaturas\n\u2502   \u2514\u2500\u2500 restaurant-types/          # Documenta\u00e7\u00e3o espec\u00edfica por tipo\n\u2502       \u251c\u2500\u2500 alacarte.md            # Documenta\u00e7\u00e3o para \u00e0 la carte\n\u2502       \u251c\u2500\u2500 fastfood.md            # Documenta\u00e7\u00e3o para fast food\n\u2502       \u251c\u2500\u2500 pizzaria.md            # Documenta\u00e7\u00e3o para pizzaria\n\u2502       \u2514\u2500\u2500 ...                    # Outros tipos\n\u2502\n\u251c\u2500\u2500 tests/                         # Testes automatizados\n\u2502   \u251c\u2500\u2500 unit/                      # Testes unit\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 subscription/          # Testes de assinatura\n\u2502   \u251c\u2500\u2500 integration/               # Testes de integra\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 acceptance/                # Testes de aceita\u00e7\u00e3o\n\u2502\n\u251c\u2500\u2500 vendor/                        # Depend\u00eancias (Composer)\n\u2502\n\u251c\u2500\u2500 .htaccess                      # Configura\u00e7\u00e3o do Apache\n\u251c\u2500\u2500 index.php                      # Arquivo inicial (redirecionamento)\n\u251c\u2500\u2500 composer.json                  # Configura\u00e7\u00e3o do Composer\n\u251c\u2500\u2500 package.json                   # Configura\u00e7\u00e3o do NPM\n\u251c\u2500\u2500 README.md                      # Documenta\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 LICENSE                        # Licen\u00e7a do software\n\u2514\u2500\u2500 .gitignore                     # Arquivos ignorados pelo Git\n```\n\n## Conclus\u00e3o\n\nO Sistema de Gest\u00e3o de Restaurantes SaaS representa uma solu\u00e7\u00e3o completa e flex\u00edvel, adaptada para diversos tipos de estabelecimentos. A implementa\u00e7\u00e3o como servi\u00e7o por assinatura permite escalabilidade e sustentabilidade do neg\u00f3cio, enquanto a personaliza\u00e7\u00e3o por tipo de restaurante garante que cada cliente tenha uma experi\u00eancia otimizada para seu modelo espec\u00edfico.\n\nA arquitetura multi-tenant, combinada com um modelo de planos em n\u00edveis, permite atender desde pequenos estabelecimentos at\u00e9 grandes redes, com um caminho claro de crescimento que acompanha a evolu\u00e7\u00e3o do neg\u00f3cio do cliente.\n\n\n\nA integra\u00e7\u00e3o com servi\u00e7os essenciais como Stripe para pagamentos, iFood para delivery, e um sistema robusto de QR Codes para pedidos digitais posiciona o sistema como uma solu\u00e7\u00e3o moderna e completa para o mercado de restaurantes, que cada vez mais demanda digitaliza\u00e7\u00e3o e efici\u00eancia operacional.\n\nO projeto apresentado n\u00e3o apenas resolve os desafios operacionais do dia a dia de um restaurante, mas tamb\u00e9m oferece insights valiosos baseados em dados que podem impulsionar o crescimento e a lucratividade do neg\u00f3cio.\n\n\n\n## Resumo \n\n\n# Checkpoint de Desenvolvimento do Sistema de Gest\u00e3o de Restaurantes SaaS\n\n\n\n### Componentes Implementados:\n\n1. **Banco de Dados MySQL (100%)**\n   - Esquema completo com todas as tabelas necess\u00e1rias\n   - Rela\u00e7\u00f5es e chaves estrangeiras\n   - \u00cdndices para otimiza\u00e7\u00e3o\n   - Estrutura para dados JSON\n   - Suporte completo para multi-tenant\n   -- Cria\u00e7\u00e3o do banco de dados\nCREATE DATABASE restaurante_saas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nUSE restaurante_saas;\n\n-- -----------------------------------------------------\n-- Tabelas do Sistema SaaS (Plataforma)\n-- -----------------------------------------------------\n\n-- Tabela de tenants (restaurantes)\nCREATE TABLE tenants (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) NOT NULL UNIQUE,\n    restaurant_type VARCHAR(20) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL,\n    logo VARCHAR(255) DEFAULT NULL,\n    theme_color VARCHAR(7) DEFAULT '#3498db',\n    domain VARCHAR(100) DEFAULT NULL,\n    \n    -- Campos para configura\u00e7\u00e3o de pagamentos\n    payment_gateway ENUM('stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede') DEFAULT 'stripe',\n    payment_gateway_key VARCHAR(255) DEFAULT NULL,\n    payment_gateway_token VARCHAR(255) DEFAULT NULL,\n    bank_name VARCHAR(100) DEFAULT NULL,\n    bank_agency VARCHAR(20) DEFAULT NULL,\n    bank_account VARCHAR(30) DEFAULT NULL,\n    pix_key VARCHAR(255) DEFAULT NULL,\n    payment_methods JSON DEFAULT '{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}',\n    payment_settings JSON DEFAULT '{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}',\n    \n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de planos de assinatura\nCREATE TABLE plans (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    code VARCHAR(20) NOT NULL UNIQUE,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    billing_cycle ENUM('monthly', 'quarterly', 'semiannual', 'annual') DEFAULT 'monthly',\n    features JSON NOT NULL,\n    limits JSON NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    stripe_product_id VARCHAR(100) DEFAULT NULL,\n    stripe_price_id VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de assinaturas\nCREATE TABLE subscriptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    plan_id INT UNSIGNED NOT NULL,\n    stripe_subscription_id VARCHAR(100) DEFAULT NULL,\n    stripe_customer_id VARCHAR(100) DEFAULT NULL,\n    status ENUM('trial', 'active', 'past_due', 'canceled', 'suspended') NOT NULL DEFAULT 'trial',\n    trial_ends_at TIMESTAMP NULL DEFAULT NULL,\n    ends_at TIMESTAMP NULL DEFAULT NULL,\n    next_billing_at TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (plan_id) REFERENCES plans(id)\n) ENGINE=InnoDB;\n\n-- Tabela de faturas\nCREATE TABLE invoices (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    subscription_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED NOT NULL,\n    stripe_invoice_id VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('draft', 'open', 'paid', 'uncollectible', 'void') NOT NULL DEFAULT 'draft',\n    due_date TIMESTAMP NULL DEFAULT NULL,\n    paid_at TIMESTAMP NULL DEFAULT NULL,\n    pdf_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de controle de uso de recursos\nCREATE TABLE resource_usage (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    resource_type VARCHAR(50) NOT NULL,\n    resource_count INT NOT NULL DEFAULT 1,\n    year INT NOT NULL,\n    month INT NOT NULL,\n    day INT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_resource_usage_per_day (tenant_id, resource_type, year, month, day),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Usu\u00e1rios e Acesso\n-- -----------------------------------------------------\n\n-- Tabela de usu\u00e1rios\nCREATE TABLE users (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NULL DEFAULT NULL,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin') NOT NULL,\n    phone VARCHAR(20) DEFAULT NULL,\n    profile_image VARCHAR(255) DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE,\n    last_login TIMESTAMP NULL DEFAULT NULL,\n    password_reset_token VARCHAR(100) DEFAULT NULL,\n    password_reset_expires TIMESTAMP NULL DEFAULT NULL,\n    remember_token VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_user_email (email),\n    UNIQUE KEY unique_user_username (username),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es\nCREATE TABLE permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es por papel\nCREATE TABLE role_permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer') NOT NULL,\n    permission_id INT UNSIGNED NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_role_permission (tenant_id, role, permission_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id)\n) ENGINE=InnoDB;\n\n-- Tabela de log de acesso\nCREATE TABLE access_logs (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    user_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED DEFAULT NULL,\n    ip_address VARCHAR(45) NOT NULL,\n    user_agent VARCHAR(255) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    details JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00e3o do Restaurante\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es do restaurante\nCREATE TABLE restaurant_configurations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    opening_hours JSON DEFAULT NULL,\n    operating_days JSON DEFAULT NULL,\n    delivery_radius INT DEFAULT 5,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    min_delivery_value DECIMAL(10, 2) DEFAULT 0.00,\n    allow_pickup BOOLEAN DEFAULT TRUE,\n    allow_delivery BOOLEAN DEFAULT TRUE,\n    allow_reservations BOOLEAN DEFAULT TRUE,\n    allow_qrcode_orders BOOLEAN DEFAULT TRUE,\n    allow_group_orders BOOLEAN DEFAULT TRUE,\n    default_order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    estimated_preparation_time INT DEFAULT 30,\n    default_table_capacity INT DEFAULT 4,\n    use_kitchen_display BOOLEAN DEFAULT TRUE,\n    taxes_included BOOLEAN DEFAULT TRUE,\n    tax_rate DECIMAL(5, 2) DEFAULT 0.00,\n    service_fee DECIMAL(5, 2) DEFAULT 0.00,\n    tip_options JSON DEFAULT NULL,\n    notification_settings JSON DEFAULT NULL,\n    printer_settings JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de \u00e1reas do restaurante\nCREATE TABLE restaurant_areas (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de caixas/terminais\nCREATE TABLE cash_registers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    location VARCHAR(100) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de aberturas e fechamentos de caixa\nCREATE TABLE cash_register_operations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    operation_type ENUM('opening', 'closing') NOT NULL,\n    initial_amount DECIMAL(10, 2) DEFAULT 0.00,\n    final_amount DECIMAL(10, 2) DEFAULT 0.00,\n    system_calculated_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_notes TEXT DEFAULT NULL,\n    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    closing_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de reservas\nCREATE TABLE reservations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    customer_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) NOT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    number_of_people INT NOT NULL,\n    reservation_date DATE NOT NULL,\n    reservation_time TIME NOT NULL,\n    arrival_time TIMESTAMP NULL DEFAULT NULL,\n    departure_time TIMESTAMP NULL DEFAULT NULL,\n    status ENUM('pending', 'confirmed', 'seated', 'completed', 'canceled', 'no_show') DEFAULT 'pending',\n    special_requests TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Mesas e QR Code\n-- -----------------------------------------------------\n\n-- Tabela de mesas\nCREATE TABLE tables (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    area_id INT UNSIGNED DEFAULT NULL,\n    number VARCHAR(10) NOT NULL,\n    name VARCHAR(50) DEFAULT NULL,\n    capacity INT UNSIGNED DEFAULT 4,\n    position_x INT DEFAULT 0,\n    position_y INT DEFAULT 0,\n    status ENUM('available', 'occupied', 'reserved', 'cleaning', 'inactive') DEFAULT 'available',\n    qr_code VARCHAR(255) DEFAULT NULL,\n    qr_code_hash VARCHAR(64) DEFAULT NULL,\n    occupied_since TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_table_number_per_tenant (tenant_id, number),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (area_id) REFERENCES restaurant_areas(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de QR Codes\nCREATE TABLE qr_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    code VARCHAR(100) NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    type ENUM('table', 'menu', 'payment', 'custom') NOT NULL DEFAULT 'table',\n    data JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    scan_count INT UNSIGNED DEFAULT 0,\n    last_scanned TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de ocupa\u00e7\u00e3o de mesas\nCREATE TABLE table_occupancy_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED NOT NULL,\n    start_time TIMESTAMP NOT NULL,\n    end_time TIMESTAMP NULL DEFAULT NULL,\n    number_of_customers INT UNSIGNED DEFAULT 1,\n    order_id INT UNSIGNED DEFAULT NULL,\n    total_spent DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Card\u00e1pio e Itens\n-- -----------------------------------------------------\n\n-- Tabela de categorias de menu\nCREATE TABLE menu_categories (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    image VARCHAR(255) DEFAULT NULL,\n    sort_order INT DEFAULT 0,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_category_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens do menu\nCREATE TABLE menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    category_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    cost DECIMAL(10, 2) DEFAULT 0.00,\n    image VARCHAR(255) DEFAULT NULL,\n    preparation_time INT DEFAULT 15,\n    ingredients TEXT DEFAULT NULL,\n    allergens TEXT DEFAULT NULL,\n    nutritional_info JSON DEFAULT NULL,\n    available BOOLEAN DEFAULT TRUE,\n    featured BOOLEAN DEFAULT FALSE,\n    sort_order INT DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    restaurant_type_specific BOOLEAN DEFAULT FALSE,\n    restaurant_type_config JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES menu_categories(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de op\u00e7\u00f5es e adicionais para itens do menu\nCREATE TABLE menu_item_options (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_selections INT DEFAULT 0,\n    max_selections INT DEFAULT 1,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de valores para op\u00e7\u00f5es de itens do menu\nCREATE TABLE menu_item_option_values (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    option_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    price_adjustment DECIMAL(10, 2) DEFAULT 0.00,\n    available BOOLEAN DEFAULT TRUE,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (option_id) REFERENCES menu_item_options(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de card\u00e1pios especiais/promo\u00e7\u00f5es\nCREATE TABLE special_menus (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    start_date DATE DEFAULT NULL,\n    end_date DATE DEFAULT NULL,\n    start_time TIME DEFAULT NULL,\n    end_time TIME DEFAULT NULL,\n    days_of_week JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens em card\u00e1pios especiais\nCREATE TABLE special_menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    special_menu_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    special_price DECIMAL(10, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (special_menu_id) REFERENCES special_menus(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pedidos\n-- -----------------------------------------------------\n\n-- Tabela de pedidos\nCREATE TABLE orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    staff_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) DEFAULT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    order_number VARCHAR(20) NOT NULL,\n    order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'new',\n    subtotal DECIMAL(10, 2) NOT NULL,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    scheduled_for TIMESTAMP NULL DEFAULT NULL,\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP NULL DEFAULT NULL,\n    cancelled_at TIMESTAMP NULL DEFAULT NULL,\n    cancellation_reason TEXT DEFAULT NULL,\n    is_group_order BOOLEAN DEFAULT FALSE,\n    group_order_code VARCHAR(20) DEFAULT NULL,\n    payment_status ENUM('pending', 'paid', 'partially_paid', 'refunded', 'failed') DEFAULT 'pending',\n    source ENUM('in_person', 'qrcode', 'website', 'app', 'ifood', 'phone') DEFAULT 'in_person',\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n    FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de itens do pedido\nCREATE TABLE order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    options JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',\n    preparation_started_at TIMESTAMP NULL DEFAULT NULL,\n    preparation_completed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de status do pedido\nCREATE TABLE order_status_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') NOT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de entregas\nCREATE TABLE deliveries (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    delivery_address VARCHAR(255) NOT NULL,\n    delivery_city VARCHAR(100) NOT NULL,\n    delivery_state VARCHAR(2) NOT NULL,\n    delivery_zip_code VARCHAR(10) NOT NULL,\n    delivery_instructions TEXT DEFAULT NULL,\n    delivery_person_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'assigned', 'in_transit', 'delivered', 'failed') DEFAULT 'pending',\n    estimated_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    actual_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    tracking_code VARCHAR(50) DEFAULT NULL,\n    tracking_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (delivery_person_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pagamentos\n-- -----------------------------------------------------\n\n-- Tabela de pagamentos\nCREATE TABLE payments (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') NOT NULL,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    installments TINYINT DEFAULT 1,\n    card_brand VARCHAR(50) DEFAULT NULL,\n    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',\n    transaction_id VARCHAR(100) DEFAULT NULL,\n    payment_data JSON DEFAULT NULL,\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de divis\u00e3o de contas\nCREATE TABLE bill_splits (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    split_type ENUM('equal', 'custom', 'percentage', 'item') NOT NULL DEFAULT 'equal',\n    payment_status ENUM('pending', 'paid') DEFAULT 'pending',\n    items JSON DEFAULT NULL,\n    payment_link VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de transa\u00e7\u00f5es no caixa\nCREATE TABLE cash_register_transactions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    cash_register_operation_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    transaction_type ENUM('sale', 'refund', 'expense', 'deposit', 'withdrawal') NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') DEFAULT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type ENUM('order', 'invoice', 'expense', 'other') DEFAULT NULL,\n    description TEXT DEFAULT NULL,\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (cash_register_operation_id) REFERENCES cash_register_operations(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de cupons e descontos\nCREATE TABLE coupons (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    code VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    discount_type ENUM('percentage', 'fixed', 'free_item') NOT NULL,\n    discount_value DECIMAL(10, 2) NOT NULL,\n    free_item_id INT UNSIGNED DEFAULT NULL,\n    min_order_value DECIMAL(10, 2) DEFAULT 0.00,\n    max_discount DECIMAL(10, 2) DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    max_uses INT UNSIGNED DEFAULT NULL,\n    uses_count INT UNSIGNED DEFAULT 0,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_coupon_code_per_tenant (tenant_id, code),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (free_item_id) REFERENCES menu_items(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Estoque e Ingredientes\n-- -----------------------------------------------------\n\n-- Tabela de ingredientes\nCREATE TABLE ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    cost_per_unit DECIMAL(10, 4) NOT NULL,\n    inventory_alert_threshold DECIMAL(10, 2) DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    barcode VARCHAR(50) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de ingredientes por item do menu\nCREATE TABLE menu_item_ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_item_ingredient (menu_item_id, ingredient_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de estoque\nCREATE TABLE inventory (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL DEFAULT 0,\n    location VARCHAR(50) DEFAULT 'main',\n    last_count_date TIMESTAMP NULL DEFAULT NULL,\n    last_count_by INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_location (tenant_id, ingredient_id, location),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (last_count_by) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de movimenta\u00e7\u00f5es de estoque\nCREATE TABLE inventory_movements (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    movement_type ENUM('purchase', 'order_usage', 'adjustment', 'transfer', 'waste', 'return') NOT NULL,\n    unit_cost DECIMAL(10, 4) DEFAULT NULL,\n    location VARCHAR(50) DEFAULT 'main',\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de contagem de estoque (invent\u00e1rio)\nCREATE TABLE inventory_counts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    count_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    user_id INT UNSIGNED NOT NULL,\n    status ENUM('in_progress', 'completed', 'cancelled') DEFAULT 'in_progress',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de detalhes da contagem de estoque\nCREATE TABLE inventory_count_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    inventory_count_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    expected_quantity DECIMAL(10, 2) NOT NULL,\n    actual_quantity DECIMAL(10, 2) NOT NULL,\n    discrepancy DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (inventory_count_id) REFERENCES inventory_counts(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Funcion\u00e1rios\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de funcion\u00e1rios\nCREATE TABLE staff_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    department VARCHAR(100) DEFAULT NULL,\n    hire_date DATE DEFAULT NULL,\n    salary DECIMAL(10, 2) DEFAULT NULL,\n    hourly_rate DECIMAL(10, 2) DEFAULT NULL,\n    commission_rate DECIMAL(5, 2) DEFAULT NULL,\n    working_hours JSON DEFAULT NULL,\n    employee_id VARCHAR(50) DEFAULT NULL,\n    emergency_contact_name VARCHAR(100) DEFAULT NULL,\n    emergency_contact_phone VARCHAR(20) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_staff_employee_id (tenant_id, employee_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de registro de ponto\nCREATE TABLE time_clock (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP NULL DEFAULT NULL,\n    break_start TIMESTAMP NULL DEFAULT NULL,\n    break_end TIMESTAMP NULL DEFAULT NULL,\n    total_hours DECIMAL(5, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de comiss\u00f5es de vendas\nCREATE TABLE sales_commissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    commission_amount DECIMAL(10, 2) NOT NULL,\n    commission_rate DECIMAL(5, 2) NOT NULL,\n    status ENUM('pending', 'approved', 'paid', 'rejected') DEFAULT 'pending',\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de escalas de trabalho\nCREATE TABLE staff_schedules (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    schedule_date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Clientes\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de clientes\nCREATE TABLE customer_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    birth_date DATE DEFAULT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    allergy_info TEXT DEFAULT NULL,\n    favorite_items JSON DEFAULT NULL,\n    marketing_preferences JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de programa de fidelidade\nCREATE TABLE loyalty_program (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_per_currency DECIMAL(10, 2) DEFAULT 1.00,\n    points_validity_days INT UNSIGNED DEFAULT 365,\n    min_points_to_redeem INT UNSIGNED DEFAULT 100,\n    currency_per_point DECIMAL(10, 4) DEFAULT 0.01,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de n\u00edveis de fidelidade\nCREATE TABLE loyalty_tiers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_points INT UNSIGNED NOT NULL,\n    multiplier DECIMAL(5, 2) DEFAULT 1.00,\n    benefits JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pontos de fidelidade\nCREATE TABLE loyalty_points (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    points INT NOT NULL,\n    source ENUM('purchase', 'reward', 'bonus', 'adjustment', 'redemption') NOT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    is_expired BOOLEAN DEFAULT FALSE,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de recompensas do programa de fidelidade\nCREATE TABLE loyalty_rewards (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_required INT UNSIGNED NOT NULL,\n    reward_type ENUM('discount', 'free_item', 'gift', 'coupon') NOT NULL,\n    reward_value JSON NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de resgates de recompensas\nCREATE TABLE loyalty_redemptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    loyalty_reward_id INT UNSIGNED NOT NULL,\n    points_used INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'approved', 'used', 'expired', 'cancelled') DEFAULT 'pending',\n    redemption_code VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    used_at TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_reward_id) REFERENCES loyalty_rewards(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Fornecedores\n-- -----------------------------------------------------\n\n-- Tabela de fornecedores\nCREATE TABLE suppliers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) DEFAULT NULL,\n    email VARCHAR(100) DEFAULT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    contact_name VARCHAR(100) DEFAULT NULL,\n    contact_phone VARCHAR(20) DEFAULT NULL,\n    contact_email VARCHAR(100) DEFAULT NULL,\n    category VARCHAR(50) DEFAULT NULL,\n    payment_terms VARCHAR(100) DEFAULT NULL,\n    delivery_time INT DEFAULT NULL,\n    minimum_order DECIMAL(10, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de produtos de fornecedores\nCREATE TABLE supplier_products (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    sku VARCHAR(50) DEFAULT NULL,\n    supplier_sku VARCHAR(50) DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    ingredient_id INT UNSIGNED DEFAULT NULL,\n    conversion_factor DECIMAL(10, 4) DEFAULT 1.0000,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos a fornecedores\nCREATE TABLE supplier_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_number VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expected_delivery_date DATE DEFAULT NULL,\n    delivery_date DATE DEFAULT NULL,\n    status ENUM('draft', 'sent', 'confirmed', 'partially_received', 'received', 'cancelled') DEFAULT 'draft',\n    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0.00,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    shipping DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    payment_status ENUM('pending', 'partial', 'paid', 'cancelled') DEFAULT 'pending',\n    payment_method VARCHAR(50) DEFAULT NULL,\n    payment_details JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de itens de pedidos a fornecedores\nCREATE TABLE supplier_order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED NOT NULL,\n    supplier_product_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    quantity_received DECIMAL(10, 2) DEFAULT 0.00,\n    status ENUM('pending', 'partial', 'complete', 'cancelled') DEFAULT 'pending',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_product_id) REFERENCES supplier_products(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de avalia\u00e7\u00e3o de fornecedores\nCREATE TABLE supplier_ratings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    quality_rating TINYINT UNSIGNED DEFAULT NULL,\n    service_rating TINYINT UNSIGNED DEFAULT NULL,\n    price_rating TINYINT UNSIGNED DEFAULT NULL,\n    delivery_rating TINYINT UNSIGNED DEFAULT NULL,\n    overall_rating TINYINT UNSIGNED NOT NULL,\n    comments TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Relat\u00f3rios e M\u00e9tricas\n-- -----------------------------------------------------\n\n-- Tabela de relat\u00f3rios salvos\nCREATE TABLE saved_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    report_type VARCHAR(50) NOT NULL,\n    parameters JSON NOT NULL,\n    public BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de relat\u00f3rios agendados\nCREATE TABLE scheduled_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    saved_report_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    frequency ENUM('daily', 'weekly', 'monthly', 'quarterly') NOT NULL,\n    day_of_week TINYINT UNSIGNED DEFAULT NULL,\n    day_of_month TINYINT UNSIGNED DEFAULT NULL,\n    time_of_day TIME NOT NULL,\n    recipients JSON NOT NULL,\n    last_sent TIMESTAMP NULL DEFAULT NULL,\n    next_scheduled TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (saved_report_id) REFERENCES saved_reports(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de m\u00e9tricas di\u00e1rias\nCREATE TABLE daily_metrics (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    metric_date DATE NOT NULL,\n    sales DECIMAL(10, 2) DEFAULT 0.00,\n    orders INT UNSIGNED DEFAULT 0,\n    customers INT UNSIGNED DEFAULT 0,\n    average_ticket DECIMAL(10, 2) DEFAULT 0.00,\n    tables_served INT UNSIGNED DEFAULT 0,\n    average_table_time INT UNSIGNED DEFAULT 0,\n    staff_count INT UNSIGNED DEFAULT 0,\n    labor_cost DECIMAL(10, 2) DEFAULT 0.00,\n    cogs DECIMAL(10, 2) DEFAULT 0.00,\n    profit_margin DECIMAL(5, 2) DEFAULT 0.00,\n    item_metrics JSON DEFAULT NULL,\n    payment_methods JSON DEFAULT NULL,\n    source_metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_tenant_date (tenant_id, metric_date),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Integra\u00e7\u00f5es Externas\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es de integra\u00e7\u00e3o com iFood\nCREATE TABLE ifood_integration (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    merchant_id VARCHAR(100) NOT NULL,\n    api_key VARCHAR(255) NOT NULL,\n    merchant_token VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT FALSE,\n    auto_accept_orders BOOLEAN DEFAULT FALSE,\n    default_preparation_time INT UNSIGNED DEFAULT 30,\n    sync_menu BOOLEAN DEFAULT TRUE,\n    sync_status BOOLEAN DEFAULT TRUE,\n    menu_last_sync TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos do iFood\nCREATE TABLE ifood_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    ifood_order_id VARCHAR(100) NOT NULL,\n    ifood_status VARCHAR(50) NOT NULL,\n    status_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    order_json JSON NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ifood_order (tenant_id, ifood_order_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de mapeamento de itens do card\u00e1pio com iFood\nCREATE TABLE ifood_menu_mapping (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ifood_item_id VARCHAR(100) NOT NULL,\n    ifood_category_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_mapping (tenant_id, menu_item_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de webhooks recebidos\nCREATE TABLE webhooks (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    source VARCHAR(50) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    webhook_id VARCHAR(100) NOT NULL,\n    payload JSON NOT NULL,\n    processed BOOLEAN DEFAULT FALSE,\n    error_message TEXT DEFAULT NULL,\n    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Marketing e Comunica\u00e7\u00e3o\n-- -----------------------------------------------------\n\n-- Tabela de campanhas de marketing\nCREATE TABLE marketing_campaigns (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    campaign_type ENUM('email', 'sms', 'push', 'in_app', 'multi_channel') NOT NULL,\n    target_audience JSON DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    content JSON NOT NULL,\n    metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de mensagens enviadas\nCREATE TABLE sent_messages (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    campaign_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    message_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    recipient VARCHAR(100) NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('sent', 'delivered', 'opened', 'clicked', 'bounced', 'failed') DEFAULT 'sent',\n    status_updated_at TIMESTAMP NULL DEFAULT NULL,\n    tracking_data JSON DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (campaign_id) REFERENCES marketing_campaigns(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de modelos de comunica\u00e7\u00e3o\nCREATE TABLE message_templates (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    template_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    variables JSON DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00f5es Fiscais\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es fiscais\nCREATE TABLE fiscal_settings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    company_tax_regime VARCHAR(50) DEFAULT NULL,\n    tax_id VARCHAR(50) DEFAULT NULL,\n    state_tax_id VARCHAR(50) DEFAULT NULL,\n    municipal_tax_id VARCHAR(50) DEFAULT NULL,\n    tax_rates JSON DEFAULT NULL,\n    fiscal_printer_model VARCHAR(100) DEFAULT NULL,\n    fiscal_printer_serial VARCHAR(100) DEFAULT NULL,\n    nfce_token VARCHAR(255) DEFAULT NULL,\n    nfce_certificate VARCHAR(255) DEFAULT NULL,\n    nfce_environment ENUM('production', 'sandbox') DEFAULT 'sandbox',\n    nfce_series INT UNSIGNED DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de notas fiscais\nCREATE TABLE fiscal_receipts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    receipt_type ENUM('nfce', 'nfe', 'sat', 'nfse') NOT NULL,\n    receipt_number VARCHAR(50) NOT NULL,\n    receipt_series VARCHAR(10) DEFAULT NULL,\n    receipt_key VARCHAR(100) DEFAULT NULL,\n    status ENUM('pending', 'issued', 'cancelled', 'error') DEFAULT 'pending',\n    issue_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_reason TEXT DEFAULT NULL,\n    receipt_url VARCHAR(255) DEFAULT NULL,\n    receipt_data JSON DEFAULT NULL,\n    qr_code TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de c\u00f3digo de produtos fiscais\nCREATE TABLE fiscal_item_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ncm VARCHAR(20) DEFAULT NULL,\n    cest VARCHAR(20) DEFAULT NULL,\n    cfop VARCHAR(10) DEFAULT NULL,\n    icms_rate DECIMAL(5, 2) DEFAULT NULL,\n    pis_rate DECIMAL(5, 2) DEFAULT NULL,\n    cofins_rate DECIMAL(5, 2) DEFAULT NULL,\n    iss_rate DECIMAL(5, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Dados iniciais\n-- -----------------------------------------------------\n\n-- Inserir planos de assinatura\nINSERT INTO plans (name, code, description, price, billing_cycle, features, limits, active) VALUES\n('Plano B\u00e1sico', 'basic', 'Ideal para pequenos estabelecimentos com funcionalidades essenciais', 99.90, 'monthly', \n '[\"qrcode_basic\", \"basic_reports\"]', \n '{\"max_tables\": 10, \"max_users\": 5, \"max_menu_items\": 50, \"max_monthly_orders\": 500}', \n true),\n('Plano Padr\u00e3o', 'standard', 'Perfeito para restaurantes de m\u00e9dio porte com recursos completos', 199.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\"]', \n '{\"max_tables\": 25, \"max_users\": 15, \"max_menu_items\": 150, \"max_monthly_orders\": 2000}', \n true),\n('Plano Premium', 'premium', 'Solu\u00e7\u00e3o completa para grandes estabelecimentos com funcionalidades avan\u00e7adas', 349.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\"]', \n '{\"max_tables\": 50, \"max_users\": 30, \"max_menu_items\": 300, \"max_monthly_orders\": 5000}', \n true),\n('Plano Enterprise', 'enterprise', 'Solu\u00e7\u00e3o personalizada para redes de restaurantes e franquias', 599.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\", \"api_access\", \"custom_integrations\"]', \n '{\"max_tables\": -1, \"max_users\": -1, \"max_menu_items\": -1, \"max_monthly_orders\": -1}', \n true);\n\n-- Inserir usu\u00e1rio admin para testes (senha: admin123)\nINSERT INTO users (username, email, password, name, role, active, email_verified) VALUES\n('admin', 'admin@restaurantesaas.com.br', '$2y$12$WxkpKAQQ1RBoOaNUvDH4R.UJYPzMvEVDkn5P3nCWfxmYUQQeMLOsW', 'Administrador', 'platform_admin', true, true);\n\n-- Inserir permiss\u00f5es b\u00e1sicas\nINSERT INTO permissions (name, description) VALUES\n('view_dashboard', 'Visualizar dashboard'),\n('manage_menu', 'Gerenciar card\u00e1pio'),\n('manage_orders', 'Gerenciar pedidos'),\n('manage_tables', 'Gerenciar mesas'),\n('manage_inventory', 'Gerenciar estoque'),\n('manage_staff', 'Gerenciar funcion\u00e1rios'),\n('manage_customers', 'Gerenciar clientes'),\n('manage_payments', 'Gerenciar pagamentos'),\n('view_reports', 'Visualizar relat\u00f3rios'),\n('manage_settings', 'Gerenciar configura\u00e7\u00f5es'),\n('manage_integrations', 'Gerenciar integra\u00e7\u00f5es'),\n('admin_access', 'Acesso administrativo completo');\n\n2. **Estrutura de Diret\u00f3rios (100%)**\n\n#!/bin/bash\n\n# Criar diret\u00f3rio raiz\nmkdir -p restaurante-sistema\n\n# Criar estrutura de assets\nmkdir -p restaurante-sistema/assets/css/restaurant-types\nmkdir -p restaurante-sistema/assets/js/restaurant-types\nmkdir -p restaurante-sistema/assets/images/logo\nmkdir -p restaurante-sistema/assets/images/icons/{menu,status,actions,payment,subscription}\nmkdir -p restaurante-sistema/assets/images/menu\nmkdir -p restaurante-sistema/assets/images/ui\nmkdir -p restaurante-sistema/assets/images/plans\nmkdir -p restaurante-sistema/assets/images/restaurant-types/{alacarte,fastfood,pizzaria}\nmkdir -p restaurante-sistema/assets/fonts\n\n# Criar arquivos CSS\ntouch restaurante-sistema/assets/css/main.css\ntouch restaurante-sistema/assets/css/login.css\ntouch restaurante-sistema/assets/css/dashboard.css\ntouch restaurante-sistema/assets/css/tables.css\ntouch restaurante-sistema/assets/css/menu.css\ntouch restaurante-sistema/assets/css/kitchen.css\ntouch restaurante-sistema/assets/css/reports.css\ntouch restaurante-sistema/assets/css/ponto.css\ntouch restaurante-sistema/assets/css/fornecedores.css\ntouch restaurante-sistema/assets/css/customer-mobile.css\ntouch restaurante-sistema/assets/css/subscription.css\ntouch restaurante-sistema/assets/css/pricing.css\ntouch restaurante-sistema/assets/css/billing.css\ntouch restaurante-sistema/assets/css/onboarding.css\n\n# Criar arquivos CSS espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/css/restaurant-types/alacarte.css\ntouch restaurante-sistema/assets/css/restaurant-types/fastfood.css\ntouch restaurante-sistema/assets/css/restaurant-types/pizzaria.css\ntouch restaurante-sistema/assets/css/restaurant-types/rodizio.css\ntouch restaurante-sistema/assets/css/restaurant-types/selfservice.css\ntouch restaurante-sistema/assets/css/restaurant-types/delivery.css\ntouch restaurante-sistema/assets/css/restaurant-types/foodtruck.css\ntouch restaurante-sistema/assets/css/restaurant-types/bar.css\ntouch restaurante-sistema/assets/css/restaurant-types/cafeteria.css\ntouch restaurante-sistema/assets/css/restaurant-types/multiunit.css\n\n# Criar arquivos JavaScript\ntouch restaurante-sistema/assets/js/main.js\ntouch restaurante-sistema/assets/js/login.js\ntouch restaurante-sistema/assets/js/dashboard.js\ntouch restaurante-sistema/assets/js/tables.js\ntouch restaurante-sistema/assets/js/orders.js\ntouch restaurante-sistema/assets/js/menu.js\ntouch restaurante-sistema/assets/js/kitchen.js\ntouch restaurante-sistema/assets/js/inventory.js\ntouch restaurante-sistema/assets/js/payments.js\ntouch restaurante-sistema/assets/js/stripe-integration.js\ntouch restaurante-sistema/assets/js/subscription.js\ntouch restaurante-sistema/assets/js/pricing-calculator.js\ntouch restaurante-sistema/assets/js/billing-portal.js\ntouch restaurante-sistema/assets/js/charts.js\ntouch restaurante-sistema/assets/js/ponto.js\ntouch restaurante-sistema/assets/js/supplier-manager.js\ntouch restaurante-sistema/assets/js/group-orders.js\ntouch restaurante-sistema/assets/js/bill-splitter.js\ntouch restaurante-sistema/assets/js/onboarding.js\n\n# Criar arquivos JavaScript espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/js/restaurant-types/alacarte.js\ntouch restaurante-sistema/assets/js/restaurant-types/fastfood.js\ntouch restaurante-sistema/assets/js/restaurant-types/pizzaria.js\ntouch restaurante-sistema/assets/js/restaurant-types/rodizio.js\ntouch restaurante-sistema/assets/js/restaurant-types/selfservice.js\ntouch restaurante-sistema/assets/js/restaurant-types/delivery.js\ntouch restaurante-sistema/assets/js/restaurant-types/multiunit.js\n\n# Criar estrutura de config\nmkdir -p restaurante-sistema/config\ntouch restaurante-sistema/config/database.php\ntouch restaurante-sistema/config/constants.php\ntouch restaurante-sistema/config/stripe.php\ntouch restaurante-sistema/config/email.php\ntouch restaurante-sistema/config/sms.php\ntouch restaurante-sistema/config/qrcode.php\ntouch restaurante-sistema/config/ifood.php\ntouch restaurante-sistema/config/restaurant_types.php\ntouch restaurante-sistema/config/interface_settings.php\ntouch restaurante-sistema/config/order_methods.php\ntouch restaurante-sistema/config/subscription_plans.php\ntouch restaurante-sistema/config/tenant.php\ntouch restaurante-sistema/config/feature_limits.php\n\n# Criar estrutura de controllers\nmkdir -p restaurante-sistema/controllers/subscription\nmkdir -p restaurante-sistema/controllers/DashboardController/{AlacarteDashboardController.php,FastFoodDashboardController.php,PizzariaDashboardController.php,RodizioDashboardController.php,DeliveryDashboardController.php}\nmkdir -p restaurante-sistema/controllers/OrderController\nmkdir -p restaurante-sistema/controllers/MenuController\nmkdir -p restaurante-sistema/controllers/PaymentController\nmkdir -p restaurante-sistema/controllers/SupplierController\nmkdir -p restaurante-sistema/controllers/StaffController\n\ntouch restaurante-sistema/controllers/AuthController.php\ntouch restaurante-sistema/controllers/SubscriptionController.php\ntouch restaurante-sistema/controllers/subscription/PlansController.php\ntouch restaurante-sistema/controllers/subscription/BillingController.php\ntouch restaurante-sistema/controllers/subscription/FeatureController.php\ntouch restaurante-sistema/controllers/TenantController.php\ntouch restaurante-sistema/controllers/OnboardingController.php\ntouch restaurante-sistema/controllers/DashboardController.php\ntouch restaurante-sistema/controllers/TableController.php\ntouch restaurante-sistema/controllers/OrderController.php\ntouch restaurante-sistema/controllers/OrderController/SingleOrderController.php\ntouch restaurante-sistema/controllers/OrderController/GroupOrderController.php\ntouch restaurante-sistema/controllers/MenuController.php\ntouch restaurante-sistema/controllers/MenuController/AlacarteMenuController.php\ntouch restaurante-sistema/controllers/MenuController/FastFoodMenuController.php\ntouch restaurante-sistema/controllers/MenuController/PizzariaMenuController.php\ntouch restaurante-sistema/controllers/MenuController/RodizioMenuController.php\ntouch restaurante-sistema/controllers/MenuController/SelfServiceMenuController.php\ntouch restaurante-sistema/controllers/KitchenController.php\ntouch restaurante-sistema/controllers/InventoryController.php\ntouch restaurante-sistema/controllers/PaymentController.php\ntouch restaurante-sistema/controllers/PaymentController/BillSplitController.php\ntouch restaurante-sistema/controllers/ReportController.php\ntouch restaurante-sistema/controllers/iFoodController.php\ntouch restaurante-sistema/controllers/SupplierController.php\ntouch restaurante-sistema/controllers/SupplierController/QuickOrderController.php\ntouch restaurante-sistema/controllers/StaffController.php\ntouch restaurante-sistema/controllers/StaffController/TimeClockController.php\ntouch restaurante-sistema/controllers/CustomerController.php\ntouch restaurante-sistema/controllers/QRCodeController.php\ntouch restaurante-sistema/controllers/RestaurantTypeController.php\ntouch restaurante-sistema/controllers/SettingsController.php\n\n# Criar estrutura de models\nmkdir -p restaurante-sistema/models/Account\nmkdir -p restaurante-sistema/models/Order\nmkdir -p restaurante-sistema/models/MenuItem\nmkdir -p restaurante-sistema/models/Inventory\nmkdir -p restaurante-sistema/models/Payment\nmkdir -p restaurante-sistema/models/Staff\nmkdir -p restaurante-sistema/models/Supplier\nmkdir -p restaurante-sistema/models/Customer\n\ntouch restaurante-sistema/models/User.php\ntouch restaurante-sistema/models/Account.php\ntouch restaurante-sistema/models/Account/Subscription.php\ntouch restaurante-sistema/models/Account/Plan.php\ntouch restaurante-sistema/models/Account/Invoice.php\ntouch restaurante-sistema/models/Account/Usage.php\ntouch restaurante-sistema/models/Tenant.php\ntouch restaurante-sistema/models/Restaurant.php\ntouch restaurante-sistema/models/RestaurantType.php\ntouch restaurante-sistema/models/CashRegister.php\ntouch restaurante-sistema/models/Table.php\ntouch restaurante-sistema/models/Order.php\ntouch restaurante-sistema/models/Order/SingleOrder.php\ntouch restaurante-sistema/models/Order/GroupOrder.php\ntouch restaurante-sistema/models/OrderItem.php\ntouch restaurante-sistema/models/MenuItem.php\ntouch restaurante-sistema/models/MenuItem/AlacarteMenuItem.php\ntouch restaurante-sistema/models/MenuItem/FastFoodMenuItem.php\ntouch restaurante-sistema/models/MenuItem/PizzaMenuItem.php\ntouch restaurante-sistema/models/MenuItem/RodizioMenuItem.php\ntouch restaurante-sistema/models/Inventory.php\ntouch restaurante-sistema/models/Inventory/StockMovement.php\ntouch restaurante-sistema/models/Reservation.php\ntouch restaurante-sistema/models/Payment.php\ntouch restaurante-sistema/models/Payment/BillSplit.php\ntouch restaurante-sistema/models/Staff.php\ntouch restaurante-sistema/models/Staff/TimeClock.php\ntouch restaurante-sistema/models/Supplier.php\ntouch restaurante-sistema/models/Supplier/SupplierContact.php\ntouch restaurante-sistema/models/Supplier/SupplierOrder.php\ntouch restaurante-sistema/models/Supplier/SupplierRating.php\ntouch restaurante-sistema/models/Customer.php\ntouch restaurante-sistema/models/Customer/LoyaltyProgram.php\ntouch restaurante-sistema/models/MarketingCampaign.php\ntouch restaurante-sistema/models/QRCode.php\ntouch restaurante-sistema/models/RestaurantConfiguration.php\ntouch restaurante-sistema/models/RestaurantInterface.php\n\n# Criar estrutura de views\nmkdir -p restaurante-sistema/views/auth\nmkdir -p restaurante-sistema/views/subscription\nmkdir -p restaurante-sistema/views/onboarding\nmkdir -p restaurante-sistema/views/dashboard/{alacarte,fastfood,pizzaria,rodizio,selfservice,delivery,multiunit}\nmkdir -p restaurante-sistema/views/tables\nmkdir -p restaurante-sistema/views/menu/types\nmkdir -p restaurante-sistema/views/kitchen/types\nmkdir -p restaurante-sistema/views/inventory\nmkdir -p restaurante-sistema/views/payments\nmkdir -p restaurante-sistema/views/reports/types\nmkdir -p restaurante-sistema/views/ifood\nmkdir -p restaurante-sistema/views/suppliers\nmkdir -p restaurante-sistema/views/staff/time-clock\nmkdir -p restaurante-sistema/views/customers\nmkdir -p restaurante-sistema/views/marketing\nmkdir -p restaurante-sistema/views/qrcode\nmkdir -p restaurante-sistema/views/admin\nmkdir -p restaurante-sistema/views/settings\n\n# Criar arquivos de views de autentica\u00e7\u00e3o\ntouch restaurante-sistema/views/auth/login.php\ntouch restaurante-sistema/views/auth/reset-password.php\ntouch restaurante-sistema/views/auth/register.php\n\n# Criar arquivos de views de assinatura\ntouch restaurante-sistema/views/subscription/plans.php\ntouch restaurante-sistema/views/subscription/checkout.php\ntouch restaurante-sistema/views/subscription/success.php\ntouch restaurante-sistema/views/subscription/billing.php\ntouch restaurante-sistema/views/subscription/upgrade.php\ntouch restaurante-sistema/views/subscription/downgrade.php\ntouch restaurante-sistema/views/subscription/cancel.php\ntouch restaurante-sistema/views/subscription/payment-methods.php\n\n# Criar arquivos de views de onboarding\ntouch restaurante-sistema/views/onboarding/welcome.php\ntouch restaurante-sistema/views/onboarding/restaurant-type.php\ntouch restaurante-sistema/views/onboarding/restaurant-comparison.php\ntouch restaurante-sistema/views/onboarding/basic-info.php\ntouch restaurante-sistema/views/onboarding/menu-setup.php\ntouch restaurante-sistema/views/onboarding/operating-hours.php\ntouch restaurante-sistema/views/onboarding/table-setup.php\ntouch restaurante-sistema/views/onboarding/staff-roles.php\ntouch restaurante-sistema/views/onboarding/payment-options.php\ntouch restaurante-sistema/views/onboarding/finalize.php\n\n# Criar arquivos de views de dashboard\ntouch restaurante-sistema/views/dashboard/index.php\ntouch restaurante-sistema/views/dashboard/account-status.php\ntouch restaurante-sistema/views/dashboard/alacarte/index.php\ntouch restaurante-sistema/views/dashboard/alacarte/tables.php\ntouch restaurante-sistema/views/dashboard/fastfood/index.php\ntouch restaurante-sistema/views/dashboard/fastfood/queue.php\ntouch restaurante-sistema/views/dashboard/pizzaria/index.php\ntouch restaurante-sistema/views/dashboard/pizzaria/pizza-builder.php\ntouch restaurante-sistema/views/dashboard/rodizio/index.php\ntouch restaurante-sistema/views/dashboard/rodizio/rounds.php\ntouch restaurante-sistema/views/dashboard/selfservice/index.php\ntouch restaurante-sistema/views/dashboard/selfservice/scales.php\ntouch restaurante-sistema/views/dashboard/delivery/index.php\ntouch restaurante-sistema/views/dashboard/delivery/routes.php\ntouch restaurante-sistema/views/dashboard/multiunit/index.php\ntouch restaurante-sistema/views/dashboard/multiunit/units.php\n\n# Criar mais arquivos de views (continua\u00e7\u00e3o)\ntouch restaurante-sistema/views/tables/map.php\ntouch restaurante-sistema/views/tables/order.php\ntouch restaurante-sistema/views/tables/multi-user.php\n\ntouch restaurante-sistema/views/menu/admin.php\ntouch restaurante-sistema/views/menu/editor.php\ntouch restaurante-sistema/views/menu/customer.php\ntouch restaurante-sistema/views/menu/category-manager.php\ntouch restaurante-sistema/views/menu/promotions.php\ntouch restaurante-sistema/views/menu/types/alacarte.php\ntouch restaurante-sistema/views/menu/types/fastfood.php\ntouch restaurante-sistema/views/menu/types/pizzaria.php\ntouch restaurante-sistema/views/menu/types/rodizio.php\ntouch restaurante-sistema/views/menu/types/selfservice.php\n\ntouch restaurante-sistema/views/kitchen/panel.php\ntouch restaurante-sistema/views/kitchen/inventory-usage.php\ntouch restaurante-sistema/views/kitchen/types/alacarte.php\ntouch restaurante-sistema/views/kitchen/types/fastfood.php\ntouch restaurante-sistema/views/kitchen/types/pizzaria.php\ntouch restaurante-sistema/views/kitchen/types/rodizio.php\n\ntouch restaurante-sistema/views/inventory/management.php\ntouch restaurante-sistema/views/inventory/movements.php\ntouch restaurante-sistema/views/inventory/alerts.php\n\ntouch restaurante-sistema/views/payments/process.php\ntouch restaurante-sistema/views/payments/receipt.php\ntouch restaurante-sistema/views/payments/split-bill.php\ntouch restaurante-sistema/views/payments/group-payment.php\n\ntouch restaurante-sistema/views/reports/sales.php\ntouch restaurante-sistema/views/reports/cash.php\ntouch restaurante-sistema/views/reports/performance.php\ntouch restaurante-sistema/views/reports/financial.php\ntouch restaurante-sistema/views/reports/types/alacarte.php\ntouch restaurante-sistema/views/reports/types/fastfood.php\ntouch restaurante-sistema/views/reports/types/pizzaria.php\ntouch restaurante-sistema/views/reports/types/rodizio.php\ntouch restaurante-sistema/views/reports/types/delivery.php\n\ntouch restaurante-sistema/views/ifood/orders.php\n\ntouch restaurante-sistema/views/suppliers/list.php\ntouch restaurante-sistema/views/suppliers/details.php\ntouch restaurante-sistema/views/suppliers/quick-order.php\ntouch restaurante-sistema/views/suppliers/history.php\ntouch restaurante-sistema/views/suppliers/ratings.php\n\ntouch restaurante-sistema/views/staff/list.php\ntouch restaurante-sistema/views/staff/details.php\ntouch restaurante-sistema/views/staff/schedule.php\ntouch restaurante-sistema/views/staff/time-clock/register.php\ntouch restaurante-sistema/views/staff/time-clock/management.php\ntouch restaurante-sistema/views/staff/time-clock/reports.php\n\ntouch restaurante-sistema/views/customers/list.php\ntouch restaurante-sistema/views/customers/details.php\ntouch restaurante-sistema/views/customers/loyalty.php\n\ntouch restaurante-sistema/views/marketing/campaigns.php\ntouch restaurante-sistema/views/marketing/promotions.php\n\ntouch restaurante-sistema/views/qrcode/generator.php\ntouch restaurante-sistema/views/qrcode/manager.php\ntouch restaurante-sistema/views/qrcode/preview.php\n\ntouch restaurante-sistema/views/admin/accounts.php\ntouch restaurante-sistema/views/admin/plans.php\ntouch restaurante-sistema/views/admin/statistics.php\ntouch restaurante-sistema/views/admin/support.php\ntouch restaurante-sistema/views/admin/settings.php\n\ntouch restaurante-sistema/views/settings/general.php\ntouch restaurante-sistema/views/settings/restaurant-type.php\ntouch restaurante-sistema/views/settings/interfaces.php\ntouch restaurante-sistema/views/settings/qrcode.php\ntouch restaurante-sistema/views/settings/group-orders.php\ntouch restaurante-sistema/views/settings/time-clock.php\ntouch restaurante-sistema/views/settings/integrations.php\ntouch restaurante-sistema/views/settings/account.php\ntouch restaurante-sistema/views/settings/backup.php\n\n# Criar estrutura de includes\nmkdir -p restaurante-sistema/includes\ntouch restaurante-sistema/includes/functions.php\ntouch restaurante-sistema/includes/validation.php\ntouch restaurante-sistema/includes/session.php\ntouch restaurante-sistema/includes/security.php\ntouch restaurante-sistema/includes/currency.php\ntouch restaurante-sistema/includes/date.php\ntouch restaurante-sistema/includes/notification.php\ntouch restaurante-sistema/includes/restaurant-type-helper.php\ntouch restaurante-sistema/includes/interface-loader.php\ntouch restaurante-sistema/includes/tenant-resolver.php\ntouch restaurante-sistema/includes/feature-checker.php\ntouch restaurante-sistema/includes/subscription-helper.php\n\n# Criar estrutura de API\nmkdir -p restaurante-sistema/api/subscription\nmkdir -p restaurante-sistema/api/orders\nmkdir -p restaurante-sistema/api/payments\nmkdir -p restaurante-sistema/api/staff\n\ntouch restaurante-sistema/api/auth.php\ntouch restaurante-sistema/api/subscription.php\ntouch restaurante-sistema/api/subscription/plans.php\ntouch restaurante-sistema/api/subscription/webhooks.php\ntouch restaurante-sistema/api/subscription/billing.php\ntouch restaurante-sistema/api/tables.php\ntouch restaurante-sistema/api/orders.php\ntouch restaurante-sistema/api/orders/group-orders.php\ntouch restaurante-sistema/api/menu.php\ntouch restaurante-sistema/api/payments.php\ntouch restaurante-sistema/api/payments/bill-split.php\ntouch restaurante-sistema/api/ifood.php\ntouch restaurante-sistema/api/suppliers.php\ntouch restaurante-sistema/api/staff.php\ntouch restaurante-sistema/api/staff/time-clock.php\ntouch restaurante-sistema/api/customers.php\ntouch restaurante-sistema/api/reports.php\ntouch restaurante-sistema/api/qrcode.php\ntouch restaurante-sistema/api/restaurant-type.php\n\n# Criar estrutura de services\nmkdir -p restaurante-sistema/services\ntouch restaurante-sistema/services/StripeService.php\ntouch restaurante-sistema/services/SubscriptionService.php\ntouch restaurante-sistema/services/BillingService.php\ntouch restaurante-sistema/services/TenantService.php\ntouch restaurante-sistema/services/FeatureLimitService.php\ntouch restaurante-sistema/services/QRCodeService.php\ntouch restaurante-sistema/services/PDFService.php\ntouch restaurante-sistema/services/iFoodService.php\ntouch restaurante-sistema/services/EmailService.php\ntouch restaurante-sistema/services/SMSService.php\ntouch restaurante-sistema/services/NotificationService.php\ntouch restaurante-sistema/services/ChartService.php\ntouch restaurante-sistema/services/BackupService.php\ntouch restaurante-sistema/services/RestaurantTypeService.php\ntouch restaurante-sistema/services/InterfaceService.php\ntouch restaurante-sistema/services/ScaleService.php\ntouch restaurante-sistema/services/DeliveryTrackingService.php\ntouch restaurante-sistema/services/RodizioTrackingService.php\n\n# Criar estrutura de database\nmkdir -p restaurante-sistema/database/migrations\nmkdir -p restaurante-sistema/database/seeds\n\ntouch restaurante-sistema/database/migrations/create_tenants_table.php\ntouch restaurante-sistema/database/migrations/create_accounts_table.php\ntouch restaurante-sistema/database/migrations/create_subscriptions_table.php\ntouch restaurante-sistema/database/migrations/create_plans_table.php\ntouch restaurante-sistema/database/migrations/create_invoices_table.php\ntouch restaurante-sistema/database/migrations/create_usage_logs_table.php\ntouch restaurante-sistema/database/migrations/create_users_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_types_table.php\ntouch restaurante-sistema/database/migrations/create_restaurants_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_configurations_table.php\ntouch restaurante-sistema/database/migrations/create_tables_table.php\ntouch restaurante-sistema/database/migrations/create_menu_items_table.php\ntouch restaurante-sistema/database/migrations/create_orders_table.php\ntouch restaurante-sistema/database/migrations/create_order_items_table.php\ntouch restaurante-sistema/database/migrations/create_inventory_table.php\ntouch restaurante-sistema/database/migrations/create_customers_table.php\ntouch restaurante-sistema/database/migrations/create_staff_table.php\ntouch restaurante-sistema/database/migrations/create_time_clock_table.php\ntouch restaurante-sistema/database/migrations/create_suppliers_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_orders_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_contacts_table.php\ntouch restaurante-sistema/database/migrations/create_payments_table.php\ntouch restaurante-sistema/database/migrations/create_bill_splits_table.php\ntouch restaurante-sistema/database/migrations/create_qrcodes_table.php\n\ntouch restaurante-sistema/database/seeds/plans_seeder.php\ntouch restaurante-sistema/database/seeds/features_seeder.php\ntouch restaurante-sistema/database/seeds/users_seeder.php\ntouch restaurante-sistema/database/seeds/restaurant_types_seeder.php\ntouch restaurante-sistema/database/seeds/menu_items_seeder.php\ntouch restaurante-sistema/database/seeds/suppliers_seeder.php\ntouch restaurante-sistema/database/seeds/staff_seeder.php\n\n# Criar estrutura de public\nmkdir -p restaurante-sistema/public/webhook\nmkdir -p restaurante-sistema/public/qr/tables\nmkdir -p restaurante-sistema/public/receipt\n\ntouch restaurante-sistema/public/index.php\ntouch restaurante-sistema/public/pricing.php\ntouch restaurante-sistema/public/register.php\ntouch restaurante-sistema/public/customer-menu.php\ntouch restaurante-sistema/public/group-order.php\ntouch restaurante-sistema/public/time-clock.php\ntouch restaurante-sistema/public/webhook/stripe.php\ntouch restaurante-sistema/public/.htaccess\n\n# Criar estrutura de mobile\nmkdir -p restaurante-sistema/mobile/types\nmkdir -p restaurante-sistema/mobile/staff\n\ntouch restaurante-sistema/mobile/index.php\ntouch restaurante-sistema/mobile/menu.php\ntouch restaurante-sistema/mobile/order.php\ntouch restaurante-sistema/mobile/group-order.php\ntouch restaurante-sistema/mobile/payment.php\ntouch restaurante-sistema/mobile/types/alacarte.php\ntouch restaurante-sistema/mobile/types/fastfood.php\ntouch restaurante-sistema/mobile/types/pizzaria.php\ntouch restaurante-sistema/mobile/types/rodizio.php\ntouch restaurante-sistema/mobile/staff/time-clock.php\n\n# Criar estrutura de docs\nmkdir -p restaurante-sistema/docs/restaurant-types\n\ntouch restaurante-sistema/docs/setup.md\ntouch restaurante-sistema/docs/admin-guide.md\ntouch restaurante-sistema/docs/user-guide.md\ntouch restaurante-sistema/docs/api-docs.md\ntouch restaurante-sistema/docs/database-schema.md\ntouch restaurante-sistema/docs/subscription.md\ntouch restaurante-sistema/docs/restaurant-types/alacarte.md\ntouch restaurante-sistema/docs/restaurant-types/fastfood.md\ntouch restaurante-sistema/docs/restaurant-types/pizzaria.md\n\n# Criar estrutura de tests\nmkdir -p restaurante-sistema/tests/unit/subscription\nmkdir -p restaurante-sistema/tests/integration\nmkdir -p restaurante-sistema/tests/acceptance\n\n# Criar estrutura de vendor (diret\u00f3rio vazio para Composer)\nmkdir -p restaurante-sistema/vendor\n\n# Criar arquivos raiz\ntouch restaurante-sistema/.htaccess\ntouch restaurante-sistema/index.php\ntouch restaurante-sistema/composer.json\ntouch restaurante-sistema/package.json\ntouch restaurante-sistema/README.md\ntouch restaurante-sistema/LICENSE\ntouch restaurante-sistema/.gitignore\n\n\ntudo acima meno o banco de dados precisar ser criado, incluindo o diret\u00f3rio\n\n# CHECKPOINT DE DESENVOLVIMENTO - SISTEMA DE GEST\u00c3O DE RESTAURANTES SAAS\n\n## PROGRESSO ATUAL: 0% CONCLU\u00cdDO\n\n\nEste checkpoint resume o progresso atual e define claramente os pr\u00f3ximos passos para o desenvolvimento. Em sua pr\u00f3xima conversa, voc\u00ea pode continuar a partir deste ponto, concentrando-se na implementa\u00e7\u00e3o dos m\u00f3dulos listados acima.\n\n\n\n\n\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\n- /core/config/app.php\n\n## Requisitos para o Pr\u00f3ximo Passo\n# Continua\u00e7\u00e3o do desenvolvimento do sistema SaaS de restaurantes - Pr\u00f3ximos 10%\n\nVoc\u00ea j\u00e1 desenvolveu a base do m\u00f3dulo core com a infraestrutura inicial do sistema (primeiros 10%), incluindo configura\u00e7\u00e3o de banco de dados, fun\u00e7\u00f5es de seguran\u00e7a, autentica\u00e7\u00e3o e estrutura multi-tenant. Agora, precisamos avan\u00e7ar com mais 10% do projeto, continuando o m\u00f3dulo core e iniciando o m\u00f3dulo de assinaturas (subscription).\n\n## FASE ATUAL DE DESENVOLVIMENTO\n\n### O que precisa ser implementado nesta fase:\n\n1. Completar o m\u00f3dulo core com:\n   - Estrutura MVC completa incluindo controllers e views base\n   - Sistema de rotas para redirecionamento de URLs\n   - Classes de resposta para API REST\n   - Componentes para tratamento de erros e exce\u00e7\u00f5es\n   - Implementa\u00e7\u00e3o do m\u00f3dulo de log de atividades\n   - Migrations para cria\u00e7\u00e3o das tabelas do core (usu\u00e1rios, tenants, logs)\n\n2. Iniciar o m\u00f3dulo de assinaturas (subscription) com:\n   - Modelo de dados para planos e assinaturas\n   - Integra\u00e7\u00e3o b\u00e1sica com Stripe (SDK)\n   - Controladores para gerenciamento de planos e assinaturas\n   - Migrations para as tabelas relacionadas a assinaturas\n\n## REQUISITOS T\u00c9CNICOS ESPEC\u00cdFICOS\n\n1. Sistema de rotas para o MVC:\n   - Formato de URL amig\u00e1vel: `dominio.com/controlador/acao/parametros`\n   - Suporte a middlewares e grupos de rotas\n   - Captura de par\u00e2metros via URL\n   - Mapeamento autom\u00e1tico para m\u00e9todos dos controladores\n\n2. Estrutura MVC:\n   - Controladores base com m\u00e9todos padr\u00e3o (index, show, create, store, edit, update, delete)\n   - Views utilizando um sistema de template simples\n   - Estrutura para carregar componentes de UI reutiliz\u00e1veis\n\n3. Integra\u00e7\u00e3o com Stripe:\n   - Cadastro de clientes no Stripe\n   - Cria\u00e7\u00e3o de planos e produtos\n   - Processamento de webhooks para atualiza\u00e7\u00f5es de status\n\n4. Migra\u00e7\u00f5es de banco de dados:\n   - Implementar sistema de migrations para versionar o banco de dados\n   - Criar as tabelas base do sistema: users, roles, permissions, tenants, plans, subscriptions, etc.\n\n## FORMATO DO C\u00d3DIGO\n\nPara cada arquivo, utilize o seguinte formato para facilitar a extra\u00e7\u00e3o autom\u00e1tica:\n\n```php\n// File: caminho/do/arquivo.php\n// c\u00f3digo aqui\n```\n\n## ENTREG\u00c1VEIS ESPERADOS\n\n1. C\u00f3digo-fonte completo do sistema de rotas\n2. C\u00f3digo-fonte da estrutura MVC base\n3. Implementa\u00e7\u00e3o do sistema de migrations\n4. Scripts de cria\u00e7\u00e3o de tabelas do core e subscription\n5. Controladores para gerenciamento de assinaturas\n6. Modelos para planos e assinaturas\n7. Integra\u00e7\u00e3o b\u00e1sica com Stripe para pagamentos recorrentes\n8. Documenta\u00e7\u00e3o de uso da API Stripe\n9. Instru\u00e7\u00f5es para configura\u00e7\u00e3o e testes\n\nPor favor, siga os padr\u00f5es PSR-12 para estilo de c\u00f3digo, utilize namespaces adequados (RestauranteSaas\\Module\\Component) e documente todas as classes e m\u00e9todos com PHPDoc.\n\n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# Desenvolvimento do M\u00f3dulo Core - Sistema de Gest\u00e3o de Restaurantes SaaS\n\nVou implementar o m\u00f3dulo core do sistema para a estrutura MVC, sistema de rotas, classes de resposta para API REST, tratamento de erros e logs. Come\u00e7aremos com os componentes fundamentais.\n\n## 1. Sistema de Rotas\n\n```php\n// File: core/Router.php\n<?php\nnamespace RestauranteSaas\\Core;\n\nclass Router {\n    private static $routes = [];\n    private static $groupPrefix = '';\n    private static $middlewares = [];\n    private static $groupMiddlewares = [];\n    \n    /**\n     * Registra uma rota GET\n     * \n     * @param string $route Rota a ser registrada\n     * @param mixed $handler Controlador e m\u00e9todo ou callback\n     * @return void\n     */\n    public static function get($route, $handler) {\n        self::registerRoute('GET', $route, $handler);\n    }\n    \n    /**\n     * Registra uma rota POST\n     * \n     * @param string $route Rota a ser registrada\n     * @param mixed $handler Controlador e m\u00e9todo ou callback\n     * @return void\n     */\n    public static function post($route, $handler) {\n        self::registerRoute('POST', $route, $handler);\n    }\n    \n    /**\n     * Registra uma rota PUT\n     * \n     * @param string $route Rota a ser registrada\n     * @param mixed $handler Controlador e m\u00e9todo ou callback\n     * @return void\n     */\n    public static function put($route, $handler) {\n        self::registerRoute('PUT', $route, $handler);\n    }\n    \n    /**\n     * Registra uma rota DELETE\n     * \n     * @param string $route Rota a ser registrada\n     * @param mixed $handler Controlador e m\u00e9todo ou callback\n     * @return void\n     */\n    public static function delete($route, $handler) {\n        self::registerRoute('DELETE', $route, $handler);\n    }\n    \n    /**\n     * Define um grupo de rotas com prefixo\n     * \n     * @param string $prefix Prefixo das rotas\n     * @param callable $callback Fun\u00e7\u00e3o com defini\u00e7\u00e3o das rotas\n     * @param array $middlewares Middlewares do grupo\n     * @return void\n     */\n    public static function group($prefix, $callback, $middlewares = []) {\n        $oldPrefix = self::$groupPrefix;\n        $oldMiddlewares = self::$groupMiddlewares;\n        \n        self::$groupPrefix = $oldPrefix . $prefix;\n        self::$groupMiddlewares = array_merge($oldMiddlewares, $middlewares);\n        \n        call_user_func($callback);\n        \n        self::$groupPrefix = $oldPrefix;\n        self::$groupMiddlewares = $oldMiddlewares;\n    }\n    \n    /**\n     * Registra uma rota com seu m\u00e9todo HTTP\n     * \n     * @param string $method M\u00e9todo HTTP\n     * @param string $route Rota a ser registrada\n     * @param mixed $handler Controlador e m\u00e9todo ou callback\n     * @return void\n     */\n    private static function registerRoute($method, $route, $handler) {\n        $route = self::$groupPrefix . $route;\n        \n        // Converte placeholders nomeados para regex\n        $routeRegex = preg_replace('/\\/{([^\\/]+)}/', '/(?P<$1>[^/]+)', $route);\n        $routeRegex = str_replace('/', '\\/', $routeRegex);\n        $routeRegex = '/^' . $routeRegex . '$/';\n        \n        self::$routes[] = [\n            'method' => $method,\n            'route' => $route,\n            'regex' => $routeRegex,\n            'handler' => $handler,\n            'middlewares' => self::$middlewares + self::$groupMiddlewares\n        ];\n        \n        self::$middlewares = [];\n    }\n    \n    /**\n     * Adiciona middleware a pr\u00f3xima rota\n     * \n     * @param mixed $middleware Classe ou fun\u00e7\u00e3o de middleware\n     * @return self\n     */\n    public static function middleware($middleware) {\n        self::$middlewares[] = $middleware;\n        return new self();\n    }\n    \n    /**\n     * Despacha a rota com base na URL atual\n     * \n     * @return mixed\n     * @throws \\Exception Se a rota n\u00e3o for encontrada\n     */\n    public static function dispatch() {\n        $uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n        $method = $_SERVER['REQUEST_METHOD'];\n        \n        // Verifica m\u00e9todo PUT/DELETE via _method em formul\u00e1rios\n        if ($method == 'POST' && isset($_POST['_method'])) {\n            $method = strtoupper($_POST['_method']);\n        }\n        \n        foreach (self::$routes as $route) {\n            if ($route['method'] !== $method) {\n                continue;\n            }\n            \n            if (preg_match($route['regex'], $uri, $matches)) {\n                // Remove \u00edndices num\u00e9ricos, mant\u00e9m apenas os nomeados\n                foreach ($matches as $key => $value) {\n                    if (is_int($key)) {\n                        unset($matches[$key]);\n                    }\n                }\n                \n                // Executa os middlewares\n                foreach ($route['middlewares'] as $middleware) {\n                    $response = self::executeMiddleware($middleware);\n                    if ($response) {\n                        return $response;\n                    }\n                }\n                \n                return self::executeHandler($route['handler'], $matches);\n            }\n        }\n        \n        throw new \\Exception(\"Rota n\u00e3o encontrada: $uri\", 404);\n    }\n    \n    /**\n     * Executa um middleware\n     * \n     * @param mixed $middleware Middleware a ser executado\n     * @return mixed|null\n     */\n    private static function executeMiddleware($middleware) {\n        if (is_callable($middleware)) {\n            return call_user_func($middleware);\n        }\n        \n        if (is_string($middleware)) {\n            $instance = new $middleware();\n            return $instance->handle();\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Executa o manipulador da rota\n     * \n     * @param mixed $handler Manipulador (controlador@m\u00e9todo ou callback)\n     * @param array $params Par\u00e2metros da URL\n     * @return mixed\n     * @throws \\Exception Se o controlador ou m\u00e9todo n\u00e3o existir\n     */\n    private static function executeHandler($handler, $params) {\n        if (is_callable($handler)) {\n            return call_user_func_array($handler, $params);\n        }\n        \n        if (is_string($handler)) {\n            $parts = explode('@', $handler);\n            \n            if (count($parts) !== 2) {\n                throw new \\Exception(\"Formato inv\u00e1lido de handler: $handler\", 500);\n            }\n            \n            $controllerName = $parts[0];\n            $methodName = $parts[1];\n            \n            if (!class_exists($controllerName)) {\n                throw new \\Exception(\"Controlador n\u00e3o encontrado: $controllerName\", 500);\n            }\n            \n            $controller = new $controllerName();\n            \n            if (!method_exists($controller, $methodName)) {\n                throw new \\Exception(\"M\u00e9todo n\u00e3o encontrado: $methodName em $controllerName\", 500);\n            }\n            \n            return call_user_func_array([$controller, $methodName], $params);\n        }\n        \n        throw new \\Exception(\"Handler inv\u00e1lido\", 500);\n    }\n}\n```\n\n## 2. Controlador Base (MVC)\n\n```php\n// File: core/Controller.php\n<?php\nnamespace RestauranteSaas\\Core;\n\nuse RestauranteSaas\\Core\\Response;\nuse RestauranteSaas\\Core\\View;\n\n/**\n * Controlador base para todos os controladores da aplica\u00e7\u00e3o\n */\nabstract class Controller\n{\n    /**\n     * Inst\u00e2ncia da view\n     * \n     * @var View\n     */\n    protected $view;\n    \n    /**\n     * Dados do tenant atual\n     * \n     * @var array|null\n     */\n    protected $currentTenant = null;\n    \n    /**\n     * Usu\u00e1rio autenticado\n     * \n     * @var array|null\n     */\n    protected $authUser = null;\n    \n    /**\n     * Construtor do controlador\n     */\n    public function __construct()\n    {\n        $this->view = new View();\n        $this->loadTenant();\n        $this->loadAuthUser();\n    }\n    \n    /**\n     * Carrega os dados do tenant atual\n     * \n     * @return void\n     */\n    protected function loadTenant()\n    {\n        $tenantResolver = new TenantResolver();\n        $this->currentTenant = $tenantResolver->getCurrentTenant();\n        \n        // Compartilha o tenant com todas as views\n        if ($this->currentTenant) {\n            $this->view->share('tenant', $this->currentTenant);\n        }\n    }\n    \n    /**\n     * Carrega os dados do usu\u00e1rio autenticado\n     * \n     * @return void\n     */\n    protected function loadAuthUser()\n    {\n        $auth = new Auth();\n        $this->authUser = $auth->getUser();\n        \n        // Compartilha o usu\u00e1rio com todas as views\n        if ($this->authUser) {\n            $this->view->share('user', $this->authUser);\n        }\n    }\n    \n    /**\n     * Renderiza uma view com os dados\n     * \n     * @param string $view Nome da view\n     * @param array $data Dados para a view\n     * @return string HTML renderizado\n     */\n    protected function view($view, $data = [])\n    {\n        return $this->view->render($view, $data);\n    }\n    \n    /**\n     * Retorna uma resposta JSON\n     * \n     * @param mixed $data Dados para resposta\n     * @param int $statusCode C\u00f3digo HTTP\n     * @param array $headers Cabe\u00e7alhos adicionais\n     * @return Response\n     */\n    protected function json($data, $statusCode = 200, $headers = [])\n    {\n        return Response::json($data, $statusCode, $headers);\n    }\n    \n    /**\n     * Retorna uma resposta de sucesso\n     * \n     * @param mixed $data Dados para resposta\n     * @param string $message Mensagem de sucesso\n     * @param int $statusCode C\u00f3digo HTTP\n     * @return Response\n     */\n    protected function success($data = null, $message = 'Opera\u00e7\u00e3o realizada com sucesso', $statusCode = 200)\n    {\n        return Response::success($data, $message, $statusCode);\n    }\n    \n    /**\n     * Retorna uma resposta de erro\n     * \n     * @param string $message Mensagem de erro\n     * @param int $statusCode C\u00f3digo HTTP\n     * @param mixed $errors Erros detalhados\n     * @return Response\n     */\n    protected function error($message = 'Erro ao realizar opera\u00e7\u00e3o', $statusCode = 400, $errors = null)\n    {\n        return Response::error($message, $statusCode, $errors);\n    }\n    \n    /**\n     * Redireciona para outra URL\n     * \n     * @param string $url URL de destino\n     * @param int $statusCode C\u00f3digo HTTP\n     * @return void\n     */\n    protected function redirect($url, $statusCode = 302)\n    {\n        header('Location: ' . $url, true, $statusCode);\n        exit;\n    }\n    \n    /**\n     * M\u00e9todo padr\u00e3o para listagem de recursos\n     * \n     * @return mixed\n     */\n    public function index()\n    {\n        return $this->error('M\u00e9todo n\u00e3o implementado', 501);\n    }\n    \n    /**\n     * M\u00e9todo padr\u00e3o para exibir um recurso\n     * \n     * @param int $id ID do recurso\n     * @return mixed\n     */\n    public function show($id)\n    {\n        return $this->error('M\u00e9todo n\u00e3o implementado', 501);\n    }\n    \n    /**\n     * M\u00e9todo padr\u00e3o para mostrar formul\u00e1rio de cria\u00e7\u00e3o\n     * \n     * @return mixed\n     */\n    public function create()\n    {\n        return $this->error('M\u00e9todo n\u00e3o implementado', 501);\n    }\n    \n    /**\n     * M\u00e9todo padr\u00e3o para salvar um novo recurso\n     * \n     * @return mixed\n     */\n    public function store()\n    {\n        return $this->error('M\u00e9todo n\u00e3o implementado', 501);\n    }\n    \n    /**\n     * M\u00e9todo padr\u00e3o para exibir formul\u00e1rio de edi\u00e7\u00e3o\n     * \n     * @param int $id ID do recurso\n     * @return mixed\n     */\n    public function edit($id)\n    {\n        return $this->error('M\u00e9todo n\u00e3o implementado', 501);\n    }\n    \n    /**\n     * M\u00e9todo padr\u00e3o para atualizar um recurso\n     * \n     * @param int $id ID do recurso\n     * @return mixed\n     */\n    public function update($id)\n    {\n        return $this->error('M\u00e9todo n\u00e3o implementado', 501);\n    }\n    \n    /**\n     * M\u00e9todo padr\u00e3o para excluir um recurso\n     * \n     * @param int $id ID do recurso\n     * @return mixed\n     */\n    public function destroy($id)\n    {\n        return $this->error('M\u00e9todo n\u00e3o implementado', 501);\n    }\n}\n```\n\n## 3. Sistema de Views (MVC)\n\n```php\n// File: core/View.php\n<?php\nnamespace RestauranteSaas\\Core;\n\n/**\n * Classe para gerenciar renderiza\u00e7\u00e3o de views\n */\nclass View\n{\n    /**\n     * Diret\u00f3rio base para as views\n     * \n     * @var string\n     */\n    private $viewsPath = '';\n    \n    /**\n     * Dados compartilhados com todas as views\n     * \n     * @var array\n     */\n    private $shared = [];\n    \n    /**\n     * Construtor\n     */\n    public function __construct()\n    {\n        $this->viewsPath = dirname(__DIR__) . '/views/';\n    }\n    \n    /**\n     * Compartilha dados com todas as views\n     * \n     * @param string $key Nome da vari\u00e1vel\n     * @param mixed $value Valor da vari\u00e1vel\n     * @return self\n     */\n    public function share($key, $value)\n    {\n        $this->shared[$key] = $value;\n        return $this;\n    }\n    \n    /**\n     * Renderiza uma view com os dados\n     * \n     * @param string $view Nome da view\n     * @param array $data Dados para a view\n     * @return string HTML renderizado\n     * @throws \\Exception Se a view n\u00e3o existir\n     */\n    public function render($view, $data = [])\n    {\n        // Combina dados compartilhados com dados espec\u00edficos da view\n        $data = array_merge($this->shared, $data);\n        \n        // Substitui pontos por barras no nome da view\n        $viewPath = str_replace('.', '/', $view);\n        $fullPath = $this->viewsPath . $viewPath . '.php';\n        \n        if (!file_exists($fullPath)) {\n            throw new \\Exception(\"View n\u00e3o encontrada: $view\");\n        }\n        \n        // Extrai vari\u00e1veis para o escopo da view\n        extract($data);\n        \n        // Captura sa\u00edda em buffer\n        ob_start();\n        include $fullPath;\n        $content = ob_get_clean();\n        \n        return $content;\n    }\n    \n    /**\n     * Inclui um componente de UI\n     * \n     * @param string $component Nome do componente\n     * @param array $data Dados para o componente\n     * @return string HTML do componente\n     */\n    public function component($component, $data = [])\n    {\n        $componentPath = $this->viewsPath . 'components/' . $component . '.php';\n        \n        if (!file_exists($componentPath)) {\n            return \"<!-- Componente n\u00e3o encontrado: $component -->\";\n        }\n        \n        // Combina dados compartilhados com dados espec\u00edficos do componente\n        $data = array_merge($this->shared, $data);\n        \n        // Extrai vari\u00e1veis para o escopo do componente\n        extract($data);\n        \n        // Captura sa\u00edda em buffer\n        ob_start();\n        include $componentPath;\n        return ob_get_clean();\n    }\n    \n    /**\n     * Estende um layout\n     * \n     * @param string $layout Nome do layout\n     * @param callable $callback Fun\u00e7\u00e3o para definir se\u00e7\u00f5es\n     * @return string HTML com layout aplicado\n     */\n    public function extend($layout, $callback)\n    {\n        $sections = [];\n        \n        // Fun\u00e7\u00e3o para definir conte\u00fado de uma se\u00e7\u00e3o\n        $setSection = function($name, $content) use (&$sections) {\n            $sections[$name] = $content;\n        };\n        \n        // Permite que o callback defina as se\u00e7\u00f5es\n        call_user_func($callback, $setSection);\n        \n        // Fun\u00e7\u00e3o que ser\u00e1 dispon\u00edvel no layout para renderizar uma se\u00e7\u00e3o\n        $renderSection = function($name, $default = '') use ($sections) {\n            return isset($sections[$name]) ? $sections[$name] : $default;\n        };\n        \n        // Renderiza o layout com as se\u00e7\u00f5es\n        $layoutPath = $this->viewsPath . 'layouts/' . $layout . '.php';\n        \n        if (!file_exists($layoutPath)) {\n            throw new \\Exception(\"Layout n\u00e3o encontrado: $layout\");\n        }\n        \n        ob_start();\n        include $layoutPath;\n        return ob_get_clean();\n    }\n}\n```\n\n## 4. Classe de Resposta para API REST\n\n```php\n// File: core/Response.php\n<?php\nnamespace RestauranteSaas\\Core;\n\n/**\n * Classe para gerenciar respostas da API\n */\nclass Response\n{\n    /**\n     * Retorna uma resposta JSON\n     * \n     * @param mixed $data Dados da resposta\n     * @param int $statusCode C\u00f3digo HTTP\n     * @param array $headers Cabe\u00e7alhos adicionais\n     * @return self\n     */\n    public static function json($data, $statusCode = 200, $headers = [])\n    {\n        // Define c\u00f3digo de status HTTP\n        http_response_code($statusCode);\n        \n        // Define cabe\u00e7alhos para JSON\n        header('Content-Type: application/json; charset=utf-8');\n        \n        // Define cabe\u00e7alhos adicionais\n        foreach ($headers as $name => $value) {\n            header(\"$name: $value\");\n        }\n        \n        // Retorna JSON\n        echo json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);\n        exit;\n    }\n    \n    /**\n     * Retorna uma resposta de sucesso\n     * \n     * @param mixed $data Dados da resposta\n     * @param string $message Mensagem de sucesso\n     * @param int $statusCode C\u00f3digo HTTP\n     * @return self\n     */\n    public static function success($data = null, $message = 'Opera\u00e7\u00e3o realizada com sucesso', $statusCode = 200)\n    {\n        return self::json([\n            'status' => 'success',\n            'message' => $message,\n            'data' => $data\n        ], $statusCode);\n    }\n    \n    /**\n     * Retorna uma resposta de erro\n     * \n     * @param string $message Mensagem de erro\n     * @param int $statusCode C\u00f3digo HTTP\n     * @param mixed $errors Erros detalhados\n     * @return self\n     */\n    public static function error($message = 'Erro ao realizar opera\u00e7\u00e3o', $statusCode = 400, $errors = null)\n    {\n        $response = [\n            'status' => 'error',\n            'message' => $message\n        ];\n        \n        if ($errors !== null) {\n            $response['errors'] = $errors;\n        }\n        \n        return self::json($response, $statusCode);\n    }\n    \n    /**\n     * Retorna uma resposta de redirecionamento\n     * \n     * @param string $url URL de destino\n     * @param int $statusCode C\u00f3digo HTTP\n     * @return void\n     */\n    public static function redirect($url, $statusCode = 302)\n    {\n        header('Location: ' . $url, true, $statusCode);\n        exit;\n    }\n    \n    /**\n     * Retorna uma p\u00e1gina HTML\n     * \n     * @param string $html Conte\u00fado HTML\n     * @param int $statusCode C\u00f3digo HTTP\n     * @return void\n     */\n    public static function html($html, $statusCode = 200)\n    {\n        http_response_code($statusCode);\n        header('Content-Type: text/html; charset=utf-8');\n        echo $html;\n        exit;\n    }\n    \n    /**\n     * Retorna conte\u00fado como download\n     * \n     * @param string $content Conte\u00fado do arquivo\n     * @param string $filename Nome do arquivo\n     * @param string $contentType Tipo MIME\n     * @return void\n     */\n    public static function download($content, $filename, $contentType = 'application/octet-stream')\n    {\n        header('Content-Type: ' . $contentType);\n        header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n        header('Content-Length: ' . strlen($content));\n        header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');\n        header('Cache-Control: post-check=0, pre-check=0', false);\n        header('Pragma: no-cache');\n        \n        echo $content;\n        exit;\n    }\n}\n```\n\n## 5. Tratamento de Erros e Exce\u00e7\u00f5es\n\n```php\n// File: core/ErrorHandler.php\n<?php\nnamespace RestauranteSaas\\Core;\n\nuse RestauranteSaas\\Core\\Logger;\nuse RestauranteSaas\\Core\\Response;\n\n/**\n * Gerenciador de erros e exce\u00e7\u00f5es\n */\nclass ErrorHandler\n{\n    /**\n     * Registra os handlers de erro\n     * \n     * @return void\n     */\n    public static function register()\n    {\n        // Registra handler de exce\u00e7\u00f5es\n        set_exception_handler([self::class, 'handleException']);\n        \n        // Registra handler de erros PHP\n        set_error_handler([self::class, 'handleError']);\n        \n        // Registra handler para erros fatais\n        register_shutdown_function([self::class, 'handleShutdown']);\n    }\n    \n    /**\n     * Handler de exce\u00e7\u00f5es\n     * \n     * @param \\Throwable $exception Exce\u00e7\u00e3o capturada\n     * @return void\n     */\n    public static function handleException($exception)\n    {\n        $logger = new Logger();\n        \n        // Registra exce\u00e7\u00e3o no log\n        $logger->error('Exce\u00e7\u00e3o: ' . $exception->getMessage(), [\n            'file' => $exception->getFile(),\n            'line' => $exception->getLine(),\n            'trace' => $exception->getTraceAsString()\n        ]);\n        \n        $statusCode = $exception->getCode() >= 100 && $exception->getCode() < 600 \n            ? $exception->getCode() : 500;\n        \n        // Em ambiente de produ\u00e7\u00e3o, n\u00e3o mostra detalhes do erro\n        $isProduction = Config::get('app.environment') === 'production';\n        \n        if ($isProduction) {\n            return self::renderErrorResponse($statusCode, 'Um erro ocorreu no servidor.');\n        }\n        \n        // Em outros ambientes, mostra detalhes para debug\n        return self::renderErrorResponse($statusCode, $exception->getMessage(), [\n            'file' => $exception->getFile(),\n            'line' => $exception->getLine(),\n            'trace' => explode(\"\\n\", $exception->getTraceAsString())\n        ]);\n    }\n    \n    /**\n     * Handler de erros PHP\n     * \n     * @param int $level N\u00edvel de erro\n     * @param string $message Mensagem de erro\n     * @param string $file Arquivo onde ocorreu\n     * @param int $line Linha onde ocorreu\n     * @return bool\n     */\n    public static function handleError($level, $message, $file, $line)\n    {\n        // Verifica se o erro est\u00e1 sendo ignorado pelo @ no c\u00f3digo\n        if (error_reporting() === 0) {\n            return false;\n        }\n        \n        // Converte erros em exce\u00e7\u00f5es\n        throw new \\ErrorException($message, 0, $level, $file, $line);\n    }\n    \n    /**\n     * Handler para erros fatais durante shutdown\n     * \n     * @return void\n     */\n    public static function handleShutdown()\n    {\n        $error = error_get_last();\n        \n        if ($error !== null && in_array($error['type'], [E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR])) {\n            $logger = new Logger();\n            \n            // Registra erro fatal no log\n            $logger->critical('Erro fatal: ' . $error['message'], [\n                'file' => $error['file'],\n                'line' => $error['line']\n            ]);\n            \n            // Em ambiente de produ\u00e7\u00e3o, n\u00e3o mostra detalhes do erro\n            $isProduction = Config::get('app.environment') === 'production';\n            \n            if ($isProduction) {\n                return self::renderErrorResponse(500, 'Um erro fatal ocorreu no servidor.');\n            }\n            \n            // Em outros ambientes, mostra detalhes para debug\n            return self::renderErrorResponse(500, $error['message'], [\n                'file' => $error['file'],\n                'line' => $error['line']\n            ]);\n        }\n    }\n    \n    /**\n     * Renderiza resposta de erro em formato adequado\n     * \n     * @param int $statusCode C\u00f3digo HTTP\n     * @param string $message Mensagem de erro\n     * @param array $details Detalhes adicionais\n     * @return void\n     */\n    private static function renderErrorResponse($statusCode, $message, $details = null)\n    {\n        // Verifica se a requisi\u00e7\u00e3o espera JSON\n        $isAjax = !empty($_SERVER['HTTP_X_REQUESTED_WITH']) && \n            strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest';\n        \n        $acceptHeader = isset($_SERVER['HTTP_ACCEPT']) ? $_SERVER['HTTP_ACCEPT'] : '';\n        $wantsJson = $isAjax || strpos($acceptHeader, 'application/json') !== false;\n        \n        if ($wantsJson) {\n            return Response::error($message, $statusCode, $details);\n        }\n        \n        // Caso contr\u00e1rio, renderiza p\u00e1gina HTML de erro\n        $view = new View();\n        try {\n            $html = $view->render('errors.' . $statusCode, [\n                'message' => $message,\n                'details' => $details\n            ]);\n        } catch (\\Exception $e) {\n            // Fallback para p\u00e1gina de erro gen\u00e9rica\n            try {\n                $html = $view->render('errors.default', [\n                    'statusCode' => $statusCode,\n                    'message' => $message,\n                    'details' => $details\n                ]);\n            } catch (\\Exception $e) {\n                // \u00daltimo recurso: HTML simples\n                $html = self::getBasicErrorHtml($statusCode, $message, $details);\n            }\n        }\n        \n        Response::html($html, $statusCode);\n    }\n    \n    /**\n     * Gera HTML b\u00e1sico para erro quando view n\u00e3o est\u00e1 dispon\u00edvel\n     * \n     * @param int $statusCode C\u00f3digo HTTP\n     * @param string $message Mensagem de erro\n     * @param array $details Detalhes adicionais\n     * @return string\n     */\n    private static function getBasicErrorHtml($statusCode, $message, $details = null)\n    {\n        $html = '<!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Erro '.$statusCode.'</title>\n            <style>\n                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }\n                h1 { color: #e74c3c; border-bottom: 1px solid #eee; padding-bottom: 10px; }\n                .details { background: #f8f9fa; padding: 15px; border-radius: 4px; margin-top: 20px; }\n                .details pre { margin: 0; overflow-x: auto; }\n            </style>\n        </head>\n        <body>\n            <h1>Erro '.$statusCode.'</h1>\n            <p>'.$message.'</p>';\n            \n        if ($details && Config::get('app.environment') !== 'production') {\n            $html .= '<div class=\"details\">\n                <h3>Detalhes do erro:</h3>\n                <p>Arquivo: '.$details['file'].'</p>\n                <p>Linha: '.$details['line'].'</p>';\n                \n            if (isset($details['trace'])) {\n                $html .= '<h3>Stack Trace:</h3>\n                <pre>'.implode(\"\\n\", (array)$details['trace']).'</pre>';\n            }\n            \n            $html .= '</div>';\n        }\n        \n        $html .= '</body></html>';\n        \n        return $html;\n    }\n}\n```\n\n## 6. Sistema de Logs\n\n```php\n// File: core/Logger.php\n<?php\nnamespace RestauranteSaas\\Core;\n\n/**\n * Classe para logging de eventos do sistema\n */\nclass Logger\n{\n    /**\n     * N\u00edveis de log\n     */\n    const EMERGENCY = 'emergency';\n    const ALERT     = 'alert';\n    const CRITICAL  = 'critical';\n    const ERROR     = 'error';\n    const WARNING   = 'warning';\n    const NOTICE    = 'notice';\n    const INFO      = 'info';\n    const DEBUG     = 'debug';\n    \n    /**\n     * Diret\u00f3rio para os logs\n     * \n     * @var string\n     */\n    private $logPath;\n    \n    /**\n     * N\u00edvel m\u00ednimo de log\n     * \n     * @var string\n     */\n    private $minimumLevel;\n    \n    /**\n     * Tenant atual\n     * \n     * @var int|null\n     */\n    private $tenantId;\n    \n    /**\n     * Usu\u00e1rio atual\n     * \n     * @var int|null\n     */\n    private $userId;\n    \n    /**\n     * Construtor\n     */\n    public function __construct()\n    {\n        $this->logPath = Config::get('app.log_path', dirname(__DIR__) . '/logs');\n        $this->minimumLevel = Config::get('app.log_level', self::DEBUG);\n        \n        // Garante que o diret\u00f3rio de logs existe\n        if (!is_dir($this->logPath)) {\n            mkdir($this->logPath, 0755, true);\n        }\n        \n        // Tenta obter informa\u00e7\u00f5es de tenant e usu\u00e1rio do contexto atual\n        $this->loadContext();\n    }\n    \n    /**\n     * Carrega o contexto atual (tenant e usu\u00e1rio)\n     * \n     * @return void\n     */\n    private function loadContext()\n    {\n        // Tenta obter tenant do contexto atual\n        if (isset($_SESSION['tenant_id'])) {\n            $this->tenantId = $_SESSION['tenant_id'];\n        }\n        \n        // Tenta obter usu\u00e1rio do contexto atual\n        if (isset($_SESSION['user_id'])) {\n            $this->userId = $_SESSION['user_id'];\n        }\n    }\n    \n    /**\n     * Define o tenant para o log\n     * \n     * @param int $tenantId ID do tenant\n     * @return self\n     */\n    public function forTenant($tenantId)\n    {\n        $this->tenantId = $tenantId;\n        return $this;\n    }\n    \n    /**\n     * Define o usu\u00e1rio para o log\n     * \n     * @param int $userId ID do usu\u00e1rio\n     * @return self\n     */\n    public function forUser($userId)\n    {\n        $this->userId = $userId;\n        return $this;\n    }\n    \n    /**\n     * Registra uma mensagem de log\n     * \n     * @param string $level N\u00edvel do log\n     * @param string $message Mensagem\n     * @param array $context Dados adicionais\n     * @return bool\n     */\n    public function log($level, $message, array $context = [])\n    {\n        // Verifica se este n\u00edvel deve ser registrado\n        if (!$this->shouldLog($level)) {\n            return false;\n        }\n        \n        // Formata a mensagem com contexto\n        $message = $this->interpolate($message, $context);\n        \n        // Obt\u00e9m informa\u00e7\u00f5es do cliente\n        $ip = $_SERVER['REMOTE_ADDR'] ?? '-';\n        $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? '-';\n        $requestMethod = $_SERVER['REQUEST_METHOD'] ?? '-';\n        $requestUri = $_SERVER['REQUEST_URI'] ?? '-';\n        \n        // Formata a entrada de log\n        $logEntry = [\n            'timestamp' => date('Y-m-d H:i:s'),\n            'level' => strtoupper($level),\n            'tenant_id' => $this->tenantId ?: '-',\n            'user_id' => $this->userId ?: '-',\n            'ip' => $ip,\n            'message' => $message,\n            'request' => \"$requestMethod $requestUri\",\n            'user_agent' => $userAgent\n        ];\n        \n        // Adiciona contexto se existir\n        if (!empty($context)) {\n            $logEntry['context'] = $context;\n        }\n        \n        // Converte para JSON\n        $jsonEntry = json_encode($logEntry, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);\n        \n        // Define o arquivo de log\n        $filename = $this->getLogFilename($level);\n        \n        // Escreve no arquivo\n        return file_put_contents(\n            $filename, \n            $jsonEntry . PHP_EOL,\n            FILE_APPEND | LOCK_EX\n        ) !== false;\n    }\n    \n    /**\n     * Verifica se o n\u00edvel de log deve ser registrado\n     * \n     * @param string $level N\u00edvel de log\n     * @return bool\n     */\n    private function shouldLog($level)\n    {\n        $levels = [\n            self::DEBUG,\n            self::INFO,\n            self::NOTICE,\n            self::WARNING,\n            self::ERROR,\n            self::CRITICAL,\n            self::ALERT,\n            self::EMERGENCY\n        ];\n        \n        return array_search($level, $levels) >= array_search($this->minimumLevel, $levels);\n    }\n    \n    /**\n     * Obt\u00e9m o nome do arquivo de log\n     * \n     * @param string $level N\u00edvel de log\n     * @return string\n     */\n    private function getLogFilename($level)\n    {\n        $date = date('Y-m-d');\n        \n        // Agrupa erros mais graves em um arquivo e os demais em outro\n        if (in_array($level, [self::ERROR, self::CRITICAL, self::ALERT, self::EMERGENCY])) {\n            return $this->logPath . \"/error-$date.log\";\n        }\n        \n        return $this->logPath . \"/app-$date.log\";\n    }\n    \n    /**\n     * Interpola a mensagem com os dados do contexto\n     * \n     * @param string $message Mensagem com placeholders\n     * @param array $context Dados para substitui\u00e7\u00e3o\n     * @return string\n     */\n    private function interpolate($message, array $context = [])\n    {\n        // Constr\u00f3i um array de substitui\u00e7\u00e3o com chaves entre chaves\n        $replace = [];\n        \n        foreach ($context as $key => $val) {\n            // Ignora objetos n\u00e3o stringific\u00e1veis\n            if (is_object($val) && !method_exists($val, '__toString')) {\n                continue;\n            }\n            \n            // Converte arrays para JSON\n            if (is_array($val)) {\n                $val = json_encode($val);\n            }\n            \n            $replace['{' . $key . '}'] = $val;\n        }\n        \n        // Substitui na mensagem\n        return strtr($message, $replace);\n    }\n    \n    /**\n     * Registra uma mensagem de debug\n     * \n     * @param string $message Mensagem\n     * @param array $context Dados adicionais\n     * @return bool\n     */\n    public function debug($message, array $context = [])\n    {\n        return $this->log(self::DEBUG, $message, $context);\n    }\n    \n    /**\n     * Registra uma mensagem informativa\n     * \n     * @param string $message Mensagem\n     * @param array $context Dados adicionais\n     * @return bool\n     */\n    public function info($message, array $context = [])\n    {\n        return $this->log(self::INFO, $message, $context);\n    }\n    \n    /**\n     * Registra uma notifica\u00e7\u00e3o\n     * \n     * @param string $message Mensagem\n     * @param array $context Dados adicionais\n     * @return bool\n     */\n    public function notice($message, array $context = [])\n    {\n        return $this->log(self::NOTICE, $message, $context);\n    }\n    \n    /**\n     * Registra um aviso\n     * \n     * @param string $message Mensagem\n     * @param array $context Dados adicionais\n     * @return bool\n     */\n    public function warning($message, array $context = [])\n    {\n        return $this->log(self::WARNING, $message, $context);\n    }\n    \n    /**\n     * Registra um erro\n     * \n     * @param string $message Mensagem\n     * @param array $context Dados adicionais\n     * @return bool\n     */\n    public function error($message, array $context = [])\n    {\n        return $this->log(self::ERROR, $message, $context);\n    }\n    \n    /**\n     * Registra um erro cr\u00edtico\n     * \n     * @param string $message Mensagem\n     * @param array $context Dados adicionais\n     * @return bool\n     */\n    public function critical($message, array $context = [])\n    {\n        return $this->log(self::CRITICAL, $message, $context);\n    }",
                "tokens_used": 50624,
                "response_time": 118.05
            },
            {
                "id": "5b74d247f381b01f47dac2adfd39afd1",
                "timestamp": "2025-03-17T23:06:54.296803",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\n\n\n# Projeto Completo - Sistema de Gest\u00e3o de Restaurantes SaaS\n\n## 1. Tecnologias que devem ser usadas\n\nHTML,CSS,Javascript,PHP, mysql essa aplica\u00e7ao dever ser feita em web apenas\n\n## 1. Vis\u00e3o Geral do Projeto\n\n### 1.1 Descri\u00e7\u00e3o do Projeto\n\nO projeto consiste em um sistema de gest\u00e3o de restaurantes oferecido como servi\u00e7o por assinatura (SaaS - Software as a Service). O sistema atende a diversos tipos de estabelecimentos (\u00e0 la carte, fast food, pizzaria, rod\u00edzio, etc.) com funcionalidades adaptadas para cada modelo de neg\u00f3cio, permitindo opera\u00e7\u00f5es atrav\u00e9s de QR Code ou atendimento tradicional com gar\u00e7ons.\n\n### 1.2 Objetivos Principais\n\n1. Oferecer um sistema completo e personaliz\u00e1vel para gest\u00e3o de restaurantes\n2. Permitir flexibilidade para diferentes modelos de neg\u00f3cio\n3. Implementar uma estrutura escal\u00e1vel baseada em assinaturas\n4. Garantir uma experi\u00eancia otimizada tanto para restaurantes quanto para clientes finais\n5. Proporcionar integra\u00e7\u00e3o com servi\u00e7os externos (Stripe, iFood, etc.)\n\n### 1.3 P\u00fablico-Alvo\n\n- Restaurantes tradicionais \u00e0 la carte\n- Fast-foods e lanchonetes\n- Pizzarias e delivery\n- Rod\u00edzios e buf\u00eas\n- Bares e pubs\n- Food trucks\n- Redes de restaurantes\n\n### 1.4 Proposta de Valor\n\n- Redu\u00e7\u00e3o de custos operacionais\n- Aumento da efici\u00eancia no atendimento\n- Melhoria da experi\u00eancia do cliente\n- Maior controle financeiro e operacional\n- Insights de neg\u00f3cio baseados em dados\n- Flexibilidade para diferentes modelos e tamanhos de opera\u00e7\u00e3o\n\n## 2. Arquitetura do Sistema\n\n### 2.1 Vis\u00e3o Geral da Arquitetura\n\nO sistema utiliza uma arquitetura de tr\u00eas camadas:\n\n1. **Camada de Apresenta\u00e7\u00e3o**: Interfaces web e mobile para diferentes perfis de usu\u00e1rio\n2. **Camada de Aplica\u00e7\u00e3o**: L\u00f3gica de neg\u00f3cio, processamento e servi\u00e7os\n3. **Camada de Dados**: Persist\u00eancia e gerenciamento de dados\n\n### 2.2 Modelo Multi-Tenant\n\nO sistema \u00e9 constru\u00eddo com arquitetura multi-tenant, onde m\u00faltiplos restaurantes (tenants) compartilham a mesma infraestrutura, mas com dados completamente isolados:\n\n- Cada tenant possui um identificador \u00fanico\n- Todas as opera\u00e7\u00f5es de banco de dados incluem filtro por tenant\n- Recursos s\u00e3o alocados conforme o plano de assinatura\n- Backups s\u00e3o individualizados por tenant\n\n### 2.3 Infraestrutura de Nuvem\n\nA plataforma ser\u00e1 hospedada em infraestrutura de nuvem para garantir:\n\n- Alta disponibilidade (99.9+%)\n- Escalabilidade horizontal e vertical\n- Balanceamento de carga\n- Backups automatizados\n- Recupera\u00e7\u00e3o de desastres\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n\n### 2.4 Integra\u00e7\u00f5es Externas\n\nO sistema se integrar\u00e1 com diversos servi\u00e7os externos:\n\n- Stripe para processamento de pagamentos e assinaturas\n- iFood e outras plataformas de delivery\n- Sistemas fiscais e emiss\u00e3o de notas\n- Servi\u00e7os de email e SMS\n- Gateways de pagamento para opera\u00e7\u00f5es do restaurante\n\n## 3. Implementa\u00e7\u00e3o da Plataforma SaaS\n\n### 3.1 Sistema de Assinaturas\n\n#### 3.1.1 Estrutura de Planos\n\nImplementa\u00e7\u00e3o de diferentes n\u00edveis de planos:\n\n- **Plano B\u00e1sico**: Funcionalidades essenciais para pequenos estabelecimentos\n- **Plano Padr\u00e3o**: Recursos intermedi\u00e1rios para m\u00e9dios restaurantes\n- **Plano Premium**: Funcionalidades completas para grandes opera\u00e7\u00f5es\n- **Plano Enterprise**: Solu\u00e7\u00f5es personalizadas para redes e franquias\n\n#### 3.1.2 Gerenciamento de Assinaturas\n\nDesenvolvimento do fluxo completo de gest\u00e3o de assinaturas:\n\n- Cadastro e onboarding\n- Per\u00edodo de teste gratuito\n- Convers\u00e3o para assinatura paga\n- Gest\u00e3o de m\u00e9todos de pagamento\n- Renova\u00e7\u00f5es autom\u00e1ticas\n- Upgrades e downgrades de plano\n- Cancelamentos e reten\u00e7\u00e3o\n\n#### 3.1.3 Integra\u00e7\u00e3o com Stripe\n\nImplementa\u00e7\u00e3o da integra\u00e7\u00e3o completa com a API do Stripe:\n\n- Cria\u00e7\u00e3o de produtos e planos no Stripe\n- Processamento de pagamentos recorrentes\n- Gest\u00e3o de cart\u00f5es e m\u00e9todos de pagamento\n- Webhooks para eventos de pagamento\n- Tratamento de falhas e disputas\n- Gera\u00e7\u00e3o de faturas e recibos\n\n#### 3.1.4 Controle de Limites e Recursos\n\nDesenvolvimento de mecanismos para controlar a utiliza\u00e7\u00e3o conforme o plano:\n\n- Verifica\u00e7\u00e3o de limites (mesas, usu\u00e1rios, etc.)\n- Monitoramento de uso de recursos\n- Notifica\u00e7\u00f5es de limite pr\u00f3ximo\n- Op\u00e7\u00f5es de upgrade quando necess\u00e1rio\n- Controle de acesso a m\u00f3dulos premium\n\n### 3.2 Portal Administrativo\n\n#### 3.2.1 Gest\u00e3o de Clientes\n\nCria\u00e7\u00e3o de interfaces para administradores da plataforma:\n\n- Dashboard de clientes ativos\n- Detalhes de conta e consumo\n- Hist\u00f3rico de pagamentos\n- Ferramentas de suporte\n- A\u00e7\u00f5es administrativas (suspender, cancelar, etc.)\n\n#### 3.2.2 Relat\u00f3rios e Analytics\n\nImplementa\u00e7\u00e3o de ferramentas de an\u00e1lise para a opera\u00e7\u00e3o SaaS:\n\n- M\u00e9tricas de aquisi\u00e7\u00e3o de clientes\n- Taxas de convers\u00e3o e reten\u00e7\u00e3o\n- Receita recorrente mensal (MRR)\n- Valor do tempo de vida do cliente (LTV)\n- Custos de aquisi\u00e7\u00e3o de cliente (CAC)\n- Churn e renova\u00e7\u00f5es\n\n#### 3.2.3 Sistema de Suporte\n\nDesenvolvimento de ferramentas para atendimento ao cliente:\n\n- Sistema de tickets\n- Base de conhecimento\n- Chat ao vivo\n- Suporte por email\n- Escalamento para diferentes n\u00edveis\n- M\u00e9tricas de satisfa\u00e7\u00e3o e tempo de resposta\n\n## 4. Implementa\u00e7\u00e3o do Sistema de Gest\u00e3o de Restaurantes\n\n### 4.1 Personaliza\u00e7\u00e3o por Tipo de Restaurante\n\n#### 4.1.1 Onboarding e Configura\u00e7\u00e3o\n\nCria\u00e7\u00e3o do processo de configura\u00e7\u00e3o inicial:\n\n- Sele\u00e7\u00e3o do tipo de restaurante\n- Compara\u00e7\u00e3o entre tipos\n- Configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas\n- Setup inicial de mesas e ambiente\n- Cadastro de card\u00e1pio inicial\n- Configura\u00e7\u00e3o de funcion\u00e1rios e acessos\n\n#### 4.1.2 Interfaces Espec\u00edficas\n\nDesenvolvimento de interfaces adaptadas para cada tipo:\n\n- \u00c0 la carte: Foco em mesas e reservas\n- Fast Food: Foco em fila de pedidos e agilidade\n- Pizzaria: Construtor de pizza meio a meio\n- Rod\u00edzio: Controle de passadas e tempos\n- Delivery: Rastreamento e rotas\n- Self-service: Integra\u00e7\u00e3o com balan\u00e7as\n- Food Truck: Interface simplificada e mobile-first\n\n#### 4.1.3 Fluxos de Trabalho Personalizados\n\nImplementa\u00e7\u00e3o de fluxos adaptados para cada modelo:\n\n- L\u00f3gica de neg\u00f3cio espec\u00edfica por tipo\n- Regras de prioriza\u00e7\u00e3o de pedidos\n- Controles especializados (forno, passadas, pesagem)\n- Relat\u00f3rios e m\u00e9tricas relevantes para cada modelo\n\n### 4.2 M\u00f3dulo de Comandas e Pedidos\n\n#### 4.2.1 Gest\u00e3o de Mesas\n\nDesenvolvimento do sistema de controle de mesas:\n\n- Mapa visual de mesas\n- Status em tempo real\n- Controle de ocupa\u00e7\u00e3o\n- Timer de perman\u00eancia\n- Hist\u00f3rico de uso\n\n#### 4.2.2 Sistema de Pedidos\n\nImplementa\u00e7\u00e3o do fluxo completo de pedidos:\n\n- Registro de pedidos (via QR Code e gar\u00e7om)\n- Modifica\u00e7\u00f5es e adi\u00e7\u00f5es\n- Encaminhamento para cozinha\n- Notifica\u00e7\u00f5es de status\n- Fechamento e pagamento\n\n#### 4.2.3 QR Code para Clientes\n\nDesenvolvimento da experi\u00eancia de pedido via QR Code:\n\n- Gera\u00e7\u00e3o de QR Codes para mesas\n- Interface adaptada para mobile\n- Registro de dados do cliente\n- Card\u00e1pio digital interativo\n- Carrinho de pedidos\n- Solicita\u00e7\u00e3o de atendimento\n- Pagamento pelo smartphone\n\n#### 4.2.4 Divis\u00e3o de Contas\n\nImplementa\u00e7\u00e3o de mecanismos para divis\u00e3o de contas:\n\n- Divis\u00e3o por item\n- Divis\u00e3o igual entre participantes\n- Divis\u00e3o percentual\n- M\u00faltiplos pagamentos\n- Contas parciais\n\n### 4.3 M\u00f3dulo de Cozinha\n\n#### 4.3.1 Painel de Produ\u00e7\u00e3o\n\nDesenvolvimento da interface para cozinha:\n\n- Fila de pedidos em tempo real\n- Classifica\u00e7\u00e3o por prioridade\n- Temporizadores de preparo\n- Status visual por pedido\n- Alertas para pedidos atrasados\n\n#### 4.3.2 Gest\u00e3o de Estoque\n\nImplementa\u00e7\u00e3o do controle de estoque integrado:\n\n- Cadastro de ingredientes e insumos\n- Abate autom\u00e1tico do estoque\n- Alertas de estoque baixo\n- Previs\u00e3o de necessidade\n- Pedidos autom\u00e1ticos\n\n#### 4.3.3 Controles Espec\u00edficos\n\nCria\u00e7\u00e3o de funcionalidades especializadas:\n\n- Temporizadores para forno\n- Controle de passadas para rod\u00edzio\n- Separa\u00e7\u00e3o de delivery e local\n- Alertas para al\u00e9rgenos\n\n### 4.4 M\u00f3dulo de Pagamentos\n\n#### 4.4.1 Processamento de Pagamentos\n\nImplementa\u00e7\u00e3o dos fluxos de pagamento:\n\n- Integra\u00e7\u00e3o com Stripe para pagamentos\n- Suporte a cart\u00f5es de cr\u00e9dito/d\u00e9bito\n- Pagamentos via PIX\n- Dinheiro e outras formas locais\n- Concilia\u00e7\u00e3o financeira\n\n#### 4.4.2 Fechamento de Caixa\n\nDesenvolvimento do processo de fechamento:\n\n- Abertura e fechamento de caixa\n- Registro de entradas e sa\u00eddas\n- Contagem f\u00edsica\n- Detec\u00e7\u00e3o de diferen\u00e7as\n- Relat\u00f3rio de fechamento\n\n#### 4.4.3 Emiss\u00e3o de Comprovantes\n\nImplementa\u00e7\u00e3o da gera\u00e7\u00e3o de documentos:\n\n- Recibos digitais\n- Envio por email ou WhatsApp\n- Integra\u00e7\u00e3o com sistemas fiscais\n- Armazenamento de comprovantes\n\n### 4.5 M\u00f3dulo de Funcion\u00e1rios\n\n#### 4.5.1 Controle de Acesso\n\nDesenvolvimento do sistema de acesso:\n\n- Cadastro de funcion\u00e1rios\n- Perfis de permiss\u00e3o\n- Autentica\u00e7\u00e3o segura\n- Registro de atividades\n- Pol\u00edticas de seguran\u00e7a\n\n#### 4.5.2 Registro de Ponto\n\nImplementa\u00e7\u00e3o do controle de ponto:\n\n- Registro de entrada e sa\u00edda\n- Valida\u00e7\u00e3o por localiza\u00e7\u00e3o\n- C\u00e1lculo de horas trabalhadas\n- Controle de intervalos\n- Exporta\u00e7\u00e3o para folha de pagamento\n\n#### 4.5.3 Desempenho e Comiss\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para gest\u00e3o de desempenho:\n\n- M\u00e9tricas por funcion\u00e1rio\n- C\u00e1lculo de comiss\u00f5es\n- Avalia\u00e7\u00e3o de desempenho\n- Classifica\u00e7\u00e3o por objetivos\n- Feedback e desenvolvimento\n\n### 4.6 M\u00f3dulo de Fornecedores\n\n#### 4.6.1 Cadastro e Gest\u00e3o\n\nImplementa\u00e7\u00e3o do gerenciamento de fornecedores:\n\n- Cadastro detalhado de fornecedores\n- Categoriza\u00e7\u00e3o por tipo de produto\n- Condi\u00e7\u00f5es comerciais\n- Contatos de emerg\u00eancia\n- Avalia\u00e7\u00e3o de desempenho\n\n#### 4.6.2 Pedidos e Reposi\u00e7\u00e3o\n\nDesenvolvimento do fluxo de compras:\n\n- Pedidos r\u00e1pidos\n- Sugest\u00e3o autom\u00e1tica de reposi\u00e7\u00e3o\n- Aprova\u00e7\u00e3o de pedidos\n- Acompanhamento de entrega\n- Recebimento e confer\u00eancia\n\n#### 4.6.3 Hist\u00f3rico e Avalia\u00e7\u00e3o\n\nCria\u00e7\u00e3o de ferramentas para an\u00e1lise de fornecedores:\n\n- Hist\u00f3rico de pedidos\n- Cumprimento de prazos\n- Qualidade de produtos\n- Competitividade de pre\u00e7os\n- Ranking de fornecedores\n\n### 4.7 M\u00f3dulo de Relat\u00f3rios\n\n#### 4.7.1 Relat\u00f3rios Operacionais\n\nImplementa\u00e7\u00e3o de relat\u00f3rios para a opera\u00e7\u00e3o di\u00e1ria:\n\n- Vendas por per\u00edodo\n- Ocupa\u00e7\u00e3o de mesas\n- Tempo m\u00e9dio de atendimento\n- Itens mais vendidos\n- Cancelamentos e devolu\u00e7\u00f5es\n\n#### 4.7.2 Relat\u00f3rios Financeiros\n\nDesenvolvimento de an\u00e1lises financeiras:\n\n- Faturamento por per\u00edodo\n- Custos e despesas\n- Lucratividade por produto\n- Fluxo de caixa\n- Proje\u00e7\u00f5es e comparativos\n\n#### 4.7.3 Dashboards e Analytics\n\nCria\u00e7\u00e3o de pain\u00e9is visuais e an\u00e1lises:\n\n- Dashboard executivo\n- Gr\u00e1ficos e visualiza\u00e7\u00f5es\n- Tend\u00eancias e sazonalidade\n- An\u00e1lise de dados em tempo real\n- Exporta\u00e7\u00e3o para Excel/PDF\n\n### 4.8 M\u00f3dulo de Marketing e CRM\n\n#### 4.8.1 Cadastro de Clientes\n\nImplementa\u00e7\u00e3o do gerenciamento de clientes:\n\n- Captura de dados via QR Code\n- Hist\u00f3rico de pedidos\n- Prefer\u00eancias e restri\u00e7\u00f5es\n- Segmenta\u00e7\u00e3o de clientes\n- Privacidade e LGPD\n\n#### 4.8.2 Programa de Fidelidade\n\nDesenvolvimento de sistema de fideliza\u00e7\u00e3o:\n\n- Ac\u00famulo de pontos por compra\n- N\u00edveis de fidelidade\n- Recompensas e benef\u00edcios\n- Promo\u00e7\u00f5es personalizadas\n- An\u00e1lise de engajamento\n\n#### 4.8.3 Campanhas e Promo\u00e7\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para a\u00e7\u00f5es de marketing:\n\n- Cria\u00e7\u00e3o de campanhas\n- Descontos e ofertas especiais\n- Comunica\u00e7\u00e3o por email e SMS\n- Aniversariantes do m\u00eas\n- Mensura\u00e7\u00e3o de resultados\n\n## 5. Integra\u00e7\u00f5es com Servi\u00e7os Externos\n\n### 5.1 Integra\u00e7\u00e3o com Plataformas de Delivery\n\n#### 5.1.1 iFood e Outras Plataformas\n\nImplementa\u00e7\u00e3o de conex\u00e3o com marketplaces:\n\n- Recebimento de pedidos em tempo real\n- Aceita\u00e7\u00e3o/rejei\u00e7\u00e3o autom\u00e1tica\n- Atualiza\u00e7\u00e3o de status\n- Sincroniza\u00e7\u00e3o de card\u00e1pio\n- Concilia\u00e7\u00e3o financeira\n\n#### 5.1.2 Delivery Pr\u00f3prio\n\nDesenvolvimento de sistema pr\u00f3prio de delivery:\n\n- Cadastro de entregadores\n- Roteiriza\u00e7\u00e3o de entregas\n- Rastreamento em tempo real\n- \u00c1reas e taxas de entrega\n- Gest\u00e3o de frota\n\n### 5.2 Integra\u00e7\u00e3o com Sistemas Fiscais\n\n#### 5.2.1 Emiss\u00e3o de Notas Fiscais\n\nImplementa\u00e7\u00e3o de processos fiscais:\n\n- Emiss\u00e3o de NFC-e, NF-e\n- Valida\u00e7\u00e3o com WebServices da SEFAZ\n- Armazenamento e envio de documentos\n- Tratamento de conting\u00eancia\n- Relat\u00f3rios fiscais\n\n#### 5.2.2 Concilia\u00e7\u00e3o Cont\u00e1bil\n\nDesenvolvimento de ferramentas para contabilidade:\n\n- Exporta\u00e7\u00e3o para sistemas cont\u00e1beis\n- Plano de contas configur\u00e1vel\n- Relat\u00f3rios para DRE\n- Apura\u00e7\u00e3o de impostos\n- Fechamento mensal\n\n### 5.3 Integra\u00e7\u00e3o com Balan\u00e7as\n\n#### 5.3.1 Para Self-Service\n\nImplementa\u00e7\u00e3o de conex\u00e3o com balan\u00e7as:\n\n- Leitura de peso em tempo real\n- C\u00e1lculo autom\u00e1tico de valor\n- Calibra\u00e7\u00e3o e configura\u00e7\u00e3o\n- Modo offline para conting\u00eancia\n- Registro de pesagens\n\n#### 5.3.2 Para Controle de Estoque\n\nDesenvolvimento de pesagem para estoque:\n\n- Pesagem de insumos\n- Convers\u00e3o de unidades\n- Controle de quebra e perdas\n- Rastreabilidade\n- Invent\u00e1rio f\u00edsico\n\n### 5.4 Integra\u00e7\u00e3o com Equipamentos\n\n#### 5.4.1 Impressoras e Comandas\n\nImplementa\u00e7\u00e3o de sistema de impress\u00e3o:\n\n- Impress\u00e3o de comandas para cozinha\n- Impress\u00e3o de contas e recibos\n- Suporte a diversas marcas de impressoras\n- Configura\u00e7\u00e3o de layouts\n- Tratamento de falhas\n\n#### 5.4.2 Displays de Cozinha\n\nDesenvolvimento de integra\u00e7\u00e3o com displays:\n\n- Exibi\u00e7\u00e3o de pedidos em andamento\n- Alertas visuais e sonoros\n- Temporizadores\n- Confirma\u00e7\u00e3o por toque\n- Sincroniza\u00e7\u00e3o em tempo real\n\n## 6. Infraestrutura e Hospedagem\n\n### 6.1 Ambiente de Produ\u00e7\u00e3o\n\n#### 6.1.1 Servidores Web\n\nConfigura\u00e7\u00e3o da infraestrutura web:\n\n- Servidores web redundantes\n- Balanceadores de carga\n- Certificados SSL/TLS\n- Cache e otimiza\u00e7\u00e3o\n- Monitoramento 24/7\n\n#### 6.1.2 Banco de Dados\n\nImplementa\u00e7\u00e3o da camada de dados:\n\n- Cluster de banco de dados MySQL\n- Replica\u00e7\u00e3o e alta disponibilidade\n- Backups automatizados\n- Particionamento por tenant\n- Otimiza\u00e7\u00e3o de performance\n\n#### 6.1.3 Armazenamento\n\nConfigura\u00e7\u00e3o de sistemas de armazenamento:\n\n- Sistema de arquivos distribu\u00eddo\n- Armazenamento para backups\n- CDN para assets est\u00e1ticos\n- Pol\u00edticas de reten\u00e7\u00e3o\n- Compress\u00e3o e otimiza\u00e7\u00e3o\n\n### 6.2 Escalabilidade\n\n#### 6.2.1 Horizontal\n\nImplementa\u00e7\u00e3o de mecanismos de crescimento:\n\n- Auto-scaling de servidores\n- Gerenciamento de capacidade\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n- Load balancing avan\u00e7ado\n- Cont\u00eaineres e orquestra\u00e7\u00e3o\n\n#### 6.2.2 Vertical\n\nPlanejamento para crescimento de recursos:\n\n- Upgrades de hardware\n- Otimiza\u00e7\u00e3o de software\n- Benchmarking e performance\n- Ajuste de recursos por demanda\n- Monitoramento de gargalos\n\n### 6.3 Monitoramento e Logging\n\n#### 6.3.1 Monitoramento de Sistema\n\nImplementa\u00e7\u00e3o de sistemas de observabilidade:\n\n- Monitoramento em tempo real\n- Alertas autom\u00e1ticos\n- Dashboards operacionais\n- An\u00e1lise de tend\u00eancias\n- Detec\u00e7\u00e3o de anomalias\n\n#### 6.3.2 Logging e Auditoria\n\nDesenvolvimento de registro de eventos:\n\n- Centraliza\u00e7\u00e3o de logs\n- Reten\u00e7\u00e3o configur\u00e1vel\n- Busca e an\u00e1lise\n- Trilhas de auditoria\n- Exporta\u00e7\u00e3o e conformidade\n\n### 6.4 Continuidade de Neg\u00f3cio\n\n#### 6.4.1 Backups\n\nImplementa\u00e7\u00e3o de estrat\u00e9gia de backups:\n\n- Backups di\u00e1rios automatizados\n- Backups incrementais\n- Verifica\u00e7\u00e3o de integridade\n- Restaura\u00e7\u00e3o testada\n- Armazenamento offsite\n\n#### 6.4.2 Disaster Recovery\n\nDesenvolvimento de plano de recupera\u00e7\u00e3o:\n\n- Site alternativo\n- Procedimentos documentados\n- Tempo de recupera\u00e7\u00e3o definido\n- Testes regulares\n- Comunica\u00e7\u00e3o de incidentes\n\n#### 6.4.3 Modo Offline\n\nImplementa\u00e7\u00e3o de funcionamento offline:\n\n- Opera\u00e7\u00f5es b\u00e1sicas sem internet\n- Sincroniza\u00e7\u00e3o autom\u00e1tica\n- Buffer local de transa\u00e7\u00f5es\n- Reconcilia\u00e7\u00e3o ap\u00f3s reconex\u00e3o\n- Notifica\u00e7\u00f5es de status\n\n## 7. Testes e Garantia de Qualidade\n\n### 7.1 Estrat\u00e9gia de Testes\n\n#### 7.1.1 Testes Unit\u00e1rios\n\nImplementa\u00e7\u00e3o de testes de componentes:\n\n- Cobertura de c\u00f3digo\n- Testes automatizados\n- Mock de depend\u00eancias\n- Valida\u00e7\u00e3o de regras de neg\u00f3cio\n- Integra\u00e7\u00e3o com CI/CD\n\n#### 7.1.2 Testes de Integra\u00e7\u00e3o\n\nDesenvolvimento de valida\u00e7\u00e3o de integra\u00e7\u00f5es:\n\n- Teste de APIs\n- Simula\u00e7\u00f5es de servi\u00e7os externos\n- Valida\u00e7\u00e3o de fluxos completos\n- Ambientes de teste isolados\n- Automa\u00e7\u00e3o de casos de teste\n\n#### 7.1.3 Testes de Aceita\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de valida\u00e7\u00e3o do usu\u00e1rio:\n\n- Testes de usabilidade\n- Cen\u00e1rios de uso real\n- Valida\u00e7\u00e3o com stakeholders\n- Feedback documentado\n- Aprova\u00e7\u00e3o formal\n\n### 7.2 Garantia de Qualidade\n\n#### 7.2.1 Revis\u00e3o de C\u00f3digo\n\nEstabelecimento de processos de revis\u00e3o:\n\n- Padr\u00f5es de codifica\u00e7\u00e3o\n- Pull/merge requests\n- Code reviews\n- An\u00e1lise est\u00e1tica\n- M\u00e9tricas de qualidade\n\n#### 7.2.2 Controle de Vers\u00e3o\n\nImplementa\u00e7\u00e3o de gerenciamento de vers\u00f5es:\n\n- Git flow ou similar\n- Ambientes separados (DEV/STG/PROD)\n- Tagging de vers\u00f5es\n- Gest\u00e3o de releases\n- Changelogs e documenta\u00e7\u00e3o\n\n#### 7.2.3 Testes de Performance\n\nDesenvolvimento de valida\u00e7\u00e3o de desempenho:\n\n- Testes de carga\n- Benchmarking\n- Otimiza\u00e7\u00e3o de recursos\n- Monitoramento de impacto\n- Simula\u00e7\u00e3o de multi-tenancy\n\n## 8. Seguran\u00e7a e Conformidade\n\n### 8.1 Seguran\u00e7a de Aplica\u00e7\u00e3o\n\n#### 8.1.1 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de controle de acesso:\n\n- Autentica\u00e7\u00e3o forte (2FA)\n- Gerenciamento de sess\u00f5es\n- Controle de acesso baseado em perfil\n- Pol\u00edticas de senha\n- Prote\u00e7\u00e3o contra for\u00e7a bruta\n\n#### 8.1.2 Prote\u00e7\u00e3o de Dados\n\nDesenvolvimento de mecanismos de prote\u00e7\u00e3o:\n\n- Criptografia em tr\u00e2nsito (TLS)\n- Criptografia em repouso\n- Tokeniza\u00e7\u00e3o de dados sens\u00edveis\n- Mascaramento de informa\u00e7\u00f5es\n- Acesso baseado em necessidade\n\n#### 8.1.3 Seguran\u00e7a de API\n\nImplementa\u00e7\u00e3o de prote\u00e7\u00e3o de endpoints:\n\n- Autentica\u00e7\u00e3o por token (JWT)\n- Rate limiting\n- Valida\u00e7\u00e3o de entrada\n- CORS configurado\n- Prote\u00e7\u00e3o contra ataques comuns\n\n### 8.2 Conformidade\n\n#### 8.2.1 LGPD/GDPR\n\nAdequa\u00e7\u00e3o \u00e0 legisla\u00e7\u00e3o de privacidade:\n\n- Invent\u00e1rio de dados pessoais\n- Termos de uso e privacidade\n- Mecanismos de consentimento\n- Direitos do titular (acesso, exclus\u00e3o)\n- Relat\u00f3rios de impacto\n\n#### 8.2.2 PCI DSS\n\nConformidade para processamento de pagamentos:\n\n- Seguran\u00e7a de dados de cart\u00e3o\n- Tokeniza\u00e7\u00e3o via Stripe\n- Escopo reduzido de PCI\n- Varreduras de seguran\u00e7a\n- Treinamento e conscientiza\u00e7\u00e3o\n\n#### 8.2.3 Auditoria e Compliance\n\nImplementa\u00e7\u00e3o de pr\u00e1ticas de conformidade:\n\n- Trilhas de auditoria\n- Logs imut\u00e1veis\n- Evid\u00eancias de controle\n- Relat\u00f3rios de compliance\n- Revis\u00f5es peri\u00f3dicas\n\n## 9. Lan\u00e7amento e Opera\u00e7\u00f5es\n\n### 9.1 Estrat\u00e9gia de Lan\u00e7amento\n\n#### 9.1.1 MVP e Roadmap\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Defini\u00e7\u00e3o do MVP inicial\n- Prioriza\u00e7\u00e3o de funcionalidades\n- Roadmap de m\u00e9dio prazo\n- Feedback loops planejados\n- Marcos e m\u00e9tricas de sucesso\n\n#### 9.1.2 Beta e Early Adopters\n\nImplementa\u00e7\u00e3o de programa inicial:\n\n- Sele\u00e7\u00e3o de clientes beta\n- Incentivos para early adopters\n- Coleta estruturada de feedback\n- Ciclos r\u00e1pidos de itera\u00e7\u00e3o\n- Estrat\u00e9gia de expans\u00e3o\n\n#### 9.1.3 Go-to-Market\n\nDesenvolvimento de estrat\u00e9gia comercial:\n\n- Posicionamento de mercado\n- Estrat\u00e9gia de pre\u00e7os\n- Canais de aquisi\u00e7\u00e3o\n- Materiais de marketing\n- Plano de vendas\n\n### 9.2 Opera\u00e7\u00f5es Cont\u00ednuas\n\n#### 9.2.1 Suporte ao Cliente\n\nImplementa\u00e7\u00e3o de estrutura de atendimento:\n\n- Equipe de suporte escalonada\n- Base de conhecimento\n- Procedimentos documentados\n- M\u00e9tricas de atendimento\n- Feedback e melhoria cont\u00ednua\n\n#### 9.2.2 Monitoramento de Uso\n\nDesenvolvimento de an\u00e1lise de utiliza\u00e7\u00e3o:\n\n- Telemetria de uso\n- Detec\u00e7\u00e3o de problemas\n- M\u00e9tricas de engajamento\n- An\u00e1lise de churn\n- Oportunidades de upsell\n\n#### 9.2.3 SLA e Garantias\n\nEstabelecimento de acordos de n\u00edvel de servi\u00e7o:\n\n- Disponibilidade garantida\n- Tempo de resposta para suporte\n- Resolu\u00e7\u00e3o de incidentes\n- Compensa\u00e7\u00f5es por falhas\n- Comunica\u00e7\u00e3o proativa\n\n## 10. Manuten\u00e7\u00e3o e Evolu\u00e7\u00e3o\n\n### 10.1 Desenvolvimento Cont\u00ednuo\n\n#### 10.1.1 Novas Funcionalidades\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Processo de coleta de requisitos\n- Prioriza\u00e7\u00e3o baseada em valor\n- Desenvolvimento \u00e1gil\n- Testes de conceito\n- Valida\u00e7\u00e3o com usu\u00e1rios\n\n#### 10.1.2 Corre\u00e7\u00f5es e Melhorias\n\nImplementa\u00e7\u00e3o de processo de manuten\u00e7\u00e3o:\n\n- Triagem de bugs e issues\n- Prioriza\u00e7\u00e3o por impacto\n- Janelas de manuten\u00e7\u00e3o\n- Hotfixes para problemas cr\u00edticos\n- Refatora\u00e7\u00e3o planejada\n\n#### 10.1.3 Atualiza\u00e7\u00f5es de Tecnologia\n\nPlano para evolu\u00e7\u00e3o tecnol\u00f3gica:\n\n- Atualiza\u00e7\u00f5es de seguran\u00e7a\n- Atualiza\u00e7\u00e3o de frameworks\n- Migra\u00e7\u00e3o planejada\n- Testes de compatibilidade\n- Comunica\u00e7\u00e3o de mudan\u00e7as\n\n### 10.2 An\u00e1lise e Otimiza\u00e7\u00e3o\n\n#### 10.2.1 Performance\n\nMonitoramento e melhoria cont\u00ednua:\n\n- An\u00e1lise de gargalos\n- Otimiza\u00e7\u00e3o de consultas\n- Refinamento de caching\n- Monitoramento de uso de recursos\n- Benchmarking peri\u00f3dico\n\n#### 10.2.2 Custo-Benef\u00edcio\n\nAvalia\u00e7\u00e3o financeira constante:\n\n- An\u00e1lise de custos operacionais\n- Otimiza\u00e7\u00e3o de recursos\n- Renegocia\u00e7\u00e3o com fornecedores\n- Efici\u00eancia energ\u00e9tica\n- Automa\u00e7\u00e3o de processos\n\n#### 10.2.3 Experi\u00eancia do Usu\u00e1rio\n\nMelhoria cont\u00ednua da UX:\n\n- Testes de usabilidade\n- An\u00e1lise de caminhos e convers\u00e3o\n- Feedback estruturado\n- A/B testing\n- Pesquisas de satisfa\u00e7\u00e3o\n\n## 11. Diret\u00f3rio Completo do Projeto\n\n```\nrestaurante-sistema/\n\u2502\n\u251c\u2500\u2500 assets/                        # Arquivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 css/                       # Estilos CSS\n\u2502   \u2502   \u251c\u2500\u2500 main.css               # Estilo principal\n\u2502   \u2502   \u251c\u2500\u2500 login.css              # Estilos da p\u00e1gina de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.css          # Estilos do painel principal\n\u2502   \u2502   \u251c\u2500\u2500 tables.css             # Estilos do mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 menu.css               # Estilos do card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.css            # Estilos do painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 reports.css            # Estilos dos relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 ponto.css              # Estilos para o sistema de ponto\n\u2502   \u2502   \u251c\u2500\u2500 fornecedores.css       # Estilos para gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 customer-mobile.css    # Estilos para interface mobile do cliente\n\u2502   \u2502   \u251c\u2500\u2500 subscription.css       # Estilos para p\u00e1ginas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 pricing.css            # Estilos para p\u00e1gina de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing.css            # Estilos para gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Estilos espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.css       # Estilo para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.css       # Estilo para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.css       # Estilo para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.css        # Estilo para rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.css    # Estilo para self-service/buf\u00ea\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.css       # Estilo para delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foodtruck.css      # Estilo para food truck\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bar.css            # Estilo para bar/pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cafeteria.css      # Estilo para cafeteria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.css      # Estilo para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.css         # Estilos para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 js/                        # Arquivos JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # JavaScript principal\n\u2502   \u2502   \u251c\u2500\u2500 login.js               # L\u00f3gica de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js           # Funcionalidades do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 tables.js              # Gerenciamento de mesas\n\u2502   \u2502   \u251c\u2500\u2500 orders.js              # Processamento de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 menu.js                # Card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.js             # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory.js           # Controle de estoque\n\u2502   \u2502   \u251c\u2500\u2500 payments.js            # Processamento de pagamentos\n\u2502   \u2502   \u251c\u2500\u2500 stripe-integration.js  # Integra\u00e7\u00e3o com Stripe\n\u2502   \u2502   \u251c\u2500\u2500 subscription.js        # L\u00f3gica de gerenciamento de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 pricing-calculator.js  # Calculadora de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing-portal.js      # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 charts.js              # L\u00f3gica para gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 ponto.js               # L\u00f3gica de registro de ponto\n\u2502   \u2502   \u251c\u2500\u2500 supplier-manager.js    # Gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 group-orders.js        # L\u00f3gica de pedidos em grupo\n\u2502   \u2502   \u251c\u2500\u2500 bill-splitter.js       # Divis\u00e3o de contas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Scripts espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.js        # L\u00f3gica para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.js        # L\u00f3gica para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.js        # L\u00f3gica para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.js         # L\u00f3gica para rod\u00edzio (controle de passadas)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.js     # L\u00f3gica para self-service (integra\u00e7\u00e3o com balan\u00e7as)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.js        # L\u00f3gica para delivery (rastreamento)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.js       # L\u00f3gica para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.js          # L\u00f3gica para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 images/                    # Imagens\n\u2502   \u2502   \u251c\u2500\u2500 logo/                  # Logotipos\n\u2502   \u2502   \u251c\u2500\u2500 icons/                 # \u00cdcones\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 menu/              # \u00cdcones para categorias do menu\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status/            # \u00cdcones de status\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 actions/           # \u00cdcones para a\u00e7\u00f5es\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 payment/           # \u00cdcones para m\u00e9todos de pagamento\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 subscription/      # \u00cdcones para planos de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 menu/                  # Imagens dos pratos\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Elementos da interface\n\u2502   \u2502   \u251c\u2500\u2500 plans/                 # Imagens para os planos de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 restaurant-types/      # Imagens espec\u00edficas por tipo de restaurante\n\u2502   \u2502       \u251c\u2500\u2500 alacarte/          # Imagens para restaurante \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood/          # Imagens para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria/          # Imagens para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 ...                # Outros tipos\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fonts/                     # Fontes\n\u2502\n\u251c\u2500\u2500 config/                        # Arquivos de configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 database.php               # Configura\u00e7\u00e3o da conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 constants.php              # Constantes da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 stripe.php                 # Configura\u00e7\u00e3o da API do Stripe\n\u2502   \u251c\u2500\u2500 email.php                  # Configura\u00e7\u00e3o de emails\n\u2502   \u251c\u2500\u2500 sms.php                    # Configura\u00e7\u00e3o de SMS\n\u2502   \u251c\u2500\u2500 qrcode.php                 # Configura\u00e7\u00e3o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 ifood.php                  # Configura\u00e7\u00e3o da API do iFood\n\u2502   \u251c\u2500\u2500 restaurant_types.php       # Configura\u00e7\u00e3o de tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface_settings.php     # Configura\u00e7\u00f5es de interface por tipo\n\u2502   \u251c\u2500\u2500 order_methods.php          # Configura\u00e7\u00f5es de m\u00e9todos de pedido\n\u2502   \u251c\u2500\u2500 subscription_plans.php     # Configura\u00e7\u00e3o de planos de assinatura\n\u2502   \u251c\u2500\u2500 tenant.php                 # Configura\u00e7\u00e3o multi-tenant\n\u2502   \u2514\u2500\u2500 feature_limits.php         # Limites de recursos por plano\n\u2502\n\u251c\u2500\u2500 controllers/                   # Controladores\n\u2502   \u251c\u2500\u2500 AuthController.php         # Controlador de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 SubscriptionController.php # Controlador de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 PlansController.php    # Controlador de planos\n\u2502   \u2502   \u251c\u2500\u2500 BillingController.php  # Controlador de faturamento\n\u2502   \u2502   \u2514\u2500\u2500 FeatureController.php  # Controlador de recursos dispon\u00edveis\n\u2502   \u251c\u2500\u2500 TenantController.php       # Controlador multi-tenant\n\u2502   \u251c\u2500\u2500 OnboardingController.php   # Controlador de configura\u00e7\u00e3o inicial\n\u2502   \u251c\u2500\u2500 DashboardController.php    # Controlador do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteDashboardController.php  # Dashboard espec\u00edfico para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodDashboardController.php  # Dashboard espec\u00edfico para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaDashboardController.php  # Dashboard espec\u00edfico para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioDashboardController.php   # Dashboard espec\u00edfico para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 DeliveryDashboardController.php  # Dashboard espec\u00edfico para delivery\n\u2502   \u251c\u2500\u2500 TableController.php        # Controlador de mesas\n\u2502   \u251c\u2500\u2500 OrderController.php        # Controlador de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrderController.php    # Pedidos individuais\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrderController.php     # Pedidos em grupo\n\u2502   \u251c\u2500\u2500 MenuController.php         # Controlador do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuController.php   # Card\u00e1pio para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuController.php   # Card\u00e1pio para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaMenuController.php   # Card\u00e1pio para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioMenuController.php    # Card\u00e1pio para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 SelfServiceMenuController.php # Card\u00e1pio para self-service\n\u2502   \u251c\u2500\u2500 KitchenController.php      # Controlador da cozinha\n\u2502   \u251c\u2500\u2500 InventoryController.php    # Controlador de estoque\n\u2502   \u251c\u2500\u2500 PaymentController.php      # Controlador de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 BillSplitController.php      # Controlador de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ReportController.php       # Controlador de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 iFoodController.php        # Controlador de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 SupplierController.php     # Controlador de fornecedores\n\u2502   \u2502   \u2514\u2500\u2500 QuickOrderController.php     # Controlador de pedidos r\u00e1pidos\n\u2502   \u251c\u2500\u2500 StaffController.php        # Controlador de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 TimeClockController.php      # Controlador de ponto\n\u2502   \u251c\u2500\u2500 CustomerController.php     # Controlador de clientes\n\u2502   \u251c\u2500\u2500 QRCodeController.php       # Controlador de gera\u00e7\u00e3o e gest\u00e3o de QR Codes\n\u2502   \u251c\u2500\u2500 RestaurantTypeController.php # Controlador de tipo de restaurante\n\u2502   \u2514\u2500\u2500 SettingsController.php     # Controlador de configura\u00e7\u00f5es\n\u2502\n\u251c\u2500\u2500 models/                        # Modelos\n\u2502   \u251c\u2500\u2500 User.php                   # Modelo de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 Account.php                # Modelo de conta (assinatura)\n\u2502   \u2502   \u251c\u2500\u2500 Subscription.php       # Modelo de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 Plan.php               # Modelo de plano\n\u2502   \u2502   \u251c\u2500\u2500 Invoice.php            # Modelo de fatura\n\u2502   \u2502   \u2514\u2500\u2500 Usage.php              # Modelo de uso de recursos\n\u2502   \u251c\u2500\u2500 Tenant.php                 # Modelo de tenant (separa\u00e7\u00e3o de dados)\n\u2502   \u251c\u2500\u2500 Restaurant.php             # Modelo de restaurante com tipo e configura\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 RestaurantType.php         # Modelo de tipos de restaurante\n\u2502   \u251c\u2500\u2500 CashRegister.php           # Modelo de caixa\n\u2502   \u251c\u2500\u2500 Table.php                  # Modelo de mesa\n\u2502   \u251c\u2500\u2500 Order.php                  # Modelo de pedido\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrder.php        # Modelo de pedido individual\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrder.php         # Modelo de pedido em grupo\n\u2502   \u251c\u2500\u2500 OrderItem.php              # Modelo de item de pedido\n\u2502   \u251c\u2500\u2500 MenuItem.php               # Modelo de item do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuItem.php   # Extens\u00e3o para itens de \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuItem.php   # Extens\u00e3o para itens de fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzaMenuItem.php      # Extens\u00e3o para pizza (metades, bordas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 RodizioMenuItem.php    # Extens\u00e3o para rod\u00edzio\n\u2502   \u251c\u2500\u2500 Inventory.php              # Modelo de estoque\n\u2502   \u2502   \u2514\u2500\u2500 StockMovement.php      # Modelo de movimenta\u00e7\u00e3o de estoque\n\u2502   \u251c\u2500\u2500 Reservation.php            # Modelo de reserva\n\u2502   \u251c\u2500\u2500 Payment.php                # Modelo de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 BillSplit.php          # Modelo de divis\u00e3o de conta\n\u2502   \u251c\u2500\u2500 Staff.php                  # Modelo de funcion\u00e1rio\n\u2502   \u2502   \u2514\u2500\u2500 TimeClock.php          # Modelo de registro de ponto\n\u2502   \u251c\u2500\u2500 Supplier.php               # Modelo de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierContact.php    # Modelo de contato de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierOrder.php      # Modelo de pedido para fornecedor\n\u2502   \u2502   \u2514\u2500\u2500 SupplierRating.php     # Modelo de avalia\u00e7\u00e3o de fornecedor\n\u2502   \u251c\u2500\u2500 Customer.php               # Modelo de cliente\n\u2502   \u2502   \u2514\u2500\u2500 LoyaltyProgram.php     # Modelo de programa de fidelidade\n\u2502   \u251c\u2500\u2500 MarketingCampaign.php      # Modelo de campanha de marketing\n\u2502   \u251c\u2500\u2500 QRCode.php                 # Modelo de QR Code\n\u2502   \u251c\u2500\u2500 RestaurantConfiguration.php # Modelo de configura\u00e7\u00e3o do restaurante\n\u2502   \u2514\u2500\u2500 RestaurantInterface.php    # Modelo de interface do restaurante\n\u2502\n\u251c\u2500\u2500 views/                         # Visualiza\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 auth/                      # Telas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 login.php              # Tela de login\n\u2502   \u2502   \u251c\u2500\u2500 reset-password.php     # Redefini\u00e7\u00e3o de senha\n\u2502   \u2502   \u2514\u2500\u2500 register.php           # Cadastro inicial\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 subscription/              # Telas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # P\u00e1gina de planos dispon\u00edveis\n\u2502   \u2502   \u251c\u2500\u2500 checkout.php           # Checkout de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 success.php            # Confirma\u00e7\u00e3o de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 billing.php            # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 upgrade.php            # Upgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 downgrade.php          # Downgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 cancel.php             # Cancelamento de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 payment-methods.php    # Gest\u00e3o de m\u00e9todos de pagamento\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 onboarding/                # Telas de configura\u00e7\u00e3o inicial\n\u2502   \u2502   \u251c\u2500\u2500 welcome.php            # Boas-vindas e introdu\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-type.php    # Sele\u00e7\u00e3o de tipo de restaurante\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-comparison.php # Compara\u00e7\u00e3o entre tipos\n\u2502   \u2502   \u251c\u2500\u2500 basic-info.php         # Informa\u00e7\u00f5es b\u00e1sicas\n\u2502   \u2502   \u251c\u2500\u2500 menu-setup.php         # Configura\u00e7\u00e3o inicial do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 operating-hours.php    # Hor\u00e1rios de funcionamento\n\u2502   \u2502   \u251c\u2500\u2500 table-setup.php        # Configura\u00e7\u00e3o de mesas/layout\n\u2502   \u2502   \u251c\u2500\u2500 staff-roles.php        # Defini\u00e7\u00e3o de cargos\n\u2502   \u2502   \u251c\u2500\u2500 payment-options.php    # Op\u00e7\u00f5es de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 finalize.php           # Finaliza\u00e7\u00e3o e ativa\u00e7\u00e3o\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 dashboard/                 # Telas do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 index.php              # Dashboard principal (din\u00e2mico por tipo)\n\u2502   \u2502   \u251c\u2500\u2500 account-status.php     # Status da conta e assinatura\n\u2502   \u2502   \u251c\u2500\u2500 alacarte/              # Dashboards espec\u00edficos por tipo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal \u00e0 la carte\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tables.php         # Visualiza\u00e7\u00e3o de mesas \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood/              # Fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal fast food\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 queue.php          # Fila de pedidos fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria/              # Pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal pizzaria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pizza-builder.php  # Construtor de pizza\n\u2502   \u2502   \u251c\u2500\u2500 rodizio/               # Rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal rod\u00edzio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rounds.php         # Controle de passadas\n\u2502   \u2502   \u251c\u2500\u2500 selfservice/           # Self-service\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal self-service\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scales.php         # Controle de balan\u00e7as\n\u2502   \u2502   \u251c\u2500\u2500 delivery/              # Delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal delivery\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 routes.php         # Controle de rotas de entrega\n\u2502   \u2502   \u2514\u2500\u2500 multiunit/             # Rede de restaurantes\n\u2502   \u2502       \u251c\u2500\u2500 index.php          # Dashboard principal rede\n\u2502   \u2502       \u2514\u2500\u2500 units.php          # Controle de unidades\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tables/                    # Telas de mesas\n\u2502   \u2502   \u251c\u2500\u2500 map.php                # Mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 order.php              # Cria\u00e7\u00e3o de pedido\n\u2502   \u2502   \u2514\u2500\u2500 multi-user.php         # Gest\u00e3o de mesas com m\u00faltiplos usu\u00e1rios\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 menu/                      # Telas do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 admin.php              # Gerenciamento do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 editor.php             # Editor de itens do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 customer.php           # Card\u00e1pio para o cliente (QR Code)\n\u2502   \u2502   \u251c\u2500\u2500 category-manager.php   # Gerenciador de categorias\n\u2502   \u2502   \u251c\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es e card\u00e1pios especiais\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Card\u00e1pios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Layout para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Layout para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Layout para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Layout para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 selfservice.php    # Layout para self-service\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 kitchen/                   # Telas da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 panel.php              # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory-usage.php    # Uso de ingredientes\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Pain\u00e9is espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Painel para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Painel para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Painel para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 rodizio.php        # Painel para rod\u00edzio\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 inventory/                 # Telas de estoque\n\u2502   \u2502   \u251c\u2500\u2500 management.php         # Gerenciamento de estoque\n\u2502   \u2502   \u251c\u2500\u2500 movements.php          # Movimenta\u00e7\u00f5es de estoque\n\u2502   \u2502   \u2514\u2500\u2500 alerts.php             # Alertas de estoque\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 payments/                  # Telas de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 process.php            # Processamento de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 receipt.php            # Recibo\n\u2502   \u2502   \u251c\u2500\u2500 split-bill.php         # Divis\u00e3o de conta\n\u2502   \u2502   \u2514\u2500\u2500 group-payment.php      # Pagamento em grupo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 reports/                   # Telas de relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 sales.php              # Relat\u00f3rios de vendas\n\u2502   \u2502   \u251c\u2500\u2500 cash.php               # Fechamento de caixa\n\u2502   \u2502   \u251c\u2500\u2500 performance.php        # Desempenho de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 financial.php          # Relat\u00f3rios financeiros\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Relat\u00f3rios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Relat\u00f3rios para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Relat\u00f3rios para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Relat\u00f3rios para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Relat\u00f3rios para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 delivery.php       # Relat\u00f3rios para delivery\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 ifood/                     # Telas de integra\u00e7\u00e3o com iFood\n\u2502   \u2502   \u2514\u2500\u2500 orders.php             # Pedidos do iFood\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 suppliers/                 # Telas de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 quick-order.php        # Pedido r\u00e1pido\n\u2502   \u2502   \u251c\u2500\u2500 history.php            # Hist\u00f3rico de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 ratings.php            # Avalia\u00e7\u00e3o de fornecedores\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 staff/                     # Telas de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do funcion\u00e1rio\n\u2502   \u2502   \u251c\u2500\u2500 schedule.php           # Escala de trabalho\n\u2502   \u2502   \u2514\u2500\u2500 time-clock/            # Sistema de ponto\n\u2502   \u2502       \u251c\u2500\u2500 register.php       # Registro de ponto\n\u2502   \u2502       \u251c\u2500\u2500 management.php     # Gest\u00e3o de ponto\n\u2502   \u2502       \u2514\u2500\u2500 reports.php        # Relat\u00f3rios de ponto\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 customers/                 # Telas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de clientes\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do cliente\n\u2502   \u2502   \u2514\u2500\u2500 loyalty.php            # Programa de fidelidade\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 marketing/                 # Telas de marketing\n\u2502   \u2502   \u251c\u2500\u2500 campaigns.php          # Campanhas de marketing\n\u2502   \u2502   \u2514\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 qrcode/                    # Telas de gest\u00e3o de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 generator.php          # Gerador de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 manager.php            # Gestor de QR Codes\n\u2502   \u2502   \u2514\u2500\u2500 preview.php            # Pr\u00e9-visualiza\u00e7\u00e3o de QR Codes\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 admin/                     # \u00c1rea administrativa da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 accounts.php           # Gest\u00e3o de contas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # Configura\u00e7\u00e3o de planos\n\u2502   \u2502   \u251c\u2500\u2500 statistics.php         # Estat\u00edsticas da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 support.php            # Sistema de suporte\n\u2502   \u2502   \u2514\u2500\u2500 settings.php           # Configura\u00e7\u00f5es da plataforma\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 settings/                  # Telas de configura\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 general.php            # Configura\u00e7\u00f5es gerais\n\u2502       \u251c\u2500\u2500 restaurant-type.php    # Configura\u00e7\u00e3o de tipo de restaurante\n\u2502       \u251c\u2500\u2500 interfaces.php         # Configura\u00e7\u00e3o de interfaces\n\u2502       \u251c\u2500\u2500 qrcode.php             # Configura\u00e7\u00e3o de QR Code\n\u2502       \u251c\u2500\u2500 group-orders.php       # Configura\u00e7\u00e3o de pedidos em grupo\n\u2502       \u251c\u2500\u2500 time-clock.php         # Configura\u00e7\u00e3o de ponto\n\u2502       \u251c\u2500\u2500 integrations.php       # Integra\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 account.php            # Configura\u00e7\u00f5es da conta/assinatura\n\u2502       \u2514\u2500\u2500 backup.php             # Backup e seguran\u00e7a\n\u2502\n\u251c\u2500\u2500 includes/                      # Arquivos inclu\u00eddos\n\u2502   \u251c\u2500\u2500 functions.php              # Fun\u00e7\u00f5es auxiliares\n\u2502   \u251c\u2500\u2500 validation.php             # Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 session.php                # Gerenciamento de sess\u00e3o\n\u2502   \u251c\u2500\u2500 security.php               # Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 currency.php               # Formata\u00e7\u00e3o de moeda\n\u2502   \u251c\u2500\u2500 date.php                   # Fun\u00e7\u00f5es de data e hora\n\u2502   \u251c\u2500\u2500 notification.php           # Sistema de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 restaurant-type-helper.php # Fun\u00e7\u00f5es auxiliares para tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface-loader.php       # Carregador de interfaces espec\u00edficas\n\u2502   \u251c\u2500\u2500 tenant-resolver.php        # Resolu\u00e7\u00e3o de tenant\n\u2502   \u251c\u2500\u2500 feature-checker.php        # Verifica\u00e7\u00e3o de recursos dispon\u00edveis por plano\n\u2502   \u2514\u2500\u2500 subscription-helper.php    # Fun\u00e7\u00f5es auxiliares para assinaturas\n\u2502\n\u251c\u2500\u2500 api/                           # Endpoints da API\n\u2502   \u251c\u2500\u2500 auth.php                   # API de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 subscription.php           # API de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # API de planos\n\u2502   \u2502   \u251c\u2500\u2500 webhooks.php           # Webhooks do Stripe\n\u2502   \u2502   \u2514\u2500\u2500 billing.php            # API de faturamento\n\u2502   \u251c\u2500\u2500 tables.php                 # API de mesas\n\u2502   \u251c\u2500\u2500 orders.php                 # API de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 group-orders.php       # API de pedidos em grupo\n\u2502   \u251c\u2500\u2500 menu.php                   # API do card\u00e1pio\n\u2502   \u251c\u2500\u2500 payments.php               # API de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 bill-split.php         # API de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ifood.php                  # API de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 suppliers.php              # API de fornecedores\n\u2502   \u251c\u2500\u2500 staff.php                  # API de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 time-clock.php         # API de registro de ponto\n\u2502   \u251c\u2500\u2500 customers.php              # API de clientes\n\u2502   \u251c\u2500\u2500 reports.php                # API de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 qrcode.php                 # API de QR Codes\n\u2502   \u2514\u2500\u2500 restaurant-type.php        # API de tipo de restaurante\n\u2502\n\u251c\u2500\u2500 services/                      # Servi\u00e7os\n\u2502   \u251c\u2500\u2500 StripeService.php          # Servi\u00e7o de pagamento Stripe\n\u2502   \u251c\u2500\u2500 SubscriptionService.php    # Servi\u00e7o de gerenciamento de assinaturas\n\u2502   \u251c\u2500\u2500 BillingService.php         # Servi\u00e7o de gerenciamento de faturas\n\u2502   \u251c\u2500\u2500 TenantService.php          # Servi\u00e7o de gest\u00e3o multi-tenant\n\u2502   \u251c\u2500\u2500 FeatureLimitService.php    # Servi\u00e7o de controle de limites por plano\n\u2502   \u251c\u2500\u2500 QRCodeService.php          # Servi\u00e7o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 PDFService.php             # Servi\u00e7o de gera\u00e7\u00e3o de PDF\n\u2502   \u251c\u2500\u2500 iFoodService.php           # Servi\u00e7o de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 EmailService.php           # Servi\u00e7o de e-mail\n\u2502   \u251c\u2500\u2500 SMSService.php             # Servi\u00e7o de SMS\n\u2502   \u251c\u2500\u2500 NotificationService.php    # Servi\u00e7o de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 ChartService.php           # Servi\u00e7o de gera\u00e7\u00e3o de gr\u00e1ficos\n\u2502   \u251c\u2500\u2500 BackupService.php          # Servi\u00e7o de backup\n\u2502   \u251c\u2500\u2500 RestaurantTypeService.php  # Servi\u00e7o de tipo de restaurante\n\u2502   \u251c\u2500\u2500 InterfaceService.php       # Servi\u00e7o de interfaces\n\u2502   \u251c\u2500\u2500 ScaleService.php           # Servi\u00e7o de integra\u00e7\u00e3o com balan\u00e7as\n\u2502   \u251c\u2500\u2500 DeliveryTrackingService.php # Servi\u00e7o de rastreamento de entregas\n\u2502   \u2514\u2500\u2500 RodizioTrackingService.php # Servi\u00e7o de controle de rod\u00edzio\n\u2502\n\u251c\u2500\u2500 database/                      # Arquivos de banco de dados\n\u2502   \u251c\u2500\u2500 migrations/                # Migra\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 create_tenants_table.php     # Tabela de tenants\n\u2502   \u2502   \u251c\u2500\u2500 create_accounts_table.php    # Tabela de contas\n\u2502   \u2502   \u251c\u2500\u2500 create_subscriptions_table.php # Tabela de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 create_plans_table.php       # Tabela de planos\n\u2502   \u2502   \u251c\u2500\u2500 create_invoices_table.php    # Tabela de faturas\n\u2502   \u2502   \u251c\u2500\u2500 create_usage_logs_table.php  # Tabela de uso de recursos\n\u2502   \u2502   \u251c\u2500\u2500 create_users_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_types_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurants_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_configurations_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_tables_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_menu_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_order_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_inventory_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_customers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_staff_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_time_clock_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_suppliers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_contacts_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_payments_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_bill_splits_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_qrcodes_table.php\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 seeds/                     # Seeds\n\u2502       \u251c\u2500\u2500 plans_seeder.php       # Seed para planos de assinatura\n\u2502       \u251c\u2500\u2500 features_seeder.php    # Seed para recursos por plano\n\u2502       \u251c\u2500\u2500 users_seeder.php\n\u2502       \u251c\u2500\u2500 restaurant_types_seeder.php\n\u2502       \u251c\u2500\u2500 menu_items_seeder.php\n\u2502       \u251c\u2500\u2500 suppliers_seeder.php\n\u2502       \u251c\u2500\u2500 staff_seeder.php\n\u2502       \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 public/                        # Arquivos p\u00fablicos\n\u2502   \u251c\u2500\u2500 index.php                  # Ponto de entrada principal\n\u2502   \u251c\u2500\u2500 pricing.php                # P\u00e1gina p\u00fablica de pre\u00e7os\n\u2502   \u251c\u2500\u2500 register.php               # P\u00e1gina de registro\n\u2502   \u251c\u2500\u2500 customer-menu.php          # P\u00e1gina do card\u00e1pio digital\n\u2502   \u251c\u2500\u2500 group-order.php            # P\u00e1gina de pedido em grupo\n\u2502   \u251c\u2500\u2500 time-clock.php             # P\u00e1gina de registro de ponto\n\u2502   \u251c\u2500\u2500 webhook/                   # Endpoints de webhooks\n\u2502   \u2502   \u2514\u2500\u2500 stripe.php             # Webhook do Stripe\n\u2502   \u251c\u2500\u2500 qr/                        # QR Codes gerados\n\u2502   \u2502   \u2514\u2500\u2500 tables/                # QR Codes para mesas\n\u2502   \u251c\u2500\u2500 receipt/                   # Recibos gerados\n\u2502   \u2514\u2500\u2500 .htaccess                  # Configura\u00e7\u00e3o do Apache\n\u2502\n\u251c\u2500\u2500 mobile/                        # Arquivos de interface mobile\n\u2502   \u251c\u2500\u2500 index.php                  # Entrada principal mobile\n\u2502   \u251c\u2500\u2500 menu.php                   # Card\u00e1pio digital mobile\n\u2502   \u251c\u2500\u2500 order.php                  # Interface de pedido mobile\n\u2502   \u251c\u2500\u2500 group-order.php            # Interface de pedido em grupo\n\u2502   \u251c\u2500\u2500 payment.php                # Interface de pagamento mobile\n\u2502   \u251c\u2500\u2500 types/                     # Interfaces espec\u00edficas por tipo\n\u2502   \u2502   \u251c\u2500\u2500 alacarte.php           # Interface mobile para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood.php           # Interface mobile para fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria.php           # Interface mobile para pizzaria\n\u2502   \u2502   \u2514\u2500\u2500 rodizio.php            # Interface mobile para rod\u00edzio\n\u2502   \u2514\u2500\u2500 staff/                     # Interface para funcion\u00e1rios\n\u2502       \u2514\u2500\u2500 time-clock.php         # Registro de ponto mobile\n\u2502\n\u251c\u2500\u2500 docs/                          # Documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 setup.md                   # Instru\u00e7\u00f5es de instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 admin-guide.md             # Guia do administrador\n\u2502   \u251c\u2500\u2500 user-guide.md              # Guia do usu\u00e1rio\n\u2502   \u251c\u2500\u2500 api-docs.md                # Documenta\u00e7\u00e3o da API\n\u2502   \u251c\u2500\u2500 database-schema.md         # Esquema do banco de dados\n\u2502   \u251c\u2500\u2500 subscription.md            # Documenta\u00e7\u00e3o do sistema de assinaturas\n\u2502   \u2514\u2500\u2500 restaurant-types/          # Documenta\u00e7\u00e3o espec\u00edfica por tipo\n\u2502       \u251c\u2500\u2500 alacarte.md            # Documenta\u00e7\u00e3o para \u00e0 la carte\n\u2502       \u251c\u2500\u2500 fastfood.md            # Documenta\u00e7\u00e3o para fast food\n\u2502       \u251c\u2500\u2500 pizzaria.md            # Documenta\u00e7\u00e3o para pizzaria\n\u2502       \u2514\u2500\u2500 ...                    # Outros tipos\n\u2502\n\u251c\u2500\u2500 tests/                         # Testes automatizados\n\u2502   \u251c\u2500\u2500 unit/                      # Testes unit\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 subscription/          # Testes de assinatura\n\u2502   \u251c\u2500\u2500 integration/               # Testes de integra\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 acceptance/                # Testes de aceita\u00e7\u00e3o\n\u2502\n\u251c\u2500\u2500 vendor/                        # Depend\u00eancias (Composer)\n\u2502\n\u251c\u2500\u2500 .htaccess                      # Configura\u00e7\u00e3o do Apache\n\u251c\u2500\u2500 index.php                      # Arquivo inicial (redirecionamento)\n\u251c\u2500\u2500 composer.json                  # Configura\u00e7\u00e3o do Composer\n\u251c\u2500\u2500 package.json                   # Configura\u00e7\u00e3o do NPM\n\u251c\u2500\u2500 README.md                      # Documenta\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 LICENSE                        # Licen\u00e7a do software\n\u2514\u2500\u2500 .gitignore                     # Arquivos ignorados pelo Git\n```\n\n## Conclus\u00e3o\n\nO Sistema de Gest\u00e3o de Restaurantes SaaS representa uma solu\u00e7\u00e3o completa e flex\u00edvel, adaptada para diversos tipos de estabelecimentos. A implementa\u00e7\u00e3o como servi\u00e7o por assinatura permite escalabilidade e sustentabilidade do neg\u00f3cio, enquanto a personaliza\u00e7\u00e3o por tipo de restaurante garante que cada cliente tenha uma experi\u00eancia otimizada para seu modelo espec\u00edfico.\n\nA arquitetura multi-tenant, combinada com um modelo de planos em n\u00edveis, permite atender desde pequenos estabelecimentos at\u00e9 grandes redes, com um caminho claro de crescimento que acompanha a evolu\u00e7\u00e3o do neg\u00f3cio do cliente.\n\n\n\nA integra\u00e7\u00e3o com servi\u00e7os essenciais como Stripe para pagamentos, iFood para delivery, e um sistema robusto de QR Codes para pedidos digitais posiciona o sistema como uma solu\u00e7\u00e3o moderna e completa para o mercado de restaurantes, que cada vez mais demanda digitaliza\u00e7\u00e3o e efici\u00eancia operacional.\n\nO projeto apresentado n\u00e3o apenas resolve os desafios operacionais do dia a dia de um restaurante, mas tamb\u00e9m oferece insights valiosos baseados em dados que podem impulsionar o crescimento e a lucratividade do neg\u00f3cio.\n\n\n\n## Resumo \n\n\n# Checkpoint de Desenvolvimento do Sistema de Gest\u00e3o de Restaurantes SaaS\n\n\n\n### Componentes Implementados:\n\n1. **Banco de Dados MySQL (100%)**\n   - Esquema completo com todas as tabelas necess\u00e1rias\n   - Rela\u00e7\u00f5es e chaves estrangeiras\n   - \u00cdndices para otimiza\u00e7\u00e3o\n   - Estrutura para dados JSON\n   - Suporte completo para multi-tenant\n   -- Cria\u00e7\u00e3o do banco de dados\nCREATE DATABASE restaurante_saas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nUSE restaurante_saas;\n\n-- -----------------------------------------------------\n-- Tabelas do Sistema SaaS (Plataforma)\n-- -----------------------------------------------------\n\n-- Tabela de tenants (restaurantes)\nCREATE TABLE tenants (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) NOT NULL UNIQUE,\n    restaurant_type VARCHAR(20) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL,\n    logo VARCHAR(255) DEFAULT NULL,\n    theme_color VARCHAR(7) DEFAULT '#3498db',\n    domain VARCHAR(100) DEFAULT NULL,\n    \n    -- Campos para configura\u00e7\u00e3o de pagamentos\n    payment_gateway ENUM('stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede') DEFAULT 'stripe',\n    payment_gateway_key VARCHAR(255) DEFAULT NULL,\n    payment_gateway_token VARCHAR(255) DEFAULT NULL,\n    bank_name VARCHAR(100) DEFAULT NULL,\n    bank_agency VARCHAR(20) DEFAULT NULL,\n    bank_account VARCHAR(30) DEFAULT NULL,\n    pix_key VARCHAR(255) DEFAULT NULL,\n    payment_methods JSON DEFAULT '{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}',\n    payment_settings JSON DEFAULT '{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}',\n    \n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de planos de assinatura\nCREATE TABLE plans (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    code VARCHAR(20) NOT NULL UNIQUE,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    billing_cycle ENUM('monthly', 'quarterly', 'semiannual', 'annual') DEFAULT 'monthly',\n    features JSON NOT NULL,\n    limits JSON NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    stripe_product_id VARCHAR(100) DEFAULT NULL,\n    stripe_price_id VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de assinaturas\nCREATE TABLE subscriptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    plan_id INT UNSIGNED NOT NULL,\n    stripe_subscription_id VARCHAR(100) DEFAULT NULL,\n    stripe_customer_id VARCHAR(100) DEFAULT NULL,\n    status ENUM('trial', 'active', 'past_due', 'canceled', 'suspended') NOT NULL DEFAULT 'trial',\n    trial_ends_at TIMESTAMP NULL DEFAULT NULL,\n    ends_at TIMESTAMP NULL DEFAULT NULL,\n    next_billing_at TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (plan_id) REFERENCES plans(id)\n) ENGINE=InnoDB;\n\n-- Tabela de faturas\nCREATE TABLE invoices (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    subscription_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED NOT NULL,\n    stripe_invoice_id VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('draft', 'open', 'paid', 'uncollectible', 'void') NOT NULL DEFAULT 'draft',\n    due_date TIMESTAMP NULL DEFAULT NULL,\n    paid_at TIMESTAMP NULL DEFAULT NULL,\n    pdf_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de controle de uso de recursos\nCREATE TABLE resource_usage (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    resource_type VARCHAR(50) NOT NULL,\n    resource_count INT NOT NULL DEFAULT 1,\n    year INT NOT NULL,\n    month INT NOT NULL,\n    day INT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_resource_usage_per_day (tenant_id, resource_type, year, month, day),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Usu\u00e1rios e Acesso\n-- -----------------------------------------------------\n\n-- Tabela de usu\u00e1rios\nCREATE TABLE users (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NULL DEFAULT NULL,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin') NOT NULL,\n    phone VARCHAR(20) DEFAULT NULL,\n    profile_image VARCHAR(255) DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE,\n    last_login TIMESTAMP NULL DEFAULT NULL,\n    password_reset_token VARCHAR(100) DEFAULT NULL,\n    password_reset_expires TIMESTAMP NULL DEFAULT NULL,\n    remember_token VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_user_email (email),\n    UNIQUE KEY unique_user_username (username),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es\nCREATE TABLE permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es por papel\nCREATE TABLE role_permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer') NOT NULL,\n    permission_id INT UNSIGNED NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_role_permission (tenant_id, role, permission_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id)\n) ENGINE=InnoDB;\n\n-- Tabela de log de acesso\nCREATE TABLE access_logs (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    user_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED DEFAULT NULL,\n    ip_address VARCHAR(45) NOT NULL,\n    user_agent VARCHAR(255) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    details JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00e3o do Restaurante\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es do restaurante\nCREATE TABLE restaurant_configurations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    opening_hours JSON DEFAULT NULL,\n    operating_days JSON DEFAULT NULL,\n    delivery_radius INT DEFAULT 5,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    min_delivery_value DECIMAL(10, 2) DEFAULT 0.00,\n    allow_pickup BOOLEAN DEFAULT TRUE,\n    allow_delivery BOOLEAN DEFAULT TRUE,\n    allow_reservations BOOLEAN DEFAULT TRUE,\n    allow_qrcode_orders BOOLEAN DEFAULT TRUE,\n    allow_group_orders BOOLEAN DEFAULT TRUE,\n    default_order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    estimated_preparation_time INT DEFAULT 30,\n    default_table_capacity INT DEFAULT 4,\n    use_kitchen_display BOOLEAN DEFAULT TRUE,\n    taxes_included BOOLEAN DEFAULT TRUE,\n    tax_rate DECIMAL(5, 2) DEFAULT 0.00,\n    service_fee DECIMAL(5, 2) DEFAULT 0.00,\n    tip_options JSON DEFAULT NULL,\n    notification_settings JSON DEFAULT NULL,\n    printer_settings JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de \u00e1reas do restaurante\nCREATE TABLE restaurant_areas (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de caixas/terminais\nCREATE TABLE cash_registers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    location VARCHAR(100) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de aberturas e fechamentos de caixa\nCREATE TABLE cash_register_operations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    operation_type ENUM('opening', 'closing') NOT NULL,\n    initial_amount DECIMAL(10, 2) DEFAULT 0.00,\n    final_amount DECIMAL(10, 2) DEFAULT 0.00,\n    system_calculated_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_notes TEXT DEFAULT NULL,\n    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    closing_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de reservas\nCREATE TABLE reservations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    customer_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) NOT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    number_of_people INT NOT NULL,\n    reservation_date DATE NOT NULL,\n    reservation_time TIME NOT NULL,\n    arrival_time TIMESTAMP NULL DEFAULT NULL,\n    departure_time TIMESTAMP NULL DEFAULT NULL,\n    status ENUM('pending', 'confirmed', 'seated', 'completed', 'canceled', 'no_show') DEFAULT 'pending',\n    special_requests TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Mesas e QR Code\n-- -----------------------------------------------------\n\n-- Tabela de mesas\nCREATE TABLE tables (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    area_id INT UNSIGNED DEFAULT NULL,\n    number VARCHAR(10) NOT NULL,\n    name VARCHAR(50) DEFAULT NULL,\n    capacity INT UNSIGNED DEFAULT 4,\n    position_x INT DEFAULT 0,\n    position_y INT DEFAULT 0,\n    status ENUM('available', 'occupied', 'reserved', 'cleaning', 'inactive') DEFAULT 'available',\n    qr_code VARCHAR(255) DEFAULT NULL,\n    qr_code_hash VARCHAR(64) DEFAULT NULL,\n    occupied_since TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_table_number_per_tenant (tenant_id, number),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (area_id) REFERENCES restaurant_areas(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de QR Codes\nCREATE TABLE qr_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    code VARCHAR(100) NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    type ENUM('table', 'menu', 'payment', 'custom') NOT NULL DEFAULT 'table',\n    data JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    scan_count INT UNSIGNED DEFAULT 0,\n    last_scanned TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de ocupa\u00e7\u00e3o de mesas\nCREATE TABLE table_occupancy_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED NOT NULL,\n    start_time TIMESTAMP NOT NULL,\n    end_time TIMESTAMP NULL DEFAULT NULL,\n    number_of_customers INT UNSIGNED DEFAULT 1,\n    order_id INT UNSIGNED DEFAULT NULL,\n    total_spent DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Card\u00e1pio e Itens\n-- -----------------------------------------------------\n\n-- Tabela de categorias de menu\nCREATE TABLE menu_categories (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    image VARCHAR(255) DEFAULT NULL,\n    sort_order INT DEFAULT 0,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_category_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens do menu\nCREATE TABLE menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    category_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    cost DECIMAL(10, 2) DEFAULT 0.00,\n    image VARCHAR(255) DEFAULT NULL,\n    preparation_time INT DEFAULT 15,\n    ingredients TEXT DEFAULT NULL,\n    allergens TEXT DEFAULT NULL,\n    nutritional_info JSON DEFAULT NULL,\n    available BOOLEAN DEFAULT TRUE,\n    featured BOOLEAN DEFAULT FALSE,\n    sort_order INT DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    restaurant_type_specific BOOLEAN DEFAULT FALSE,\n    restaurant_type_config JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES menu_categories(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de op\u00e7\u00f5es e adicionais para itens do menu\nCREATE TABLE menu_item_options (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_selections INT DEFAULT 0,\n    max_selections INT DEFAULT 1,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de valores para op\u00e7\u00f5es de itens do menu\nCREATE TABLE menu_item_option_values (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    option_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    price_adjustment DECIMAL(10, 2) DEFAULT 0.00,\n    available BOOLEAN DEFAULT TRUE,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (option_id) REFERENCES menu_item_options(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de card\u00e1pios especiais/promo\u00e7\u00f5es\nCREATE TABLE special_menus (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    start_date DATE DEFAULT NULL,\n    end_date DATE DEFAULT NULL,\n    start_time TIME DEFAULT NULL,\n    end_time TIME DEFAULT NULL,\n    days_of_week JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens em card\u00e1pios especiais\nCREATE TABLE special_menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    special_menu_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    special_price DECIMAL(10, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (special_menu_id) REFERENCES special_menus(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pedidos\n-- -----------------------------------------------------\n\n-- Tabela de pedidos\nCREATE TABLE orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    staff_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) DEFAULT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    order_number VARCHAR(20) NOT NULL,\n    order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'new',\n    subtotal DECIMAL(10, 2) NOT NULL,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    scheduled_for TIMESTAMP NULL DEFAULT NULL,\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP NULL DEFAULT NULL,\n    cancelled_at TIMESTAMP NULL DEFAULT NULL,\n    cancellation_reason TEXT DEFAULT NULL,\n    is_group_order BOOLEAN DEFAULT FALSE,\n    group_order_code VARCHAR(20) DEFAULT NULL,\n    payment_status ENUM('pending', 'paid', 'partially_paid', 'refunded', 'failed') DEFAULT 'pending',\n    source ENUM('in_person', 'qrcode', 'website', 'app', 'ifood', 'phone') DEFAULT 'in_person',\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n    FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de itens do pedido\nCREATE TABLE order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    options JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',\n    preparation_started_at TIMESTAMP NULL DEFAULT NULL,\n    preparation_completed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de status do pedido\nCREATE TABLE order_status_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') NOT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de entregas\nCREATE TABLE deliveries (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    delivery_address VARCHAR(255) NOT NULL,\n    delivery_city VARCHAR(100) NOT NULL,\n    delivery_state VARCHAR(2) NOT NULL,\n    delivery_zip_code VARCHAR(10) NOT NULL,\n    delivery_instructions TEXT DEFAULT NULL,\n    delivery_person_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'assigned', 'in_transit', 'delivered', 'failed') DEFAULT 'pending',\n    estimated_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    actual_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    tracking_code VARCHAR(50) DEFAULT NULL,\n    tracking_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (delivery_person_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pagamentos\n-- -----------------------------------------------------\n\n-- Tabela de pagamentos\nCREATE TABLE payments (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') NOT NULL,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    installments TINYINT DEFAULT 1,\n    card_brand VARCHAR(50) DEFAULT NULL,\n    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',\n    transaction_id VARCHAR(100) DEFAULT NULL,\n    payment_data JSON DEFAULT NULL,\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de divis\u00e3o de contas\nCREATE TABLE bill_splits (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    split_type ENUM('equal', 'custom', 'percentage', 'item') NOT NULL DEFAULT 'equal',\n    payment_status ENUM('pending', 'paid') DEFAULT 'pending',\n    items JSON DEFAULT NULL,\n    payment_link VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de transa\u00e7\u00f5es no caixa\nCREATE TABLE cash_register_transactions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    cash_register_operation_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    transaction_type ENUM('sale', 'refund', 'expense', 'deposit', 'withdrawal') NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') DEFAULT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type ENUM('order', 'invoice', 'expense', 'other') DEFAULT NULL,\n    description TEXT DEFAULT NULL,\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (cash_register_operation_id) REFERENCES cash_register_operations(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de cupons e descontos\nCREATE TABLE coupons (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    code VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    discount_type ENUM('percentage', 'fixed', 'free_item') NOT NULL,\n    discount_value DECIMAL(10, 2) NOT NULL,\n    free_item_id INT UNSIGNED DEFAULT NULL,\n    min_order_value DECIMAL(10, 2) DEFAULT 0.00,\n    max_discount DECIMAL(10, 2) DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    max_uses INT UNSIGNED DEFAULT NULL,\n    uses_count INT UNSIGNED DEFAULT 0,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_coupon_code_per_tenant (tenant_id, code),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (free_item_id) REFERENCES menu_items(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Estoque e Ingredientes\n-- -----------------------------------------------------\n\n-- Tabela de ingredientes\nCREATE TABLE ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    cost_per_unit DECIMAL(10, 4) NOT NULL,\n    inventory_alert_threshold DECIMAL(10, 2) DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    barcode VARCHAR(50) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de ingredientes por item do menu\nCREATE TABLE menu_item_ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_item_ingredient (menu_item_id, ingredient_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de estoque\nCREATE TABLE inventory (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL DEFAULT 0,\n    location VARCHAR(50) DEFAULT 'main',\n    last_count_date TIMESTAMP NULL DEFAULT NULL,\n    last_count_by INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_location (tenant_id, ingredient_id, location),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (last_count_by) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de movimenta\u00e7\u00f5es de estoque\nCREATE TABLE inventory_movements (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    movement_type ENUM('purchase', 'order_usage', 'adjustment', 'transfer', 'waste', 'return') NOT NULL,\n    unit_cost DECIMAL(10, 4) DEFAULT NULL,\n    location VARCHAR(50) DEFAULT 'main',\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de contagem de estoque (invent\u00e1rio)\nCREATE TABLE inventory_counts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    count_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    user_id INT UNSIGNED NOT NULL,\n    status ENUM('in_progress', 'completed', 'cancelled') DEFAULT 'in_progress',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de detalhes da contagem de estoque\nCREATE TABLE inventory_count_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    inventory_count_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    expected_quantity DECIMAL(10, 2) NOT NULL,\n    actual_quantity DECIMAL(10, 2) NOT NULL,\n    discrepancy DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (inventory_count_id) REFERENCES inventory_counts(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Funcion\u00e1rios\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de funcion\u00e1rios\nCREATE TABLE staff_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    department VARCHAR(100) DEFAULT NULL,\n    hire_date DATE DEFAULT NULL,\n    salary DECIMAL(10, 2) DEFAULT NULL,\n    hourly_rate DECIMAL(10, 2) DEFAULT NULL,\n    commission_rate DECIMAL(5, 2) DEFAULT NULL,\n    working_hours JSON DEFAULT NULL,\n    employee_id VARCHAR(50) DEFAULT NULL,\n    emergency_contact_name VARCHAR(100) DEFAULT NULL,\n    emergency_contact_phone VARCHAR(20) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_staff_employee_id (tenant_id, employee_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de registro de ponto\nCREATE TABLE time_clock (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP NULL DEFAULT NULL,\n    break_start TIMESTAMP NULL DEFAULT NULL,\n    break_end TIMESTAMP NULL DEFAULT NULL,\n    total_hours DECIMAL(5, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de comiss\u00f5es de vendas\nCREATE TABLE sales_commissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    commission_amount DECIMAL(10, 2) NOT NULL,\n    commission_rate DECIMAL(5, 2) NOT NULL,\n    status ENUM('pending', 'approved', 'paid', 'rejected') DEFAULT 'pending',\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de escalas de trabalho\nCREATE TABLE staff_schedules (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    schedule_date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Clientes\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de clientes\nCREATE TABLE customer_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    birth_date DATE DEFAULT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    allergy_info TEXT DEFAULT NULL,\n    favorite_items JSON DEFAULT NULL,\n    marketing_preferences JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de programa de fidelidade\nCREATE TABLE loyalty_program (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_per_currency DECIMAL(10, 2) DEFAULT 1.00,\n    points_validity_days INT UNSIGNED DEFAULT 365,\n    min_points_to_redeem INT UNSIGNED DEFAULT 100,\n    currency_per_point DECIMAL(10, 4) DEFAULT 0.01,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de n\u00edveis de fidelidade\nCREATE TABLE loyalty_tiers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_points INT UNSIGNED NOT NULL,\n    multiplier DECIMAL(5, 2) DEFAULT 1.00,\n    benefits JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pontos de fidelidade\nCREATE TABLE loyalty_points (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    points INT NOT NULL,\n    source ENUM('purchase', 'reward', 'bonus', 'adjustment', 'redemption') NOT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    is_expired BOOLEAN DEFAULT FALSE,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de recompensas do programa de fidelidade\nCREATE TABLE loyalty_rewards (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_required INT UNSIGNED NOT NULL,\n    reward_type ENUM('discount', 'free_item', 'gift', 'coupon') NOT NULL,\n    reward_value JSON NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de resgates de recompensas\nCREATE TABLE loyalty_redemptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    loyalty_reward_id INT UNSIGNED NOT NULL,\n    points_used INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'approved', 'used', 'expired', 'cancelled') DEFAULT 'pending',\n    redemption_code VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    used_at TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_reward_id) REFERENCES loyalty_rewards(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Fornecedores\n-- -----------------------------------------------------\n\n-- Tabela de fornecedores\nCREATE TABLE suppliers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) DEFAULT NULL,\n    email VARCHAR(100) DEFAULT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    contact_name VARCHAR(100) DEFAULT NULL,\n    contact_phone VARCHAR(20) DEFAULT NULL,\n    contact_email VARCHAR(100) DEFAULT NULL,\n    category VARCHAR(50) DEFAULT NULL,\n    payment_terms VARCHAR(100) DEFAULT NULL,\n    delivery_time INT DEFAULT NULL,\n    minimum_order DECIMAL(10, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de produtos de fornecedores\nCREATE TABLE supplier_products (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    sku VARCHAR(50) DEFAULT NULL,\n    supplier_sku VARCHAR(50) DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    ingredient_id INT UNSIGNED DEFAULT NULL,\n    conversion_factor DECIMAL(10, 4) DEFAULT 1.0000,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos a fornecedores\nCREATE TABLE supplier_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_number VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expected_delivery_date DATE DEFAULT NULL,\n    delivery_date DATE DEFAULT NULL,\n    status ENUM('draft', 'sent', 'confirmed', 'partially_received', 'received', 'cancelled') DEFAULT 'draft',\n    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0.00,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    shipping DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    payment_status ENUM('pending', 'partial', 'paid', 'cancelled') DEFAULT 'pending',\n    payment_method VARCHAR(50) DEFAULT NULL,\n    payment_details JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de itens de pedidos a fornecedores\nCREATE TABLE supplier_order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED NOT NULL,\n    supplier_product_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    quantity_received DECIMAL(10, 2) DEFAULT 0.00,\n    status ENUM('pending', 'partial', 'complete', 'cancelled') DEFAULT 'pending',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_product_id) REFERENCES supplier_products(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de avalia\u00e7\u00e3o de fornecedores\nCREATE TABLE supplier_ratings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    quality_rating TINYINT UNSIGNED DEFAULT NULL,\n    service_rating TINYINT UNSIGNED DEFAULT NULL,\n    price_rating TINYINT UNSIGNED DEFAULT NULL,\n    delivery_rating TINYINT UNSIGNED DEFAULT NULL,\n    overall_rating TINYINT UNSIGNED NOT NULL,\n    comments TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Relat\u00f3rios e M\u00e9tricas\n-- -----------------------------------------------------\n\n-- Tabela de relat\u00f3rios salvos\nCREATE TABLE saved_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    report_type VARCHAR(50) NOT NULL,\n    parameters JSON NOT NULL,\n    public BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de relat\u00f3rios agendados\nCREATE TABLE scheduled_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    saved_report_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    frequency ENUM('daily', 'weekly', 'monthly', 'quarterly') NOT NULL,\n    day_of_week TINYINT UNSIGNED DEFAULT NULL,\n    day_of_month TINYINT UNSIGNED DEFAULT NULL,\n    time_of_day TIME NOT NULL,\n    recipients JSON NOT NULL,\n    last_sent TIMESTAMP NULL DEFAULT NULL,\n    next_scheduled TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (saved_report_id) REFERENCES saved_reports(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de m\u00e9tricas di\u00e1rias\nCREATE TABLE daily_metrics (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    metric_date DATE NOT NULL,\n    sales DECIMAL(10, 2) DEFAULT 0.00,\n    orders INT UNSIGNED DEFAULT 0,\n    customers INT UNSIGNED DEFAULT 0,\n    average_ticket DECIMAL(10, 2) DEFAULT 0.00,\n    tables_served INT UNSIGNED DEFAULT 0,\n    average_table_time INT UNSIGNED DEFAULT 0,\n    staff_count INT UNSIGNED DEFAULT 0,\n    labor_cost DECIMAL(10, 2) DEFAULT 0.00,\n    cogs DECIMAL(10, 2) DEFAULT 0.00,\n    profit_margin DECIMAL(5, 2) DEFAULT 0.00,\n    item_metrics JSON DEFAULT NULL,\n    payment_methods JSON DEFAULT NULL,\n    source_metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_tenant_date (tenant_id, metric_date),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Integra\u00e7\u00f5es Externas\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es de integra\u00e7\u00e3o com iFood\nCREATE TABLE ifood_integration (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    merchant_id VARCHAR(100) NOT NULL,\n    api_key VARCHAR(255) NOT NULL,\n    merchant_token VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT FALSE,\n    auto_accept_orders BOOLEAN DEFAULT FALSE,\n    default_preparation_time INT UNSIGNED DEFAULT 30,\n    sync_menu BOOLEAN DEFAULT TRUE,\n    sync_status BOOLEAN DEFAULT TRUE,\n    menu_last_sync TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos do iFood\nCREATE TABLE ifood_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    ifood_order_id VARCHAR(100) NOT NULL,\n    ifood_status VARCHAR(50) NOT NULL,\n    status_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    order_json JSON NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ifood_order (tenant_id, ifood_order_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de mapeamento de itens do card\u00e1pio com iFood\nCREATE TABLE ifood_menu_mapping (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ifood_item_id VARCHAR(100) NOT NULL,\n    ifood_category_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_mapping (tenant_id, menu_item_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de webhooks recebidos\nCREATE TABLE webhooks (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    source VARCHAR(50) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    webhook_id VARCHAR(100) NOT NULL,\n    payload JSON NOT NULL,\n    processed BOOLEAN DEFAULT FALSE,\n    error_message TEXT DEFAULT NULL,\n    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Marketing e Comunica\u00e7\u00e3o\n-- -----------------------------------------------------\n\n-- Tabela de campanhas de marketing\nCREATE TABLE marketing_campaigns (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    campaign_type ENUM('email', 'sms', 'push', 'in_app', 'multi_channel') NOT NULL,\n    target_audience JSON DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    content JSON NOT NULL,\n    metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de mensagens enviadas\nCREATE TABLE sent_messages (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    campaign_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    message_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    recipient VARCHAR(100) NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('sent', 'delivered', 'opened', 'clicked', 'bounced', 'failed') DEFAULT 'sent',\n    status_updated_at TIMESTAMP NULL DEFAULT NULL,\n    tracking_data JSON DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (campaign_id) REFERENCES marketing_campaigns(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de modelos de comunica\u00e7\u00e3o\nCREATE TABLE message_templates (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    template_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    variables JSON DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00f5es Fiscais\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es fiscais\nCREATE TABLE fiscal_settings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    company_tax_regime VARCHAR(50) DEFAULT NULL,\n    tax_id VARCHAR(50) DEFAULT NULL,\n    state_tax_id VARCHAR(50) DEFAULT NULL,\n    municipal_tax_id VARCHAR(50) DEFAULT NULL,\n    tax_rates JSON DEFAULT NULL,\n    fiscal_printer_model VARCHAR(100) DEFAULT NULL,\n    fiscal_printer_serial VARCHAR(100) DEFAULT NULL,\n    nfce_token VARCHAR(255) DEFAULT NULL,\n    nfce_certificate VARCHAR(255) DEFAULT NULL,\n    nfce_environment ENUM('production', 'sandbox') DEFAULT 'sandbox',\n    nfce_series INT UNSIGNED DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de notas fiscais\nCREATE TABLE fiscal_receipts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    receipt_type ENUM('nfce', 'nfe', 'sat', 'nfse') NOT NULL,\n    receipt_number VARCHAR(50) NOT NULL,\n    receipt_series VARCHAR(10) DEFAULT NULL,\n    receipt_key VARCHAR(100) DEFAULT NULL,\n    status ENUM('pending', 'issued', 'cancelled', 'error') DEFAULT 'pending',\n    issue_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_reason TEXT DEFAULT NULL,\n    receipt_url VARCHAR(255) DEFAULT NULL,\n    receipt_data JSON DEFAULT NULL,\n    qr_code TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de c\u00f3digo de produtos fiscais\nCREATE TABLE fiscal_item_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ncm VARCHAR(20) DEFAULT NULL,\n    cest VARCHAR(20) DEFAULT NULL,\n    cfop VARCHAR(10) DEFAULT NULL,\n    icms_rate DECIMAL(5, 2) DEFAULT NULL,\n    pis_rate DECIMAL(5, 2) DEFAULT NULL,\n    cofins_rate DECIMAL(5, 2) DEFAULT NULL,\n    iss_rate DECIMAL(5, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Dados iniciais\n-- -----------------------------------------------------\n\n-- Inserir planos de assinatura\nINSERT INTO plans (name, code, description, price, billing_cycle, features, limits, active) VALUES\n('Plano B\u00e1sico', 'basic', 'Ideal para pequenos estabelecimentos com funcionalidades essenciais', 99.90, 'monthly', \n '[\"qrcode_basic\", \"basic_reports\"]', \n '{\"max_tables\": 10, \"max_users\": 5, \"max_menu_items\": 50, \"max_monthly_orders\": 500}', \n true),\n('Plano Padr\u00e3o', 'standard', 'Perfeito para restaurantes de m\u00e9dio porte com recursos completos', 199.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\"]', \n '{\"max_tables\": 25, \"max_users\": 15, \"max_menu_items\": 150, \"max_monthly_orders\": 2000}', \n true),\n('Plano Premium', 'premium', 'Solu\u00e7\u00e3o completa para grandes estabelecimentos com funcionalidades avan\u00e7adas', 349.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\"]', \n '{\"max_tables\": 50, \"max_users\": 30, \"max_menu_items\": 300, \"max_monthly_orders\": 5000}', \n true),\n('Plano Enterprise', 'enterprise', 'Solu\u00e7\u00e3o personalizada para redes de restaurantes e franquias', 599.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\", \"api_access\", \"custom_integrations\"]', \n '{\"max_tables\": -1, \"max_users\": -1, \"max_menu_items\": -1, \"max_monthly_orders\": -1}', \n true);\n\n-- Inserir usu\u00e1rio admin para testes (senha: admin123)\nINSERT INTO users (username, email, password, name, role, active, email_verified) VALUES\n('admin', 'admin@restaurantesaas.com.br', '$2y$12$WxkpKAQQ1RBoOaNUvDH4R.UJYPzMvEVDkn5P3nCWfxmYUQQeMLOsW', 'Administrador', 'platform_admin', true, true);\n\n-- Inserir permiss\u00f5es b\u00e1sicas\nINSERT INTO permissions (name, description) VALUES\n('view_dashboard', 'Visualizar dashboard'),\n('manage_menu', 'Gerenciar card\u00e1pio'),\n('manage_orders', 'Gerenciar pedidos'),\n('manage_tables', 'Gerenciar mesas'),\n('manage_inventory', 'Gerenciar estoque'),\n('manage_staff', 'Gerenciar funcion\u00e1rios'),\n('manage_customers', 'Gerenciar clientes'),\n('manage_payments', 'Gerenciar pagamentos'),\n('view_reports', 'Visualizar relat\u00f3rios'),\n('manage_settings', 'Gerenciar configura\u00e7\u00f5es'),\n('manage_integrations', 'Gerenciar integra\u00e7\u00f5es'),\n('admin_access', 'Acesso administrativo completo');\n\n2. **Estrutura de Diret\u00f3rios (100%)**\n\n#!/bin/bash\n\n# Criar diret\u00f3rio raiz\nmkdir -p restaurante-sistema\n\n# Criar estrutura de assets\nmkdir -p restaurante-sistema/assets/css/restaurant-types\nmkdir -p restaurante-sistema/assets/js/restaurant-types\nmkdir -p restaurante-sistema/assets/images/logo\nmkdir -p restaurante-sistema/assets/images/icons/{menu,status,actions,payment,subscription}\nmkdir -p restaurante-sistema/assets/images/menu\nmkdir -p restaurante-sistema/assets/images/ui\nmkdir -p restaurante-sistema/assets/images/plans\nmkdir -p restaurante-sistema/assets/images/restaurant-types/{alacarte,fastfood,pizzaria}\nmkdir -p restaurante-sistema/assets/fonts\n\n# Criar arquivos CSS\ntouch restaurante-sistema/assets/css/main.css\ntouch restaurante-sistema/assets/css/login.css\ntouch restaurante-sistema/assets/css/dashboard.css\ntouch restaurante-sistema/assets/css/tables.css\ntouch restaurante-sistema/assets/css/menu.css\ntouch restaurante-sistema/assets/css/kitchen.css\ntouch restaurante-sistema/assets/css/reports.css\ntouch restaurante-sistema/assets/css/ponto.css\ntouch restaurante-sistema/assets/css/fornecedores.css\ntouch restaurante-sistema/assets/css/customer-mobile.css\ntouch restaurante-sistema/assets/css/subscription.css\ntouch restaurante-sistema/assets/css/pricing.css\ntouch restaurante-sistema/assets/css/billing.css\ntouch restaurante-sistema/assets/css/onboarding.css\n\n# Criar arquivos CSS espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/css/restaurant-types/alacarte.css\ntouch restaurante-sistema/assets/css/restaurant-types/fastfood.css\ntouch restaurante-sistema/assets/css/restaurant-types/pizzaria.css\ntouch restaurante-sistema/assets/css/restaurant-types/rodizio.css\ntouch restaurante-sistema/assets/css/restaurant-types/selfservice.css\ntouch restaurante-sistema/assets/css/restaurant-types/delivery.css\ntouch restaurante-sistema/assets/css/restaurant-types/foodtruck.css\ntouch restaurante-sistema/assets/css/restaurant-types/bar.css\ntouch restaurante-sistema/assets/css/restaurant-types/cafeteria.css\ntouch restaurante-sistema/assets/css/restaurant-types/multiunit.css\n\n# Criar arquivos JavaScript\ntouch restaurante-sistema/assets/js/main.js\ntouch restaurante-sistema/assets/js/login.js\ntouch restaurante-sistema/assets/js/dashboard.js\ntouch restaurante-sistema/assets/js/tables.js\ntouch restaurante-sistema/assets/js/orders.js\ntouch restaurante-sistema/assets/js/menu.js\ntouch restaurante-sistema/assets/js/kitchen.js\ntouch restaurante-sistema/assets/js/inventory.js\ntouch restaurante-sistema/assets/js/payments.js\ntouch restaurante-sistema/assets/js/stripe-integration.js\ntouch restaurante-sistema/assets/js/subscription.js\ntouch restaurante-sistema/assets/js/pricing-calculator.js\ntouch restaurante-sistema/assets/js/billing-portal.js\ntouch restaurante-sistema/assets/js/charts.js\ntouch restaurante-sistema/assets/js/ponto.js\ntouch restaurante-sistema/assets/js/supplier-manager.js\ntouch restaurante-sistema/assets/js/group-orders.js\ntouch restaurante-sistema/assets/js/bill-splitter.js\ntouch restaurante-sistema/assets/js/onboarding.js\n\n# Criar arquivos JavaScript espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/js/restaurant-types/alacarte.js\ntouch restaurante-sistema/assets/js/restaurant-types/fastfood.js\ntouch restaurante-sistema/assets/js/restaurant-types/pizzaria.js\ntouch restaurante-sistema/assets/js/restaurant-types/rodizio.js\ntouch restaurante-sistema/assets/js/restaurant-types/selfservice.js\ntouch restaurante-sistema/assets/js/restaurant-types/delivery.js\ntouch restaurante-sistema/assets/js/restaurant-types/multiunit.js\n\n# Criar estrutura de config\nmkdir -p restaurante-sistema/config\ntouch restaurante-sistema/config/database.php\ntouch restaurante-sistema/config/constants.php\ntouch restaurante-sistema/config/stripe.php\ntouch restaurante-sistema/config/email.php\ntouch restaurante-sistema/config/sms.php\ntouch restaurante-sistema/config/qrcode.php\ntouch restaurante-sistema/config/ifood.php\ntouch restaurante-sistema/config/restaurant_types.php\ntouch restaurante-sistema/config/interface_settings.php\ntouch restaurante-sistema/config/order_methods.php\ntouch restaurante-sistema/config/subscription_plans.php\ntouch restaurante-sistema/config/tenant.php\ntouch restaurante-sistema/config/feature_limits.php\n\n# Criar estrutura de controllers\nmkdir -p restaurante-sistema/controllers/subscription\nmkdir -p restaurante-sistema/controllers/DashboardController/{AlacarteDashboardController.php,FastFoodDashboardController.php,PizzariaDashboardController.php,RodizioDashboardController.php,DeliveryDashboardController.php}\nmkdir -p restaurante-sistema/controllers/OrderController\nmkdir -p restaurante-sistema/controllers/MenuController\nmkdir -p restaurante-sistema/controllers/PaymentController\nmkdir -p restaurante-sistema/controllers/SupplierController\nmkdir -p restaurante-sistema/controllers/StaffController\n\ntouch restaurante-sistema/controllers/AuthController.php\ntouch restaurante-sistema/controllers/SubscriptionController.php\ntouch restaurante-sistema/controllers/subscription/PlansController.php\ntouch restaurante-sistema/controllers/subscription/BillingController.php\ntouch restaurante-sistema/controllers/subscription/FeatureController.php\ntouch restaurante-sistema/controllers/TenantController.php\ntouch restaurante-sistema/controllers/OnboardingController.php\ntouch restaurante-sistema/controllers/DashboardController.php\ntouch restaurante-sistema/controllers/TableController.php\ntouch restaurante-sistema/controllers/OrderController.php\ntouch restaurante-sistema/controllers/OrderController/SingleOrderController.php\ntouch restaurante-sistema/controllers/OrderController/GroupOrderController.php\ntouch restaurante-sistema/controllers/MenuController.php\ntouch restaurante-sistema/controllers/MenuController/AlacarteMenuController.php\ntouch restaurante-sistema/controllers/MenuController/FastFoodMenuController.php\ntouch restaurante-sistema/controllers/MenuController/PizzariaMenuController.php\ntouch restaurante-sistema/controllers/MenuController/RodizioMenuController.php\ntouch restaurante-sistema/controllers/MenuController/SelfServiceMenuController.php\ntouch restaurante-sistema/controllers/KitchenController.php\ntouch restaurante-sistema/controllers/InventoryController.php\ntouch restaurante-sistema/controllers/PaymentController.php\ntouch restaurante-sistema/controllers/PaymentController/BillSplitController.php\ntouch restaurante-sistema/controllers/ReportController.php\ntouch restaurante-sistema/controllers/iFoodController.php\ntouch restaurante-sistema/controllers/SupplierController.php\ntouch restaurante-sistema/controllers/SupplierController/QuickOrderController.php\ntouch restaurante-sistema/controllers/StaffController.php\ntouch restaurante-sistema/controllers/StaffController/TimeClockController.php\ntouch restaurante-sistema/controllers/CustomerController.php\ntouch restaurante-sistema/controllers/QRCodeController.php\ntouch restaurante-sistema/controllers/RestaurantTypeController.php\ntouch restaurante-sistema/controllers/SettingsController.php\n\n# Criar estrutura de models\nmkdir -p restaurante-sistema/models/Account\nmkdir -p restaurante-sistema/models/Order\nmkdir -p restaurante-sistema/models/MenuItem\nmkdir -p restaurante-sistema/models/Inventory\nmkdir -p restaurante-sistema/models/Payment\nmkdir -p restaurante-sistema/models/Staff\nmkdir -p restaurante-sistema/models/Supplier\nmkdir -p restaurante-sistema/models/Customer\n\ntouch restaurante-sistema/models/User.php\ntouch restaurante-sistema/models/Account.php\ntouch restaurante-sistema/models/Account/Subscription.php\ntouch restaurante-sistema/models/Account/Plan.php\ntouch restaurante-sistema/models/Account/Invoice.php\ntouch restaurante-sistema/models/Account/Usage.php\ntouch restaurante-sistema/models/Tenant.php\ntouch restaurante-sistema/models/Restaurant.php\ntouch restaurante-sistema/models/RestaurantType.php\ntouch restaurante-sistema/models/CashRegister.php\ntouch restaurante-sistema/models/Table.php\ntouch restaurante-sistema/models/Order.php\ntouch restaurante-sistema/models/Order/SingleOrder.php\ntouch restaurante-sistema/models/Order/GroupOrder.php\ntouch restaurante-sistema/models/OrderItem.php\ntouch restaurante-sistema/models/MenuItem.php\ntouch restaurante-sistema/models/MenuItem/AlacarteMenuItem.php\ntouch restaurante-sistema/models/MenuItem/FastFoodMenuItem.php\ntouch restaurante-sistema/models/MenuItem/PizzaMenuItem.php\ntouch restaurante-sistema/models/MenuItem/RodizioMenuItem.php\ntouch restaurante-sistema/models/Inventory.php\ntouch restaurante-sistema/models/Inventory/StockMovement.php\ntouch restaurante-sistema/models/Reservation.php\ntouch restaurante-sistema/models/Payment.php\ntouch restaurante-sistema/models/Payment/BillSplit.php\ntouch restaurante-sistema/models/Staff.php\ntouch restaurante-sistema/models/Staff/TimeClock.php\ntouch restaurante-sistema/models/Supplier.php\ntouch restaurante-sistema/models/Supplier/SupplierContact.php\ntouch restaurante-sistema/models/Supplier/SupplierOrder.php\ntouch restaurante-sistema/models/Supplier/SupplierRating.php\ntouch restaurante-sistema/models/Customer.php\ntouch restaurante-sistema/models/Customer/LoyaltyProgram.php\ntouch restaurante-sistema/models/MarketingCampaign.php\ntouch restaurante-sistema/models/QRCode.php\ntouch restaurante-sistema/models/RestaurantConfiguration.php\ntouch restaurante-sistema/models/RestaurantInterface.php\n\n# Criar estrutura de views\nmkdir -p restaurante-sistema/views/auth\nmkdir -p restaurante-sistema/views/subscription\nmkdir -p restaurante-sistema/views/onboarding\nmkdir -p restaurante-sistema/views/dashboard/{alacarte,fastfood,pizzaria,rodizio,selfservice,delivery,multiunit}\nmkdir -p restaurante-sistema/views/tables\nmkdir -p restaurante-sistema/views/menu/types\nmkdir -p restaurante-sistema/views/kitchen/types\nmkdir -p restaurante-sistema/views/inventory\nmkdir -p restaurante-sistema/views/payments\nmkdir -p restaurante-sistema/views/reports/types\nmkdir -p restaurante-sistema/views/ifood\nmkdir -p restaurante-sistema/views/suppliers\nmkdir -p restaurante-sistema/views/staff/time-clock\nmkdir -p restaurante-sistema/views/customers\nmkdir -p restaurante-sistema/views/marketing\nmkdir -p restaurante-sistema/views/qrcode\nmkdir -p restaurante-sistema/views/admin\nmkdir -p restaurante-sistema/views/settings\n\n# Criar arquivos de views de autentica\u00e7\u00e3o\ntouch restaurante-sistema/views/auth/login.php\ntouch restaurante-sistema/views/auth/reset-password.php\ntouch restaurante-sistema/views/auth/register.php\n\n# Criar arquivos de views de assinatura\ntouch restaurante-sistema/views/subscription/plans.php\ntouch restaurante-sistema/views/subscription/checkout.php\ntouch restaurante-sistema/views/subscription/success.php\ntouch restaurante-sistema/views/subscription/billing.php\ntouch restaurante-sistema/views/subscription/upgrade.php\ntouch restaurante-sistema/views/subscription/downgrade.php\ntouch restaurante-sistema/views/subscription/cancel.php\ntouch restaurante-sistema/views/subscription/payment-methods.php\n\n# Criar arquivos de views de onboarding\ntouch restaurante-sistema/views/onboarding/welcome.php\ntouch restaurante-sistema/views/onboarding/restaurant-type.php\ntouch restaurante-sistema/views/onboarding/restaurant-comparison.php\ntouch restaurante-sistema/views/onboarding/basic-info.php\ntouch restaurante-sistema/views/onboarding/menu-setup.php\ntouch restaurante-sistema/views/onboarding/operating-hours.php\ntouch restaurante-sistema/views/onboarding/table-setup.php\ntouch restaurante-sistema/views/onboarding/staff-roles.php\ntouch restaurante-sistema/views/onboarding/payment-options.php\ntouch restaurante-sistema/views/onboarding/finalize.php\n\n# Criar arquivos de views de dashboard\ntouch restaurante-sistema/views/dashboard/index.php\ntouch restaurante-sistema/views/dashboard/account-status.php\ntouch restaurante-sistema/views/dashboard/alacarte/index.php\ntouch restaurante-sistema/views/dashboard/alacarte/tables.php\ntouch restaurante-sistema/views/dashboard/fastfood/index.php\ntouch restaurante-sistema/views/dashboard/fastfood/queue.php\ntouch restaurante-sistema/views/dashboard/pizzaria/index.php\ntouch restaurante-sistema/views/dashboard/pizzaria/pizza-builder.php\ntouch restaurante-sistema/views/dashboard/rodizio/index.php\ntouch restaurante-sistema/views/dashboard/rodizio/rounds.php\ntouch restaurante-sistema/views/dashboard/selfservice/index.php\ntouch restaurante-sistema/views/dashboard/selfservice/scales.php\ntouch restaurante-sistema/views/dashboard/delivery/index.php\ntouch restaurante-sistema/views/dashboard/delivery/routes.php\ntouch restaurante-sistema/views/dashboard/multiunit/index.php\ntouch restaurante-sistema/views/dashboard/multiunit/units.php\n\n# Criar mais arquivos de views (continua\u00e7\u00e3o)\ntouch restaurante-sistema/views/tables/map.php\ntouch restaurante-sistema/views/tables/order.php\ntouch restaurante-sistema/views/tables/multi-user.php\n\ntouch restaurante-sistema/views/menu/admin.php\ntouch restaurante-sistema/views/menu/editor.php\ntouch restaurante-sistema/views/menu/customer.php\ntouch restaurante-sistema/views/menu/category-manager.php\ntouch restaurante-sistema/views/menu/promotions.php\ntouch restaurante-sistema/views/menu/types/alacarte.php\ntouch restaurante-sistema/views/menu/types/fastfood.php\ntouch restaurante-sistema/views/menu/types/pizzaria.php\ntouch restaurante-sistema/views/menu/types/rodizio.php\ntouch restaurante-sistema/views/menu/types/selfservice.php\n\ntouch restaurante-sistema/views/kitchen/panel.php\ntouch restaurante-sistema/views/kitchen/inventory-usage.php\ntouch restaurante-sistema/views/kitchen/types/alacarte.php\ntouch restaurante-sistema/views/kitchen/types/fastfood.php\ntouch restaurante-sistema/views/kitchen/types/pizzaria.php\ntouch restaurante-sistema/views/kitchen/types/rodizio.php\n\ntouch restaurante-sistema/views/inventory/management.php\ntouch restaurante-sistema/views/inventory/movements.php\ntouch restaurante-sistema/views/inventory/alerts.php\n\ntouch restaurante-sistema/views/payments/process.php\ntouch restaurante-sistema/views/payments/receipt.php\ntouch restaurante-sistema/views/payments/split-bill.php\ntouch restaurante-sistema/views/payments/group-payment.php\n\ntouch restaurante-sistema/views/reports/sales.php\ntouch restaurante-sistema/views/reports/cash.php\ntouch restaurante-sistema/views/reports/performance.php\ntouch restaurante-sistema/views/reports/financial.php\ntouch restaurante-sistema/views/reports/types/alacarte.php\ntouch restaurante-sistema/views/reports/types/fastfood.php\ntouch restaurante-sistema/views/reports/types/pizzaria.php\ntouch restaurante-sistema/views/reports/types/rodizio.php\ntouch restaurante-sistema/views/reports/types/delivery.php\n\ntouch restaurante-sistema/views/ifood/orders.php\n\ntouch restaurante-sistema/views/suppliers/list.php\ntouch restaurante-sistema/views/suppliers/details.php\ntouch restaurante-sistema/views/suppliers/quick-order.php\ntouch restaurante-sistema/views/suppliers/history.php\ntouch restaurante-sistema/views/suppliers/ratings.php\n\ntouch restaurante-sistema/views/staff/list.php\ntouch restaurante-sistema/views/staff/details.php\ntouch restaurante-sistema/views/staff/schedule.php\ntouch restaurante-sistema/views/staff/time-clock/register.php\ntouch restaurante-sistema/views/staff/time-clock/management.php\ntouch restaurante-sistema/views/staff/time-clock/reports.php\n\ntouch restaurante-sistema/views/customers/list.php\ntouch restaurante-sistema/views/customers/details.php\ntouch restaurante-sistema/views/customers/loyalty.php\n\ntouch restaurante-sistema/views/marketing/campaigns.php\ntouch restaurante-sistema/views/marketing/promotions.php\n\ntouch restaurante-sistema/views/qrcode/generator.php\ntouch restaurante-sistema/views/qrcode/manager.php\ntouch restaurante-sistema/views/qrcode/preview.php\n\ntouch restaurante-sistema/views/admin/accounts.php\ntouch restaurante-sistema/views/admin/plans.php\ntouch restaurante-sistema/views/admin/statistics.php\ntouch restaurante-sistema/views/admin/support.php\ntouch restaurante-sistema/views/admin/settings.php\n\ntouch restaurante-sistema/views/settings/general.php\ntouch restaurante-sistema/views/settings/restaurant-type.php\ntouch restaurante-sistema/views/settings/interfaces.php\ntouch restaurante-sistema/views/settings/qrcode.php\ntouch restaurante-sistema/views/settings/group-orders.php\ntouch restaurante-sistema/views/settings/time-clock.php\ntouch restaurante-sistema/views/settings/integrations.php\ntouch restaurante-sistema/views/settings/account.php\ntouch restaurante-sistema/views/settings/backup.php\n\n# Criar estrutura de includes\nmkdir -p restaurante-sistema/includes\ntouch restaurante-sistema/includes/functions.php\ntouch restaurante-sistema/includes/validation.php\ntouch restaurante-sistema/includes/session.php\ntouch restaurante-sistema/includes/security.php\ntouch restaurante-sistema/includes/currency.php\ntouch restaurante-sistema/includes/date.php\ntouch restaurante-sistema/includes/notification.php\ntouch restaurante-sistema/includes/restaurant-type-helper.php\ntouch restaurante-sistema/includes/interface-loader.php\ntouch restaurante-sistema/includes/tenant-resolver.php\ntouch restaurante-sistema/includes/feature-checker.php\ntouch restaurante-sistema/includes/subscription-helper.php\n\n# Criar estrutura de API\nmkdir -p restaurante-sistema/api/subscription\nmkdir -p restaurante-sistema/api/orders\nmkdir -p restaurante-sistema/api/payments\nmkdir -p restaurante-sistema/api/staff\n\ntouch restaurante-sistema/api/auth.php\ntouch restaurante-sistema/api/subscription.php\ntouch restaurante-sistema/api/subscription/plans.php\ntouch restaurante-sistema/api/subscription/webhooks.php\ntouch restaurante-sistema/api/subscription/billing.php\ntouch restaurante-sistema/api/tables.php\ntouch restaurante-sistema/api/orders.php\ntouch restaurante-sistema/api/orders/group-orders.php\ntouch restaurante-sistema/api/menu.php\ntouch restaurante-sistema/api/payments.php\ntouch restaurante-sistema/api/payments/bill-split.php\ntouch restaurante-sistema/api/ifood.php\ntouch restaurante-sistema/api/suppliers.php\ntouch restaurante-sistema/api/staff.php\ntouch restaurante-sistema/api/staff/time-clock.php\ntouch restaurante-sistema/api/customers.php\ntouch restaurante-sistema/api/reports.php\ntouch restaurante-sistema/api/qrcode.php\ntouch restaurante-sistema/api/restaurant-type.php\n\n# Criar estrutura de services\nmkdir -p restaurante-sistema/services\ntouch restaurante-sistema/services/StripeService.php\ntouch restaurante-sistema/services/SubscriptionService.php\ntouch restaurante-sistema/services/BillingService.php\ntouch restaurante-sistema/services/TenantService.php\ntouch restaurante-sistema/services/FeatureLimitService.php\ntouch restaurante-sistema/services/QRCodeService.php\ntouch restaurante-sistema/services/PDFService.php\ntouch restaurante-sistema/services/iFoodService.php\ntouch restaurante-sistema/services/EmailService.php\ntouch restaurante-sistema/services/SMSService.php\ntouch restaurante-sistema/services/NotificationService.php\ntouch restaurante-sistema/services/ChartService.php\ntouch restaurante-sistema/services/BackupService.php\ntouch restaurante-sistema/services/RestaurantTypeService.php\ntouch restaurante-sistema/services/InterfaceService.php\ntouch restaurante-sistema/services/ScaleService.php\ntouch restaurante-sistema/services/DeliveryTrackingService.php\ntouch restaurante-sistema/services/RodizioTrackingService.php\n\n# Criar estrutura de database\nmkdir -p restaurante-sistema/database/migrations\nmkdir -p restaurante-sistema/database/seeds\n\ntouch restaurante-sistema/database/migrations/create_tenants_table.php\ntouch restaurante-sistema/database/migrations/create_accounts_table.php\ntouch restaurante-sistema/database/migrations/create_subscriptions_table.php\ntouch restaurante-sistema/database/migrations/create_plans_table.php\ntouch restaurante-sistema/database/migrations/create_invoices_table.php\ntouch restaurante-sistema/database/migrations/create_usage_logs_table.php\ntouch restaurante-sistema/database/migrations/create_users_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_types_table.php\ntouch restaurante-sistema/database/migrations/create_restaurants_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_configurations_table.php\ntouch restaurante-sistema/database/migrations/create_tables_table.php\ntouch restaurante-sistema/database/migrations/create_menu_items_table.php\ntouch restaurante-sistema/database/migrations/create_orders_table.php\ntouch restaurante-sistema/database/migrations/create_order_items_table.php\ntouch restaurante-sistema/database/migrations/create_inventory_table.php\ntouch restaurante-sistema/database/migrations/create_customers_table.php\ntouch restaurante-sistema/database/migrations/create_staff_table.php\ntouch restaurante-sistema/database/migrations/create_time_clock_table.php\ntouch restaurante-sistema/database/migrations/create_suppliers_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_orders_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_contacts_table.php\ntouch restaurante-sistema/database/migrations/create_payments_table.php\ntouch restaurante-sistema/database/migrations/create_bill_splits_table.php\ntouch restaurante-sistema/database/migrations/create_qrcodes_table.php\n\ntouch restaurante-sistema/database/seeds/plans_seeder.php\ntouch restaurante-sistema/database/seeds/features_seeder.php\ntouch restaurante-sistema/database/seeds/users_seeder.php\ntouch restaurante-sistema/database/seeds/restaurant_types_seeder.php\ntouch restaurante-sistema/database/seeds/menu_items_seeder.php\ntouch restaurante-sistema/database/seeds/suppliers_seeder.php\ntouch restaurante-sistema/database/seeds/staff_seeder.php\n\n# Criar estrutura de public\nmkdir -p restaurante-sistema/public/webhook\nmkdir -p restaurante-sistema/public/qr/tables\nmkdir -p restaurante-sistema/public/receipt\n\ntouch restaurante-sistema/public/index.php\ntouch restaurante-sistema/public/pricing.php\ntouch restaurante-sistema/public/register.php\ntouch restaurante-sistema/public/customer-menu.php\ntouch restaurante-sistema/public/group-order.php\ntouch restaurante-sistema/public/time-clock.php\ntouch restaurante-sistema/public/webhook/stripe.php\ntouch restaurante-sistema/public/.htaccess\n\n# Criar estrutura de mobile\nmkdir -p restaurante-sistema/mobile/types\nmkdir -p restaurante-sistema/mobile/staff\n\ntouch restaurante-sistema/mobile/index.php\ntouch restaurante-sistema/mobile/menu.php\ntouch restaurante-sistema/mobile/order.php\ntouch restaurante-sistema/mobile/group-order.php\ntouch restaurante-sistema/mobile/payment.php\ntouch restaurante-sistema/mobile/types/alacarte.php\ntouch restaurante-sistema/mobile/types/fastfood.php\ntouch restaurante-sistema/mobile/types/pizzaria.php\ntouch restaurante-sistema/mobile/types/rodizio.php\ntouch restaurante-sistema/mobile/staff/time-clock.php\n\n# Criar estrutura de docs\nmkdir -p restaurante-sistema/docs/restaurant-types\n\ntouch restaurante-sistema/docs/setup.md\ntouch restaurante-sistema/docs/admin-guide.md\ntouch restaurante-sistema/docs/user-guide.md\ntouch restaurante-sistema/docs/api-docs.md\ntouch restaurante-sistema/docs/database-schema.md\ntouch restaurante-sistema/docs/subscription.md\ntouch restaurante-sistema/docs/restaurant-types/alacarte.md\ntouch restaurante-sistema/docs/restaurant-types/fastfood.md\ntouch restaurante-sistema/docs/restaurant-types/pizzaria.md\n\n# Criar estrutura de tests\nmkdir -p restaurante-sistema/tests/unit/subscription\nmkdir -p restaurante-sistema/tests/integration\nmkdir -p restaurante-sistema/tests/acceptance\n\n# Criar estrutura de vendor (diret\u00f3rio vazio para Composer)\nmkdir -p restaurante-sistema/vendor\n\n# Criar arquivos raiz\ntouch restaurante-sistema/.htaccess\ntouch restaurante-sistema/index.php\ntouch restaurante-sistema/composer.json\ntouch restaurante-sistema/package.json\ntouch restaurante-sistema/README.md\ntouch restaurante-sistema/LICENSE\ntouch restaurante-sistema/.gitignore\n\n\ntudo acima meno o banco de dados precisar ser criado, incluindo o diret\u00f3rio\n\n# CHECKPOINT DE DESENVOLVIMENTO - SISTEMA DE GEST\u00c3O DE RESTAURANTES SAAS\n\n## PROGRESSO ATUAL: 0% CONCLU\u00cdDO\n\n\nEste checkpoint resume o progresso atual e define claramente os pr\u00f3ximos passos para o desenvolvimento. Em sua pr\u00f3xima conversa, voc\u00ea pode continuar a partir deste ponto, concentrando-se na implementa\u00e7\u00e3o dos m\u00f3dulos listados acima.\n\n\n\n\n\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\n- /core/config/app.php\n- restaurante-sistema/core/Router.php\n- restaurante-sistema/core/Controller.php\n- restaurante-sistema/core/View.php\n- restaurante-sistema/core/Response.php\n- restaurante-sistema/core/ErrorHandler.php\n\n## Requisitos para o Pr\u00f3ximo Passo\n# Desenvolvimento do Sistema SaaS de Restaurantes - Pr\u00f3ximos 10%\n\nAgora que a infraestrutura b\u00e1sica do m\u00f3dulo core foi implementada com o sistema de rotas, controladores base, views e gest\u00e3o de erros, precisamos avan\u00e7ar para o pr\u00f3ximo est\u00e1gio do desenvolvimento, que representa mais 10% do projeto.\n\n## REQUISITOS DESTA ETAPA\n\n### 1. Completar o M\u00f3dulo Core\n\n#### 1.1 Sistema de Migrations\n- Implementar um sistema de migrations para versionamento do banco de dados\n- Criar as migrations para as tabelas principais do sistema:\n  - `tenants` - Tabela para gerenciar os restaurantes (multi-tenant)\n  - `users` - Usu\u00e1rios do sistema\n  - `roles` - Pap\u00e9is de usu\u00e1rio (admin, gerente, gar\u00e7om, etc.)\n  - `permissions` - Permiss\u00f5es do sistema\n  - `role_permissions` - Relacionamento entre pap\u00e9is e permiss\u00f5es\n  - `access_logs` - Registros de acesso e atividades\n\n#### 1.2 Implementa\u00e7\u00e3o de Autentica\u00e7\u00e3o\n- Completar o sistema de autentica\u00e7\u00e3o (login, logout, reset de senha)\n- Implementar middleware de autentica\u00e7\u00e3o para prote\u00e7\u00e3o de rotas\n- Criar os controladores e views para autentica\u00e7\u00e3o\n- Implementar sistema de registro de novos tenants/restaurantes\n\n#### 1.3 Gerenciamento de Tenants (Multi-tenancy)\n- Finalizar o sistema de resolu\u00e7\u00e3o de tenants por dom\u00ednio/subdom\u00ednio\n- Implementar filtros de tenant para todas as consultas\n- Criar painel administrativo b\u00e1sico para gest\u00e3o de tenants\n\n### 2. Iniciar o M\u00f3dulo de Assinaturas (Subscription)\n\n#### 2.1 Modelos de Dados\n- Implementar os modelos para:\n  - `plans` - Planos de assinatura dispon\u00edveis\n  - `subscriptions` - Assinaturas dos tenants\n  - `invoices` - Faturas geradas para assinaturas\n  - `subscription_items` - Itens inclu\u00eddos nas assinaturas\n\n#### 2.2 Integra\u00e7\u00e3o com Stripe\n- Implementar o servi\u00e7o de integra\u00e7\u00e3o com Stripe\n- Criar os endpoints para webhooks do Stripe\n- Sincronizar produtos e pre\u00e7os com o Stripe\n- Implementar o fluxo de checkout para novas assinaturas\n\n#### 2.3 Sistema de Gest\u00e3o de Assinaturas\n- Desenvolver controladores para gerenciamento de assinaturas\n- Criar views para exibi\u00e7\u00e3o de planos e status da assinatura\n- Implementar l\u00f3gica para limites de recursos com base no plano\n- Desenvolver sistema de notifica\u00e7\u00f5es para renova\u00e7\u00f5es e pagamentos\n\n## DIRETRIZES DE IMPLEMENTA\u00c7\u00c3O\n\n1. Seguir o padr\u00e3o PSR-12 para estilo de c\u00f3digo\n2. Usar namespaces adequados (`RestauranteSaas\\Module\\Component`)\n3. Documentar todas as classes e m\u00e9todos com PHPDoc\n4. Implementar valida\u00e7\u00e3o de dados em todas as entradas\n5. Tratar erros e exce\u00e7\u00f5es adequadamente\n6. Considerar a seguran\u00e7a em cada aspecto da implementa\u00e7\u00e3o\n7. Usar prepared statements para todas as consultas SQL\n8. Garantir que todas as tabelas relevantes incluam o campo `tenant_id`\n9. Aplicar filtro de tenant em cada consulta ao banco de dados\n\n## FORMATO DE C\u00d3DIGO\n\nPara facilitar a extra\u00e7\u00e3o e cria\u00e7\u00e3o autom\u00e1tica dos arquivos, use o formato:\n\n```php\n// File: caminho/do/arquivo.php\n// C\u00f3digo completo aqui...\n```\n\n## ENTREG\u00c1VEIS ESPERADOS\n\n1. Sistema completo de migrations\n2. Sistema de autentica\u00e7\u00e3o funcionando\n3. Resolu\u00e7\u00e3o de multi-tenancy implementada\n4. Modelos e controladores para assinaturas\n5. Integra\u00e7\u00e3o funcional com Stripe\n6. Views para gerenciamento de assinaturas\n7. Sistema para verifica\u00e7\u00e3o de limites de recursos por plano\n8. Documenta\u00e7\u00e3o de uso e integra\u00e7\u00e3o dos componentes\n\nLembre-se de que este sistema deve ser flex\u00edvel para atender a diversos tipos de restaurantes (\u00e0 la carte, fast food, pizzaria, rod\u00edzio) e deve ser constru\u00eddo considerando escalabilidade e seguran\u00e7a desde o in\u00edcio.\n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# Desenvolvimento do M\u00f3dulo Core - Sistema de Restaurantes SaaS\n\nVou implementar o m\u00f3dulo core do sistema conforme solicitado, seguindo as diretrizes e focando nos requisitos especificados para esta etapa.\n\n## 1. Sistema de Migrations\n\n### Migration Manager\n\n```php\n// File: restaurante-sistema/core/Database/MigrationManager.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Database;\n\nclass MigrationManager {\n    protected $db;\n    protected $migrationsTable = 'migrations';\n    protected $migrationsPath;\n    \n    public function __construct(\\PDO $db, string $migrationsPath = null) {\n        $this->db = $db;\n        $this->migrationsPath = $migrationsPath ?? dirname(__DIR__, 2) . '/database/migrations';\n        $this->ensureMigrationsTable();\n    }\n    \n    protected function ensureMigrationsTable(): void {\n        $sql = \"CREATE TABLE IF NOT EXISTS {$this->migrationsTable} (\n            id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n            migration VARCHAR(255) NOT NULL,\n            batch INT NOT NULL,\n            executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\";\n        \n        $this->db->exec($sql);\n    }\n    \n    public function getMigrations(): array {\n        $stmt = $this->db->query(\"SELECT migration FROM {$this->migrationsTable} ORDER BY id\");\n        return $stmt->fetchAll(\\PDO::FETCH_COLUMN);\n    }\n    \n    public function getPendingMigrations(): array {\n        $executedMigrations = $this->getMigrations();\n        $availableMigrations = $this->getAvailableMigrations();\n        \n        return array_diff($availableMigrations, $executedMigrations);\n    }\n    \n    public function getAvailableMigrations(): array {\n        $files = scandir($this->migrationsPath);\n        $migrations = [];\n        \n        foreach ($files as $file) {\n            if ($file === '.' || $file === '..') continue;\n            \n            if (pathinfo($file, PATHINFO_EXTENSION) === 'php') {\n                $migrations[] = pathinfo($file, PATHINFO_FILENAME);\n            }\n        }\n        \n        return $migrations;\n    }\n    \n    public function migrate(): array {\n        $pendingMigrations = $this->getPendingMigrations();\n        if (empty($pendingMigrations)) {\n            return ['message' => 'Nothing to migrate.'];\n        }\n        \n        $batch = $this->getNextBatchNumber();\n        $migratedFiles = [];\n        \n        foreach ($pendingMigrations as $migration) {\n            $file = $this->migrationsPath . '/' . $migration . '.php';\n            \n            if (file_exists($file)) {\n                require_once $file;\n                \n                $className = $this->getMigrationClassName($migration);\n                $instance = new $className($this->db);\n                \n                try {\n                    $this->db->beginTransaction();\n                    \n                    if (method_exists($instance, 'up')) {\n                        $instance->up();\n                    }\n                    \n                    $stmt = $this->db->prepare(\"INSERT INTO {$this->migrationsTable} (migration, batch) VALUES (?, ?)\");\n                    $stmt->execute([$migration, $batch]);\n                    \n                    $this->db->commit();\n                    $migratedFiles[] = $migration;\n                } catch (\\Exception $e) {\n                    $this->db->rollBack();\n                    throw new \\Exception(\"Error migrating {$migration}: \" . $e->getMessage());\n                }\n            }\n        }\n        \n        return [\n            'message' => count($migratedFiles) . ' migrations executed successfully.',\n            'migrated' => $migratedFiles\n        ];\n    }\n    \n    public function rollback(int $steps = 1): array {\n        $query = \"SELECT migration FROM {$this->migrationsTable} WHERE batch >= ? ORDER BY id DESC\";\n        $batchesToRollback = $this->getLastBatches($steps);\n        \n        if (empty($batchesToRollback)) {\n            return ['message' => 'Nothing to rollback.'];\n        }\n        \n        $stmt = $this->db->prepare($query);\n        $stmt->execute([min($batchesToRollback)]);\n        $migrations = $stmt->fetchAll(\\PDO::FETCH_COLUMN);\n        \n        $rolledBack = [];\n        \n        foreach ($migrations as $migration) {\n            $file = $this->migrationsPath . '/' . $migration . '.php';\n            \n            if (file_exists($file)) {\n                require_once $file;\n                \n                $className = $this->getMigrationClassName($migration);\n                $instance = new $className($this->db);\n                \n                try {\n                    $this->db->beginTransaction();\n                    \n                    if (method_exists($instance, 'down')) {\n                        $instance->down();\n                    }\n                    \n                    $stmt = $this->db->prepare(\"DELETE FROM {$this->migrationsTable} WHERE migration = ?\");\n                    $stmt->execute([$migration]);\n                    \n                    $this->db->commit();\n                    $rolledBack[] = $migration;\n                } catch (\\Exception $e) {\n                    $this->db->rollBack();\n                    throw new \\Exception(\"Error rolling back {$migration}: \" . $e->getMessage());\n                }\n            }\n        }\n        \n        return [\n            'message' => count($rolledBack) . ' migrations rolled back successfully.',\n            'rolled_back' => $rolledBack\n        ];\n    }\n    \n    protected function getNextBatchNumber(): int {\n        $stmt = $this->db->query(\"SELECT MAX(batch) as batch FROM {$this->migrationsTable}\");\n        $result = $stmt->fetch(\\PDO::FETCH_ASSOC);\n        \n        return (int) ($result['batch'] ?? 0) + 1;\n    }\n    \n    protected function getLastBatches(int $steps): array {\n        $query = \"SELECT DISTINCT batch FROM {$this->migrationsTable} ORDER BY batch DESC LIMIT ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$steps]);\n        \n        return $stmt->fetchAll(\\PDO::FETCH_COLUMN);\n    }\n    \n    protected function getMigrationClassName(string $migration): string {\n        // Convert snake_case to CamelCase\n        $className = str_replace(' ', '', ucwords(str_replace('_', ' ', $migration)));\n        \n        // Check if the class uses a namespace\n        $content = file_get_contents($this->migrationsPath . '/' . $migration . '.php');\n        preg_match('/namespace\\s+([^;]+)/i', $content, $matches);\n        \n        if (isset($matches[1])) {\n            return trim($matches[1]) . '\\\\' . $className;\n        }\n        \n        return $className;\n    }\n    \n    // Helper method to run migrations from CLI\n    public static function runFromCli(\\PDO $db, string $migrationsPath = null, string $action = 'migrate', int $steps = 1): void {\n        $manager = new self($db, $migrationsPath);\n        \n        switch ($action) {\n            case 'migrate':\n                $result = $manager->migrate();\n                break;\n            case 'rollback':\n                $result = $manager->rollback($steps);\n                break;\n            default:\n                $result = ['message' => 'Unknown action: ' . $action];\n        }\n        \n        echo $result['message'] . PHP_EOL;\n        \n        if (isset($result['migrated']) && !empty($result['migrated'])) {\n            echo \"Migrated files:\" . PHP_EOL;\n            foreach ($result['migrated'] as $file) {\n                echo \"- {$file}\" . PHP_EOL;\n            }\n        }\n        \n        if (isset($result['rolled_back']) && !empty($result['rolled_back'])) {\n            echo \"Rolled back files:\" . PHP_EOL;\n            foreach ($result['rolled_back'] as $file) {\n                echo \"- {$file}\" . PHP_EOL;\n            }\n        }\n    }\n}\n```\n\n### Base Migration Class\n\n```php\n// File: restaurante-sistema/core/Database/Migration.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Database;\n\nabstract class Migration {\n    protected $db;\n    \n    public function __construct(\\PDO $db) {\n        $this->db = $db;\n    }\n    \n    abstract public function up(): void;\n    abstract public function down(): void;\n    \n    protected function createTable(string $table, array $columns, array $options = []): void {\n        $columnsStr = implode(', ', $columns);\n        \n        $sql = \"CREATE TABLE IF NOT EXISTS `{$table}` (\n            {$columnsStr}\n        )\";\n        \n        if (!empty($options)) {\n            $sql .= ' ' . implode(' ', $options);\n        }\n        \n        $this->db->exec($sql);\n    }\n    \n    protected function dropTable(string $table): void {\n        $this->db->exec(\"DROP TABLE IF EXISTS `{$table}`\");\n    }\n    \n    protected function addColumn(string $table, string $column, string $definition): void {\n        $this->db->exec(\"ALTER TABLE `{$table}` ADD COLUMN {$column} {$definition}\");\n    }\n    \n    protected function dropColumn(string $table, string $column): void {\n        $this->db->exec(\"ALTER TABLE `{$table}` DROP COLUMN `{$column}`\");\n    }\n    \n    protected function createIndex(string $table, array $columns, string $name = null, bool $unique = false): void {\n        $columnsStr = implode('`, `', $columns);\n        $indexType = $unique ? 'UNIQUE INDEX' : 'INDEX';\n        $indexName = $name ?? implode('_', $columns) . '_idx';\n        \n        $this->db->exec(\"CREATE {$indexType} `{$indexName}` ON `{$table}` (`{$columnsStr}`)\");\n    }\n    \n    protected function dropIndex(string $table, string $name): void {\n        $this->db->exec(\"DROP INDEX `{$name}` ON `{$table}`\");\n    }\n    \n    protected function execute(string $sql): void {\n        $this->db->exec($sql);\n    }\n}\n```\n\n### CLI Migration Runner\n\n```php\n// File: restaurante-sistema/migrate.php\n<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config/database.php';\n\nuse RestauranteSaas\\Core\\Database\\MigrationManager;\n\n// Get database connection\n$db = new PDO(\n    \"mysql:host={$db_config['host']};dbname={$db_config['database']};charset=utf8mb4\",\n    $db_config['username'],\n    $db_config['password'],\n    [\n        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n        PDO::ATTR_EMULATE_PREPARES => false,\n    ]\n);\n\n// Parse command line arguments\n$action = $argv[1] ?? 'migrate';\n$steps = isset($argv[2]) ? (int) $argv[2] : 1;\n\n// Run migration manager\nMigrationManager::runFromCli($db, null, $action, $steps);\n```\n\n### Actual Migration Files\n\n```php\n// File: restaurante-sistema/database/migrations/001_create_tenants_table.php\n<?php\n\nnamespace RestauranteSaas\\Database\\Migrations;\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateTenantsTable extends Migration {\n    public function up(): void {\n        $this->createTable('tenants', [\n            'id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY',\n            'name VARCHAR(100) NOT NULL',\n            'slug VARCHAR(100) NOT NULL UNIQUE',\n            'restaurant_type VARCHAR(20) NOT NULL',\n            'company_name VARCHAR(150) NOT NULL',\n            'cnpj VARCHAR(18) NOT NULL UNIQUE',\n            'email VARCHAR(100) NOT NULL',\n            'phone VARCHAR(20) NOT NULL',\n            'address VARCHAR(255) NOT NULL',\n            'city VARCHAR(100) NOT NULL',\n            'state VARCHAR(2) NOT NULL',\n            'zip_code VARCHAR(10) NOT NULL',\n            'logo VARCHAR(255) DEFAULT NULL',\n            'theme_color VARCHAR(7) DEFAULT \"#3498db\"',\n            'domain VARCHAR(100) DEFAULT NULL',\n            \n            // Campos para configura\u00e7\u00e3o de pagamentos\n            'payment_gateway ENUM(\"stripe\", \"mercadopago\", \"cielo\", \"pagseguro\", \"rede\") DEFAULT \"stripe\"',\n            'payment_gateway_key VARCHAR(255) DEFAULT NULL',\n            'payment_gateway_token VARCHAR(255) DEFAULT NULL',\n            'bank_name VARCHAR(100) DEFAULT NULL',\n            'bank_agency VARCHAR(20) DEFAULT NULL',\n            'bank_account VARCHAR(30) DEFAULT NULL',\n            'pix_key VARCHAR(255) DEFAULT NULL',\n            'payment_methods JSON DEFAULT \\'{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}\\'',\n            'payment_settings JSON DEFAULT \\'{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}\\'',\n            \n            'active BOOLEAN DEFAULT TRUE',\n            'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP',\n            'updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'\n        ]);\n    }\n    \n    public function down(): void {\n        $this->dropTable('tenants');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/002_create_users_table.php\n<?php\n\nnamespace RestauranteSaas\\Database\\Migrations;\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateUsersTable extends Migration {\n    public function up(): void {\n        $this->createTable('users', [\n            'id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY',\n            'tenant_id INT UNSIGNED NULL DEFAULT NULL',\n            'username VARCHAR(50) NOT NULL',\n            'email VARCHAR(100) NOT NULL',\n            'password VARCHAR(255) NOT NULL',\n            'name VARCHAR(100) NOT NULL',\n            'role ENUM(\"admin\", \"manager\", \"cashier\", \"waiter\", \"cook\", \"delivery\", \"customer\", \"platform_admin\") NOT NULL',\n            'phone VARCHAR(20) DEFAULT NULL',\n            'profile_image VARCHAR(255) DEFAULT NULL',\n            'active BOOLEAN DEFAULT TRUE',\n            'email_verified BOOLEAN DEFAULT FALSE',\n            'last_login TIMESTAMP NULL DEFAULT NULL',\n            'password_reset_token VARCHAR(100) DEFAULT NULL',\n            'password_reset_expires TIMESTAMP NULL DEFAULT NULL',\n            'remember_token VARCHAR(100) DEFAULT NULL',\n            'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP',\n            'updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',\n            'UNIQUE KEY unique_user_email (email)',\n            'UNIQUE KEY unique_user_username (username)',\n            'FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE'\n        ]);\n    }\n    \n    public function down(): void {\n        $this->dropTable('users');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/003_create_roles_table.php\n<?php\n\nnamespace RestauranteSaas\\Database\\Migrations;\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateRolesTable extends Migration {\n    public function up(): void {\n        $this->createTable('roles', [\n            'id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY',\n            'tenant_id INT UNSIGNED NOT NULL',\n            'name VARCHAR(50) NOT NULL',\n            'description VARCHAR(255) DEFAULT NULL',\n            'is_system BOOLEAN DEFAULT FALSE',\n            'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP',\n            'updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',\n            'UNIQUE KEY unique_role_per_tenant (tenant_id, name)',\n            'FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE'\n        ]);\n        \n        // Insert default roles\n        $this->execute(\"INSERT INTO roles (tenant_id, name, description, is_system) \n                         SELECT id, 'Admin', 'Administrator with full access', TRUE FROM tenants\");\n        \n        $this->execute(\"INSERT INTO roles (tenant_id, name, description, is_system) \n                         SELECT id, 'Manager', 'Restaurant manager with limited administrative access', TRUE FROM tenants\");\n                         \n        $this->execute(\"INSERT INTO roles (tenant_id, name, description, is_system) \n                         SELECT id, 'Waiter', 'Responsible for taking orders and serving customers', TRUE FROM tenants\");\n                         \n        $this->execute(\"INSERT INTO roles (tenant_id, name, description, is_system) \n                         SELECT id, 'Cashier', 'Handles payments and billing', TRUE FROM tenants\");\n                         \n        $this->execute(\"INSERT INTO roles (tenant_id, name, description, is_system) \n                         SELECT id, 'Cook', 'Kitchen staff preparing orders', TRUE FROM tenants\");\n    }\n    \n    public function down(): void {\n        $this->dropTable('roles');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/004_create_permissions_table.php\n<?php\n\nnamespace RestauranteSaas\\Database\\Migrations;\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreatePermissionsTable extends Migration {\n    public function up(): void {\n        $this->createTable('permissions', [\n            'id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY',\n            'name VARCHAR(50) NOT NULL',\n            'description VARCHAR(255) NOT NULL',\n            'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP'\n        ]);\n        \n        // Insert default permissions\n        $permissions = [\n            ['view_dashboard', 'Visualizar dashboard'],\n            ['manage_menu', 'Gerenciar card\u00e1pio'],\n            ['manage_orders', 'Gerenciar pedidos'],\n            ['manage_tables', 'Gerenciar mesas'],\n            ['manage_inventory', 'Gerenciar estoque'],\n            ['manage_staff', 'Gerenciar funcion\u00e1rios'],\n            ['manage_customers', 'Gerenciar clientes'],\n            ['manage_payments', 'Gerenciar pagamentos'],\n            ['view_reports', 'Visualizar relat\u00f3rios'],\n            ['manage_settings', 'Gerenciar configura\u00e7\u00f5es'],\n            ['manage_integrations', 'Gerenciar integra\u00e7\u00f5es'],\n            ['admin_access', 'Acesso administrativo completo']\n        ];\n        \n        foreach ($permissions as $permission) {\n            $this->execute(\"INSERT INTO permissions (name, description) VALUES ('{$permission[0]}', '{$permission[1]}')\");\n        }\n    }\n    \n    public function down(): void {\n        $this->dropTable('permissions');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n<?php\n\nnamespace RestauranteSaas\\Database\\Migrations;\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateRolePermissionsTable extends Migration {\n    public function up(): void {\n        $this->createTable('role_permissions', [\n            'id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY',\n            'tenant_id INT UNSIGNED NOT NULL',\n            'role_id INT UNSIGNED NOT NULL',\n            'permission_id INT UNSIGNED NOT NULL',\n            'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP',\n            'UNIQUE KEY unique_role_permission (tenant_id, role_id, permission_id)',\n            'FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE',\n            'FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE',\n            'FOREIGN KEY (permission_id) REFERENCES permissions(id)'\n        ]);\n        \n        // Dar todas as permiss\u00f5es para o Admin\n        $this->execute(\"INSERT INTO role_permissions (tenant_id, role_id, permission_id)\n                        SELECT t.id, r.id, p.id \n                        FROM tenants t \n                        JOIN roles r ON r.tenant_id = t.id AND r.name = 'Admin' \n                        CROSS JOIN permissions p\");\n    }\n    \n    public function down(): void {\n        $this->dropTable('role_permissions');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/006_create_access_logs_table.php\n<?php\n\nnamespace RestauranteSaas\\Database\\Migrations;\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateAccessLogsTable extends Migration {\n    public function up(): void {\n        $this->createTable('access_logs', [\n            'id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY',\n            'user_id INT UNSIGNED NOT NULL',\n            'tenant_id INT UNSIGNED DEFAULT NULL',\n            'ip_address VARCHAR(45) NOT NULL',\n            'user_agent VARCHAR(255) NOT NULL',\n            'action VARCHAR(50) NOT NULL',\n            'details JSON DEFAULT NULL',\n            'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP',\n            'FOREIGN KEY (user_id) REFERENCES users(id)',\n            'FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE'\n        ]);\n    }\n    \n    public function down(): void {\n        $this->dropTable('access_logs');\n    }\n}\n```\n\n## 2. Sistema de Autentica\u00e7\u00e3o\n\n### Modelo de Usu\u00e1rio\n\n```php\n// File: restaurante-sistema/models/User.php\n<?php\n\nnamespace RestauranteSaas\\Models;\n\nuse RestauranteSaas\\Core\\Database\\Model;\n\nclass User extends Model {\n    protected $table = 'users';\n    protected $fillable = [\n        'tenant_id', 'username', 'email', 'password', 'name', 'role', \n        'phone', 'profile_image', 'active', 'email_verified'\n    ];\n    protected $hidden = ['password', 'password_reset_token', 'remember_token'];\n    \n    /**\n     * Verifica se a senha fornecida \u00e9 v\u00e1lida para este usu\u00e1rio\n     *\n     * @param string $password Senha n\u00e3o-criptografada\n     * @return bool Verdadeiro se a senha est\u00e1 correta\n     */\n    public function verifyPassword(string $password): bool {\n        return password_verify($password, $this->password);\n    }\n    \n    /**\n     * Atualiza a senha do usu\u00e1rio\n     *\n     * @param string $password Nova senha (n\u00e3o-criptografada)\n     * @return bool Sucesso da opera\u00e7\u00e3o\n     */\n    public function updatePassword(string $password): bool {\n        $this->password = password_hash($password, PASSWORD_DEFAULT);\n        return $this->save();\n    }\n    \n    /**\n     * Gera um token para redefini\u00e7\u00e3o de senha\n     *\n     * @return string Token gerado\n     */\n    public function generatePasswordResetToken(): string {\n        $token = bin2hex(random_bytes(32));\n        \n        $this->password_reset_token = $token;\n        $this->password_reset_expires = date('Y-m-d H:i:s', strtotime('+1 hour'));\n        $this->save();\n        \n        return $token;\n    }\n    \n    /**\n     * Verifica se o token de redefini\u00e7\u00e3o de senha \u00e9 v\u00e1lido\n     *\n     * @param string $token Token a ser verificado\n     * @return bool Verdadeiro se o token \u00e9 v\u00e1lido\n     */\n    public function validatePasswordResetToken(string $token): bool {\n        if ($this->password_reset_token !== $token) {\n            return false;\n        }\n        \n        $expires = strtotime($this->password_reset_expires);\n        if ($expires < time()) {\n            return false;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Limpa o token de redefini\u00e7\u00e3o de senha\n     *\n     * @return bool Sucesso da opera\u00e7\u00e3o\n     */\n    public function clearPasswordResetToken(): bool {\n        $this->password_reset_token = null;\n        $this->password_reset_expires = null;\n        return $this->save();\n    }\n    \n    /**\n     * Gera um token de lembrar\n     *\n     * @return string Token gerado\n     */\n    public function generateRememberToken(): string {\n        $token = bin2hex(random_bytes(32));\n        \n        $this->remember_token = $token;\n        $this->save();\n        \n        return $token;\n    }\n    \n    /**\n     * Limpa o token de lembrar\n     *\n     * @return bool Sucesso da opera\u00e7\u00e3o\n     */\n    public function clearRememberToken(): bool {\n        $this->remember_token = null;\n        return $this->save();\n    }\n    \n    /**\n     * Registra o \u00faltimo login do usu\u00e1rio\n     *\n     * @return bool Sucesso da opera\u00e7\u00e3o\n     */\n    public function recordLogin(): bool {\n        $this->last_login = date('Y-m-d H:i:s');\n        return $this->save();\n    }\n    \n    /**\n     * Verifica se o usu\u00e1rio tem uma permiss\u00e3o espec\u00edfica\n     *\n     * @param string $permission Nome da permiss\u00e3o\n     * @return bool Verdadeiro se tem permiss\u00e3o\n     */\n    public function hasPermission(string $permission): bool {\n        // Se for admin da plataforma, tem todas as permiss\u00f5es\n        if ($this->role === 'platform_admin') {\n            return true;\n        }\n        \n        // Verifica as permiss\u00f5es no banco de dados\n        $sql = \"SELECT COUNT(*) FROM role_permissions rp\n                JOIN roles r ON rp.role_id = r.id\n                JOIN permissions p ON rp.permission_id = p.id\n                WHERE r.name = ? AND p.name = ? AND rp.tenant_id = ?\";\n        \n        $stmt = $this->db->prepare($sql);\n        $stmt->execute([$this->role, $permission, $this->tenant_id]);\n        \n        return (bool) $stmt->fetchColumn();\n    }\n    \n    /**\n     * Obt\u00e9m todas as permiss\u00f5es do usu\u00e1rio\n     *\n     * @return array Lista de permiss\u00f5es\n     */\n    public function getPermissions(): array {\n        if ($this->role === 'platform_admin') {\n            // Admin da plataforma tem todas as permiss\u00f5es\n            $sql = \"SELECT name FROM permissions\";\n            $stmt = $this->db->query($sql);\n            return $stmt->fetchAll(\\PDO::FETCH_COLUMN);\n        }\n        \n        $sql = \"SELECT p.name FROM role_permissions rp\n                JOIN roles r ON rp.role_id = r.id\n                JOIN permissions p ON rp.permission_id = p.id\n                WHERE r.name = ? AND rp.tenant_id = ?\";\n        \n        $stmt = $this->db->prepare($sql);\n        $stmt->execute([$this->role, $this->tenant_id]);\n        \n        return $stmt->fetchAll(\\PDO::FETCH_COLUMN);\n    }\n    \n    /**\n     * Registra uma a\u00e7\u00e3o do usu\u00e1rio no log\n     *\n     * @param string $action Nome da a\u00e7\u00e3o\n     * @param array $details Detalhes da a\u00e7\u00e3o (opcional)\n     * @return bool Sucesso da opera\u00e7\u00e3o\n     */\n    public function logAction(string $action, array $details = null): bool {\n        $sql = \"INSERT INTO access_logs (user_id, tenant_id, ip_address, user_agent, action, details)\n                VALUES (?, ?, ?, ?, ?, ?)\";\n        \n        $stmt = $this->db->prepare($sql);\n        \n        return $stmt->execute([\n            $this->id,\n            $this->tenant_id,\n            $_SERVER['REMOTE_ADDR'] ?? '0.0.0.0',\n            $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown',\n            $action,\n            $details ? json_encode($details) : null\n        ]);\n    }\n}\n```\n\n### Controlador de Autentica\u00e7\u00e3o\n\n```php\n// File: restaurante-sistema/controllers/AuthController.php\n<?php\n\nnamespace RestauranteSaas\\Controllers;\n\nuse RestauranteSaas\\Core\\Controller;\nuse RestauranteSaas\\Core\\Request;\nuse RestauranteSaas\\Core\\Response;\nuse RestauranteSaas\\Core\\Auth;\nuse RestauranteSaas\\Models\\User;\nuse RestauranteSaas\\Services\\EmailService;\nuse RestauranteSaas\\Core\\Validator;\n\nclass AuthController extends Controller {\n    protected $auth;\n    \n    public function __construct() {\n        parent::__construct();\n        $this->auth = new Auth();\n    }\n    \n    /**\n     * Mostra a p\u00e1gina de login\n     */\n    public function showLogin() {\n        // Redirecionar se j\u00e1 estiver logado\n        if ($this->auth->check()) {\n            return $this->redirect('/dashboard');\n        }\n        \n        return $this->view('auth/login');\n    }\n    \n    /**\n     * Processa a tentativa de login\n     */\n    public function login(Request $request) {\n        $validator = new Validator();\n        $validator->validate($request->all(), [\n            'email' => 'required|email',\n            'password' => 'required|min:8'\n        ]);\n        \n        if ($validator->fails()) {\n            return $this->redirect('/login')->withErrors($validator->errors());\n        }\n        \n        $remember = $request->input('remember', false);\n        \n        // Tentar login\n        if ($this->auth->attempt($request->input('email'), $request->input('password'), $remember)) {\n            // Log da a\u00e7\u00e3o\n            $user = $this->auth->user();\n            $user->logAction('login');\n            \n            // Redirecionar para p\u00e1gina pretendida ou dashboard\n            $intended = $this->session->get('intended_url');\n            $this->session->forget('intended_url');\n            \n            return $this->redirect($intended ?? '/dashboard');\n        }\n        \n        // Login falhou\n        return $this->redirect('/login')->withErrors(['auth' => 'Credenciais inv\u00e1lidas']);\n    }\n    \n    /**\n     * Efetua o logout do usu\u00e1rio\n     */\n    public function logout() {\n        // Log da a\u00e7\u00e3o antes de fazer logout\n        if ($this->auth->check()) {\n            $user = $this->auth->user();\n            $user->logAction('logout');\n        }\n        \n        $this->auth->logout();\n        return $this->redirect('/login');\n    }\n    \n    /**\n     * Mostra o formul\u00e1rio de cadastro\n     */\n    public function showRegister() {\n        // Redirecionar se j\u00e1 estiver logado\n        if ($this->auth->check()) {\n            return $this->redirect('/dashboard');\n        }\n        \n        return $this->view('auth/register');\n    }\n    \n    /**\n     * Processa a solicita\u00e7\u00e3o de registro\n     */\n    public function register(Request $request) {\n        $validator = new Validator();\n        $validator->validate($request->all(), [\n            'name' => 'required|min:3',\n            'email' => 'required|email|unique:users,email',\n            'username' => 'required|min:3|unique:users,username|alpha_dash',\n            'password' => 'required|min:8|confirmed',\n            'company_name' => 'required|min:3',\n            'cnpj' => 'required|size:18|unique:tenants,cnpj',\n            'phone' => 'required',\n            'restaurant_type' => 'required|in:alacarte,fastfood,pizzaria,rodizio,delivery,selfservice'\n        ]);\n        \n        if ($validator->fails()) {\n            return $this->redirect('/register')->withErrors($validator->errors())->withInput();\n        }\n        \n        // Criar tenant (restaurante)\n        $tenantModel = new \\RestauranteSaas\\Models\\Tenant();\n        $tenant = $tenantModel->create([\n            'name' => $request->input('name'),\n            'slug' => $this->generateSlug($request->input('name')),\n            'restaurant_type' => $request->input('restaurant_type'),\n            'company_name' => $request->input('company_name'),\n            'cnpj' => $request->input('cnpj'),\n            'email' => $request->input('email'),\n            'phone' => $request->input('phone'),\n            'address' => $request->input('address', ''),\n            'city' => $request->input('city', ''),\n            'state' => $request->input('state', ''),\n            'zip_code' => $request->input('zip_code', '')\n        ]);\n        \n        // Criar usu\u00e1rio administrador\n        $userModel = new User();\n        $user = $userModel->create([\n            'tenant_id' => $tenant->id,\n            'username' => $request->input('username'),\n            'email' => $request->input('email'),\n            'password' => password_hash($request->input('password'), PASSWORD_DEFAULT),\n            'name' => $request->input('name'),\n            'role' => 'admin',\n            'phone' => $request->input('phone'),\n            'active' => true\n        ]);\n        \n        // Enviar email de confirma\u00e7\u00e3o\n        $emailService = new EmailService();\n        $emailService->sendWelcomeEmail($user);\n        \n        // Fazer login autom\u00e1tico\n        $this->auth->loginById($user->id);\n        \n        // Registrar a a\u00e7\u00e3o\n        $user->logAction('register', ['tenant_id' => $tenant->id]);\n        \n        // Redirecionar para onboarding\n        return $this->redirect('/onboarding');\n    }\n    \n    /**\n     * Mostra a p\u00e1gina de solicita\u00e7\u00e3o de redefini\u00e7\u00e3o de senha\n     */\n    public function showForgotPassword() {\n        return $this->view('auth/forgot-password');\n    }\n    \n    /**\n     * Processa a solicita\u00e7\u00e3o de redefini\u00e7\u00e3o de senha\n     */\n    public function forgotPassword(Request $request) {\n        $validator = new Validator();\n        $validator->validate($request->all(), [\n            'email' => 'required|email'\n        ]);\n        \n        if ($validator->fails()) {\n            return $this->redirect('/forgot-password')->withErrors($validator->errors());\n        }\n        \n        $email = $request->input('email');\n        $userModel = new User();\n        $user = $userModel->where('email', $email)->first();\n        \n        // Sempre mostrar mensagem de sucesso, mesmo que o email n\u00e3o exista\n        // Isso \u00e9 para evitar que algu\u00e9m verifique emails existentes\n        if (!$user) {\n            return $this->redirect('/forgot-password')->with('success', 'Se o email existir, voc\u00ea receber\u00e1 as instru\u00e7\u00f5es para redefinir sua senha.');\n        }\n        \n        // Gerar token e enviar email\n        $token = $user->generatePasswordResetToken();\n        $emailService = new EmailService();\n        $emailService->sendPasswordResetEmail($user, $token);\n        \n        return $this->redirect('/forgot-password')->with('success', 'Enviamos um email com instru\u00e7\u00f5es para redefinir sua senha.');\n    }\n    \n    /**\n     * Mostra o formul\u00e1rio para redefinir a senha\n     */\n    public function showResetPassword(Request $request, $token) {\n        return $this->view('auth/reset-password', ['token' => $token]);\n    }\n    \n    /**\n     * Processa a redefini\u00e7\u00e3o de senha\n     */\n    public function resetPassword(Request $request) {\n        $validator = new Validator();\n        $validator->validate($request->all(), [\n            'token' => 'required',\n            'email' => 'required|email',\n            'password' => 'required|min:8|confirmed'\n        ]);\n        \n        if ($validator->fails()) {\n            return $this->redirect()->back()->withErrors($validator->errors());\n        }\n        \n        $token = $request->input('token');\n        $email = $request->input('email');\n        $password = $request->input('password');\n        \n        $userModel = new User();\n        $user = $userModel->where('email', $email)->first();\n        \n        if (!$user || !$user->validatePasswordResetToken($token)) {\n            return $this->redirect()->back()->withErrors(['token' => 'Token inv\u00e1lido ou expirado.']);\n        }\n        \n        // Atualizar senha e limpar token\n        $user->updatePassword($password);\n        $user->clearPasswordResetToken();\n        \n        // Registrar a a\u00e7\u00e3o\n        $user->logAction('password_reset');\n        \n        // Login autom\u00e1tico\n        $this->auth->loginById($user->id);\n        \n        return $this->redirect('/dashboard')->with('success', 'Sua senha foi redefinida com sucesso.');\n    }\n    \n    /**\n     * Mostra a p\u00e1gina para verificar o email\n     */\n    public function showVerifyEmail(Request $request, $token) {\n        // Verificar token\n        $userModel = new User();\n        $user = $userModel->where('password_reset_token', $token)->first();\n        \n        if (!$user || !$user->validatePasswordResetToken($token)) {\n            return $this->redirect('/login')->withErrors(['token' => 'Token inv\u00e1lido ou expirado.']);\n        }\n        \n        // Marcar email como verificado\n        $user->email_verified = true;\n        $user->clearPasswordResetToken();\n        $user->save();\n        \n        // Registrar a a\u00e7\u00e3o\n        $user->logAction('email_verified');\n        \n        // Login autom\u00e1tico\n        $this->auth->loginById($user->id);\n        \n        return $this->redirect('/dashboard')->with('success', 'Seu email foi verificado com sucesso.');\n    }\n    \n    /**\n     * Gera um slug \u00fanico para o tenant\n     */\n    protected function generateSlug(string $name): string {\n        $slug = strtolower(trim(preg_replace('/[^A-Za-z0-9-]+/', '-', $name)));\n        \n        $tenantModel = new \\RestauranteSaas\\Models\\Tenant();\n        $count = 0;\n        $originalSlug = $slug;\n        \n        // Verificar se o slug j\u00e1 existe e adicionar um n\u00famero ao final se necess\u00e1rio\n        while ($tenantModel->where('slug', $slug)->exists()) {\n            $count++;\n            $slug = $originalSlug . '-' . $count;\n        }\n        \n        return $slug;\n    }\n}\n```\n\n### Classe de Autentica\u00e7\u00e3o\n\n```php\n// File: restaurante-sistema/core/Auth.php\n<?php\n\nnamespace RestauranteSaas\\Core;\n\nuse RestauranteSaas\\Models\\User;\n\nclass Auth {\n    protected $user = null;\n    protected $session;\n    ",
                "tokens_used": 50938,
                "response_time": 120.75
            },
            {
                "id": "bfaacd4990bc6a29b03ab6a28a0a2f95",
                "timestamp": "2025-03-18T03:01:14.883506",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\n\n\n# Projeto Completo - Sistema de Gest\u00e3o de Restaurantes SaaS\n\n## 1. Tecnologias que devem ser usadas\n\nHTML,CSS,Javascript,PHP, mysql essa aplica\u00e7ao dever ser feita em web apenas\n\n## 1. Vis\u00e3o Geral do Projeto\n\n### 1.1 Descri\u00e7\u00e3o do Projeto\n\nO projeto consiste em um sistema de gest\u00e3o de restaurantes oferecido como servi\u00e7o por assinatura (SaaS - Software as a Service). O sistema atende a diversos tipos de estabelecimentos (\u00e0 la carte, fast food, pizzaria, rod\u00edzio, etc.) com funcionalidades adaptadas para cada modelo de neg\u00f3cio, permitindo opera\u00e7\u00f5es atrav\u00e9s de QR Code ou atendimento tradicional com gar\u00e7ons.\n\n### 1.2 Objetivos Principais\n\n1. Oferecer um sistema completo e personaliz\u00e1vel para gest\u00e3o de restaurantes\n2. Permitir flexibilidade para diferentes modelos de neg\u00f3cio\n3. Implementar uma estrutura escal\u00e1vel baseada em assinaturas\n4. Garantir uma experi\u00eancia otimizada tanto para restaurantes quanto para clientes finais\n5. Proporcionar integra\u00e7\u00e3o com servi\u00e7os externos (Stripe, iFood, etc.)\n\n### 1.3 P\u00fablico-Alvo\n\n- Restaurantes tradicionais \u00e0 la carte\n- Fast-foods e lanchonetes\n- Pizzarias e delivery\n- Rod\u00edzios e buf\u00eas\n- Bares e pubs\n- Food trucks\n- Redes de restaurantes\n\n### 1.4 Proposta de Valor\n\n- Redu\u00e7\u00e3o de custos operacionais\n- Aumento da efici\u00eancia no atendimento\n- Melhoria da experi\u00eancia do cliente\n- Maior controle financeiro e operacional\n- Insights de neg\u00f3cio baseados em dados\n- Flexibilidade para diferentes modelos e tamanhos de opera\u00e7\u00e3o\n\n## 2. Arquitetura do Sistema\n\n### 2.1 Vis\u00e3o Geral da Arquitetura\n\nO sistema utiliza uma arquitetura de tr\u00eas camadas:\n\n1. **Camada de Apresenta\u00e7\u00e3o**: Interfaces web e mobile para diferentes perfis de usu\u00e1rio\n2. **Camada de Aplica\u00e7\u00e3o**: L\u00f3gica de neg\u00f3cio, processamento e servi\u00e7os\n3. **Camada de Dados**: Persist\u00eancia e gerenciamento de dados\n\n### 2.2 Modelo Multi-Tenant\n\nO sistema \u00e9 constru\u00eddo com arquitetura multi-tenant, onde m\u00faltiplos restaurantes (tenants) compartilham a mesma infraestrutura, mas com dados completamente isolados:\n\n- Cada tenant possui um identificador \u00fanico\n- Todas as opera\u00e7\u00f5es de banco de dados incluem filtro por tenant\n- Recursos s\u00e3o alocados conforme o plano de assinatura\n- Backups s\u00e3o individualizados por tenant\n\n### 2.3 Infraestrutura de Nuvem\n\nA plataforma ser\u00e1 hospedada em infraestrutura de nuvem para garantir:\n\n- Alta disponibilidade (99.9+%)\n- Escalabilidade horizontal e vertical\n- Balanceamento de carga\n- Backups automatizados\n- Recupera\u00e7\u00e3o de desastres\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n\n### 2.4 Integra\u00e7\u00f5es Externas\n\nO sistema se integrar\u00e1 com diversos servi\u00e7os externos:\n\n- Stripe para processamento de pagamentos e assinaturas\n- iFood e outras plataformas de delivery\n- Sistemas fiscais e emiss\u00e3o de notas\n- Servi\u00e7os de email e SMS\n- Gateways de pagamento para opera\u00e7\u00f5es do restaurante\n\n## 3. Implementa\u00e7\u00e3o da Plataforma SaaS\n\n### 3.1 Sistema de Assinaturas\n\n#### 3.1.1 Estrutura de Planos\n\nImplementa\u00e7\u00e3o de diferentes n\u00edveis de planos:\n\n- **Plano B\u00e1sico**: Funcionalidades essenciais para pequenos estabelecimentos\n- **Plano Padr\u00e3o**: Recursos intermedi\u00e1rios para m\u00e9dios restaurantes\n- **Plano Premium**: Funcionalidades completas para grandes opera\u00e7\u00f5es\n- **Plano Enterprise**: Solu\u00e7\u00f5es personalizadas para redes e franquias\n\n#### 3.1.2 Gerenciamento de Assinaturas\n\nDesenvolvimento do fluxo completo de gest\u00e3o de assinaturas:\n\n- Cadastro e onboarding\n- Per\u00edodo de teste gratuito\n- Convers\u00e3o para assinatura paga\n- Gest\u00e3o de m\u00e9todos de pagamento\n- Renova\u00e7\u00f5es autom\u00e1ticas\n- Upgrades e downgrades de plano\n- Cancelamentos e reten\u00e7\u00e3o\n\n#### 3.1.3 Integra\u00e7\u00e3o com Stripe\n\nImplementa\u00e7\u00e3o da integra\u00e7\u00e3o completa com a API do Stripe:\n\n- Cria\u00e7\u00e3o de produtos e planos no Stripe\n- Processamento de pagamentos recorrentes\n- Gest\u00e3o de cart\u00f5es e m\u00e9todos de pagamento\n- Webhooks para eventos de pagamento\n- Tratamento de falhas e disputas\n- Gera\u00e7\u00e3o de faturas e recibos\n\n#### 3.1.4 Controle de Limites e Recursos\n\nDesenvolvimento de mecanismos para controlar a utiliza\u00e7\u00e3o conforme o plano:\n\n- Verifica\u00e7\u00e3o de limites (mesas, usu\u00e1rios, etc.)\n- Monitoramento de uso de recursos\n- Notifica\u00e7\u00f5es de limite pr\u00f3ximo\n- Op\u00e7\u00f5es de upgrade quando necess\u00e1rio\n- Controle de acesso a m\u00f3dulos premium\n\n### 3.2 Portal Administrativo\n\n#### 3.2.1 Gest\u00e3o de Clientes\n\nCria\u00e7\u00e3o de interfaces para administradores da plataforma:\n\n- Dashboard de clientes ativos\n- Detalhes de conta e consumo\n- Hist\u00f3rico de pagamentos\n- Ferramentas de suporte\n- A\u00e7\u00f5es administrativas (suspender, cancelar, etc.)\n\n#### 3.2.2 Relat\u00f3rios e Analytics\n\nImplementa\u00e7\u00e3o de ferramentas de an\u00e1lise para a opera\u00e7\u00e3o SaaS:\n\n- M\u00e9tricas de aquisi\u00e7\u00e3o de clientes\n- Taxas de convers\u00e3o e reten\u00e7\u00e3o\n- Receita recorrente mensal (MRR)\n- Valor do tempo de vida do cliente (LTV)\n- Custos de aquisi\u00e7\u00e3o de cliente (CAC)\n- Churn e renova\u00e7\u00f5es\n\n#### 3.2.3 Sistema de Suporte\n\nDesenvolvimento de ferramentas para atendimento ao cliente:\n\n- Sistema de tickets\n- Base de conhecimento\n- Chat ao vivo\n- Suporte por email\n- Escalamento para diferentes n\u00edveis\n- M\u00e9tricas de satisfa\u00e7\u00e3o e tempo de resposta\n\n## 4. Implementa\u00e7\u00e3o do Sistema de Gest\u00e3o de Restaurantes\n\n### 4.1 Personaliza\u00e7\u00e3o por Tipo de Restaurante\n\n#### 4.1.1 Onboarding e Configura\u00e7\u00e3o\n\nCria\u00e7\u00e3o do processo de configura\u00e7\u00e3o inicial:\n\n- Sele\u00e7\u00e3o do tipo de restaurante\n- Compara\u00e7\u00e3o entre tipos\n- Configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas\n- Setup inicial de mesas e ambiente\n- Cadastro de card\u00e1pio inicial\n- Configura\u00e7\u00e3o de funcion\u00e1rios e acessos\n\n#### 4.1.2 Interfaces Espec\u00edficas\n\nDesenvolvimento de interfaces adaptadas para cada tipo:\n\n- \u00c0 la carte: Foco em mesas e reservas\n- Fast Food: Foco em fila de pedidos e agilidade\n- Pizzaria: Construtor de pizza meio a meio\n- Rod\u00edzio: Controle de passadas e tempos\n- Delivery: Rastreamento e rotas\n- Self-service: Integra\u00e7\u00e3o com balan\u00e7as\n- Food Truck: Interface simplificada e mobile-first\n\n#### 4.1.3 Fluxos de Trabalho Personalizados\n\nImplementa\u00e7\u00e3o de fluxos adaptados para cada modelo:\n\n- L\u00f3gica de neg\u00f3cio espec\u00edfica por tipo\n- Regras de prioriza\u00e7\u00e3o de pedidos\n- Controles especializados (forno, passadas, pesagem)\n- Relat\u00f3rios e m\u00e9tricas relevantes para cada modelo\n\n### 4.2 M\u00f3dulo de Comandas e Pedidos\n\n#### 4.2.1 Gest\u00e3o de Mesas\n\nDesenvolvimento do sistema de controle de mesas:\n\n- Mapa visual de mesas\n- Status em tempo real\n- Controle de ocupa\u00e7\u00e3o\n- Timer de perman\u00eancia\n- Hist\u00f3rico de uso\n\n#### 4.2.2 Sistema de Pedidos\n\nImplementa\u00e7\u00e3o do fluxo completo de pedidos:\n\n- Registro de pedidos (via QR Code e gar\u00e7om)\n- Modifica\u00e7\u00f5es e adi\u00e7\u00f5es\n- Encaminhamento para cozinha\n- Notifica\u00e7\u00f5es de status\n- Fechamento e pagamento\n\n#### 4.2.3 QR Code para Clientes\n\nDesenvolvimento da experi\u00eancia de pedido via QR Code:\n\n- Gera\u00e7\u00e3o de QR Codes para mesas\n- Interface adaptada para mobile\n- Registro de dados do cliente\n- Card\u00e1pio digital interativo\n- Carrinho de pedidos\n- Solicita\u00e7\u00e3o de atendimento\n- Pagamento pelo smartphone\n\n#### 4.2.4 Divis\u00e3o de Contas\n\nImplementa\u00e7\u00e3o de mecanismos para divis\u00e3o de contas:\n\n- Divis\u00e3o por item\n- Divis\u00e3o igual entre participantes\n- Divis\u00e3o percentual\n- M\u00faltiplos pagamentos\n- Contas parciais\n\n### 4.3 M\u00f3dulo de Cozinha\n\n#### 4.3.1 Painel de Produ\u00e7\u00e3o\n\nDesenvolvimento da interface para cozinha:\n\n- Fila de pedidos em tempo real\n- Classifica\u00e7\u00e3o por prioridade\n- Temporizadores de preparo\n- Status visual por pedido\n- Alertas para pedidos atrasados\n\n#### 4.3.2 Gest\u00e3o de Estoque\n\nImplementa\u00e7\u00e3o do controle de estoque integrado:\n\n- Cadastro de ingredientes e insumos\n- Abate autom\u00e1tico do estoque\n- Alertas de estoque baixo\n- Previs\u00e3o de necessidade\n- Pedidos autom\u00e1ticos\n\n#### 4.3.3 Controles Espec\u00edficos\n\nCria\u00e7\u00e3o de funcionalidades especializadas:\n\n- Temporizadores para forno\n- Controle de passadas para rod\u00edzio\n- Separa\u00e7\u00e3o de delivery e local\n- Alertas para al\u00e9rgenos\n\n### 4.4 M\u00f3dulo de Pagamentos\n\n#### 4.4.1 Processamento de Pagamentos\n\nImplementa\u00e7\u00e3o dos fluxos de pagamento:\n\n- Integra\u00e7\u00e3o com Stripe para pagamentos\n- Suporte a cart\u00f5es de cr\u00e9dito/d\u00e9bito\n- Pagamentos via PIX\n- Dinheiro e outras formas locais\n- Concilia\u00e7\u00e3o financeira\n\n#### 4.4.2 Fechamento de Caixa\n\nDesenvolvimento do processo de fechamento:\n\n- Abertura e fechamento de caixa\n- Registro de entradas e sa\u00eddas\n- Contagem f\u00edsica\n- Detec\u00e7\u00e3o de diferen\u00e7as\n- Relat\u00f3rio de fechamento\n\n#### 4.4.3 Emiss\u00e3o de Comprovantes\n\nImplementa\u00e7\u00e3o da gera\u00e7\u00e3o de documentos:\n\n- Recibos digitais\n- Envio por email ou WhatsApp\n- Integra\u00e7\u00e3o com sistemas fiscais\n- Armazenamento de comprovantes\n\n### 4.5 M\u00f3dulo de Funcion\u00e1rios\n\n#### 4.5.1 Controle de Acesso\n\nDesenvolvimento do sistema de acesso:\n\n- Cadastro de funcion\u00e1rios\n- Perfis de permiss\u00e3o\n- Autentica\u00e7\u00e3o segura\n- Registro de atividades\n- Pol\u00edticas de seguran\u00e7a\n\n#### 4.5.2 Registro de Ponto\n\nImplementa\u00e7\u00e3o do controle de ponto:\n\n- Registro de entrada e sa\u00edda\n- Valida\u00e7\u00e3o por localiza\u00e7\u00e3o\n- C\u00e1lculo de horas trabalhadas\n- Controle de intervalos\n- Exporta\u00e7\u00e3o para folha de pagamento\n\n#### 4.5.3 Desempenho e Comiss\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para gest\u00e3o de desempenho:\n\n- M\u00e9tricas por funcion\u00e1rio\n- C\u00e1lculo de comiss\u00f5es\n- Avalia\u00e7\u00e3o de desempenho\n- Classifica\u00e7\u00e3o por objetivos\n- Feedback e desenvolvimento\n\n### 4.6 M\u00f3dulo de Fornecedores\n\n#### 4.6.1 Cadastro e Gest\u00e3o\n\nImplementa\u00e7\u00e3o do gerenciamento de fornecedores:\n\n- Cadastro detalhado de fornecedores\n- Categoriza\u00e7\u00e3o por tipo de produto\n- Condi\u00e7\u00f5es comerciais\n- Contatos de emerg\u00eancia\n- Avalia\u00e7\u00e3o de desempenho\n\n#### 4.6.2 Pedidos e Reposi\u00e7\u00e3o\n\nDesenvolvimento do fluxo de compras:\n\n- Pedidos r\u00e1pidos\n- Sugest\u00e3o autom\u00e1tica de reposi\u00e7\u00e3o\n- Aprova\u00e7\u00e3o de pedidos\n- Acompanhamento de entrega\n- Recebimento e confer\u00eancia\n\n#### 4.6.3 Hist\u00f3rico e Avalia\u00e7\u00e3o\n\nCria\u00e7\u00e3o de ferramentas para an\u00e1lise de fornecedores:\n\n- Hist\u00f3rico de pedidos\n- Cumprimento de prazos\n- Qualidade de produtos\n- Competitividade de pre\u00e7os\n- Ranking de fornecedores\n\n### 4.7 M\u00f3dulo de Relat\u00f3rios\n\n#### 4.7.1 Relat\u00f3rios Operacionais\n\nImplementa\u00e7\u00e3o de relat\u00f3rios para a opera\u00e7\u00e3o di\u00e1ria:\n\n- Vendas por per\u00edodo\n- Ocupa\u00e7\u00e3o de mesas\n- Tempo m\u00e9dio de atendimento\n- Itens mais vendidos\n- Cancelamentos e devolu\u00e7\u00f5es\n\n#### 4.7.2 Relat\u00f3rios Financeiros\n\nDesenvolvimento de an\u00e1lises financeiras:\n\n- Faturamento por per\u00edodo\n- Custos e despesas\n- Lucratividade por produto\n- Fluxo de caixa\n- Proje\u00e7\u00f5es e comparativos\n\n#### 4.7.3 Dashboards e Analytics\n\nCria\u00e7\u00e3o de pain\u00e9is visuais e an\u00e1lises:\n\n- Dashboard executivo\n- Gr\u00e1ficos e visualiza\u00e7\u00f5es\n- Tend\u00eancias e sazonalidade\n- An\u00e1lise de dados em tempo real\n- Exporta\u00e7\u00e3o para Excel/PDF\n\n### 4.8 M\u00f3dulo de Marketing e CRM\n\n#### 4.8.1 Cadastro de Clientes\n\nImplementa\u00e7\u00e3o do gerenciamento de clientes:\n\n- Captura de dados via QR Code\n- Hist\u00f3rico de pedidos\n- Prefer\u00eancias e restri\u00e7\u00f5es\n- Segmenta\u00e7\u00e3o de clientes\n- Privacidade e LGPD\n\n#### 4.8.2 Programa de Fidelidade\n\nDesenvolvimento de sistema de fideliza\u00e7\u00e3o:\n\n- Ac\u00famulo de pontos por compra\n- N\u00edveis de fidelidade\n- Recompensas e benef\u00edcios\n- Promo\u00e7\u00f5es personalizadas\n- An\u00e1lise de engajamento\n\n#### 4.8.3 Campanhas e Promo\u00e7\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para a\u00e7\u00f5es de marketing:\n\n- Cria\u00e7\u00e3o de campanhas\n- Descontos e ofertas especiais\n- Comunica\u00e7\u00e3o por email e SMS\n- Aniversariantes do m\u00eas\n- Mensura\u00e7\u00e3o de resultados\n\n## 5. Integra\u00e7\u00f5es com Servi\u00e7os Externos\n\n### 5.1 Integra\u00e7\u00e3o com Plataformas de Delivery\n\n#### 5.1.1 iFood e Outras Plataformas\n\nImplementa\u00e7\u00e3o de conex\u00e3o com marketplaces:\n\n- Recebimento de pedidos em tempo real\n- Aceita\u00e7\u00e3o/rejei\u00e7\u00e3o autom\u00e1tica\n- Atualiza\u00e7\u00e3o de status\n- Sincroniza\u00e7\u00e3o de card\u00e1pio\n- Concilia\u00e7\u00e3o financeira\n\n#### 5.1.2 Delivery Pr\u00f3prio\n\nDesenvolvimento de sistema pr\u00f3prio de delivery:\n\n- Cadastro de entregadores\n- Roteiriza\u00e7\u00e3o de entregas\n- Rastreamento em tempo real\n- \u00c1reas e taxas de entrega\n- Gest\u00e3o de frota\n\n### 5.2 Integra\u00e7\u00e3o com Sistemas Fiscais\n\n#### 5.2.1 Emiss\u00e3o de Notas Fiscais\n\nImplementa\u00e7\u00e3o de processos fiscais:\n\n- Emiss\u00e3o de NFC-e, NF-e\n- Valida\u00e7\u00e3o com WebServices da SEFAZ\n- Armazenamento e envio de documentos\n- Tratamento de conting\u00eancia\n- Relat\u00f3rios fiscais\n\n#### 5.2.2 Concilia\u00e7\u00e3o Cont\u00e1bil\n\nDesenvolvimento de ferramentas para contabilidade:\n\n- Exporta\u00e7\u00e3o para sistemas cont\u00e1beis\n- Plano de contas configur\u00e1vel\n- Relat\u00f3rios para DRE\n- Apura\u00e7\u00e3o de impostos\n- Fechamento mensal\n\n### 5.3 Integra\u00e7\u00e3o com Balan\u00e7as\n\n#### 5.3.1 Para Self-Service\n\nImplementa\u00e7\u00e3o de conex\u00e3o com balan\u00e7as:\n\n- Leitura de peso em tempo real\n- C\u00e1lculo autom\u00e1tico de valor\n- Calibra\u00e7\u00e3o e configura\u00e7\u00e3o\n- Modo offline para conting\u00eancia\n- Registro de pesagens\n\n#### 5.3.2 Para Controle de Estoque\n\nDesenvolvimento de pesagem para estoque:\n\n- Pesagem de insumos\n- Convers\u00e3o de unidades\n- Controle de quebra e perdas\n- Rastreabilidade\n- Invent\u00e1rio f\u00edsico\n\n### 5.4 Integra\u00e7\u00e3o com Equipamentos\n\n#### 5.4.1 Impressoras e Comandas\n\nImplementa\u00e7\u00e3o de sistema de impress\u00e3o:\n\n- Impress\u00e3o de comandas para cozinha\n- Impress\u00e3o de contas e recibos\n- Suporte a diversas marcas de impressoras\n- Configura\u00e7\u00e3o de layouts\n- Tratamento de falhas\n\n#### 5.4.2 Displays de Cozinha\n\nDesenvolvimento de integra\u00e7\u00e3o com displays:\n\n- Exibi\u00e7\u00e3o de pedidos em andamento\n- Alertas visuais e sonoros\n- Temporizadores\n- Confirma\u00e7\u00e3o por toque\n- Sincroniza\u00e7\u00e3o em tempo real\n\n## 6. Infraestrutura e Hospedagem\n\n### 6.1 Ambiente de Produ\u00e7\u00e3o\n\n#### 6.1.1 Servidores Web\n\nConfigura\u00e7\u00e3o da infraestrutura web:\n\n- Servidores web redundantes\n- Balanceadores de carga\n- Certificados SSL/TLS\n- Cache e otimiza\u00e7\u00e3o\n- Monitoramento 24/7\n\n#### 6.1.2 Banco de Dados\n\nImplementa\u00e7\u00e3o da camada de dados:\n\n- Cluster de banco de dados MySQL\n- Replica\u00e7\u00e3o e alta disponibilidade\n- Backups automatizados\n- Particionamento por tenant\n- Otimiza\u00e7\u00e3o de performance\n\n#### 6.1.3 Armazenamento\n\nConfigura\u00e7\u00e3o de sistemas de armazenamento:\n\n- Sistema de arquivos distribu\u00eddo\n- Armazenamento para backups\n- CDN para assets est\u00e1ticos\n- Pol\u00edticas de reten\u00e7\u00e3o\n- Compress\u00e3o e otimiza\u00e7\u00e3o\n\n### 6.2 Escalabilidade\n\n#### 6.2.1 Horizontal\n\nImplementa\u00e7\u00e3o de mecanismos de crescimento:\n\n- Auto-scaling de servidores\n- Gerenciamento de capacidade\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n- Load balancing avan\u00e7ado\n- Cont\u00eaineres e orquestra\u00e7\u00e3o\n\n#### 6.2.2 Vertical\n\nPlanejamento para crescimento de recursos:\n\n- Upgrades de hardware\n- Otimiza\u00e7\u00e3o de software\n- Benchmarking e performance\n- Ajuste de recursos por demanda\n- Monitoramento de gargalos\n\n### 6.3 Monitoramento e Logging\n\n#### 6.3.1 Monitoramento de Sistema\n\nImplementa\u00e7\u00e3o de sistemas de observabilidade:\n\n- Monitoramento em tempo real\n- Alertas autom\u00e1ticos\n- Dashboards operacionais\n- An\u00e1lise de tend\u00eancias\n- Detec\u00e7\u00e3o de anomalias\n\n#### 6.3.2 Logging e Auditoria\n\nDesenvolvimento de registro de eventos:\n\n- Centraliza\u00e7\u00e3o de logs\n- Reten\u00e7\u00e3o configur\u00e1vel\n- Busca e an\u00e1lise\n- Trilhas de auditoria\n- Exporta\u00e7\u00e3o e conformidade\n\n### 6.4 Continuidade de Neg\u00f3cio\n\n#### 6.4.1 Backups\n\nImplementa\u00e7\u00e3o de estrat\u00e9gia de backups:\n\n- Backups di\u00e1rios automatizados\n- Backups incrementais\n- Verifica\u00e7\u00e3o de integridade\n- Restaura\u00e7\u00e3o testada\n- Armazenamento offsite\n\n#### 6.4.2 Disaster Recovery\n\nDesenvolvimento de plano de recupera\u00e7\u00e3o:\n\n- Site alternativo\n- Procedimentos documentados\n- Tempo de recupera\u00e7\u00e3o definido\n- Testes regulares\n- Comunica\u00e7\u00e3o de incidentes\n\n#### 6.4.3 Modo Offline\n\nImplementa\u00e7\u00e3o de funcionamento offline:\n\n- Opera\u00e7\u00f5es b\u00e1sicas sem internet\n- Sincroniza\u00e7\u00e3o autom\u00e1tica\n- Buffer local de transa\u00e7\u00f5es\n- Reconcilia\u00e7\u00e3o ap\u00f3s reconex\u00e3o\n- Notifica\u00e7\u00f5es de status\n\n## 7. Testes e Garantia de Qualidade\n\n### 7.1 Estrat\u00e9gia de Testes\n\n#### 7.1.1 Testes Unit\u00e1rios\n\nImplementa\u00e7\u00e3o de testes de componentes:\n\n- Cobertura de c\u00f3digo\n- Testes automatizados\n- Mock de depend\u00eancias\n- Valida\u00e7\u00e3o de regras de neg\u00f3cio\n- Integra\u00e7\u00e3o com CI/CD\n\n#### 7.1.2 Testes de Integra\u00e7\u00e3o\n\nDesenvolvimento de valida\u00e7\u00e3o de integra\u00e7\u00f5es:\n\n- Teste de APIs\n- Simula\u00e7\u00f5es de servi\u00e7os externos\n- Valida\u00e7\u00e3o de fluxos completos\n- Ambientes de teste isolados\n- Automa\u00e7\u00e3o de casos de teste\n\n#### 7.1.3 Testes de Aceita\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de valida\u00e7\u00e3o do usu\u00e1rio:\n\n- Testes de usabilidade\n- Cen\u00e1rios de uso real\n- Valida\u00e7\u00e3o com stakeholders\n- Feedback documentado\n- Aprova\u00e7\u00e3o formal\n\n### 7.2 Garantia de Qualidade\n\n#### 7.2.1 Revis\u00e3o de C\u00f3digo\n\nEstabelecimento de processos de revis\u00e3o:\n\n- Padr\u00f5es de codifica\u00e7\u00e3o\n- Pull/merge requests\n- Code reviews\n- An\u00e1lise est\u00e1tica\n- M\u00e9tricas de qualidade\n\n#### 7.2.2 Controle de Vers\u00e3o\n\nImplementa\u00e7\u00e3o de gerenciamento de vers\u00f5es:\n\n- Git flow ou similar\n- Ambientes separados (DEV/STG/PROD)\n- Tagging de vers\u00f5es\n- Gest\u00e3o de releases\n- Changelogs e documenta\u00e7\u00e3o\n\n#### 7.2.3 Testes de Performance\n\nDesenvolvimento de valida\u00e7\u00e3o de desempenho:\n\n- Testes de carga\n- Benchmarking\n- Otimiza\u00e7\u00e3o de recursos\n- Monitoramento de impacto\n- Simula\u00e7\u00e3o de multi-tenancy\n\n## 8. Seguran\u00e7a e Conformidade\n\n### 8.1 Seguran\u00e7a de Aplica\u00e7\u00e3o\n\n#### 8.1.1 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de controle de acesso:\n\n- Autentica\u00e7\u00e3o forte (2FA)\n- Gerenciamento de sess\u00f5es\n- Controle de acesso baseado em perfil\n- Pol\u00edticas de senha\n- Prote\u00e7\u00e3o contra for\u00e7a bruta\n\n#### 8.1.2 Prote\u00e7\u00e3o de Dados\n\nDesenvolvimento de mecanismos de prote\u00e7\u00e3o:\n\n- Criptografia em tr\u00e2nsito (TLS)\n- Criptografia em repouso\n- Tokeniza\u00e7\u00e3o de dados sens\u00edveis\n- Mascaramento de informa\u00e7\u00f5es\n- Acesso baseado em necessidade\n\n#### 8.1.3 Seguran\u00e7a de API\n\nImplementa\u00e7\u00e3o de prote\u00e7\u00e3o de endpoints:\n\n- Autentica\u00e7\u00e3o por token (JWT)\n- Rate limiting\n- Valida\u00e7\u00e3o de entrada\n- CORS configurado\n- Prote\u00e7\u00e3o contra ataques comuns\n\n### 8.2 Conformidade\n\n#### 8.2.1 LGPD/GDPR\n\nAdequa\u00e7\u00e3o \u00e0 legisla\u00e7\u00e3o de privacidade:\n\n- Invent\u00e1rio de dados pessoais\n- Termos de uso e privacidade\n- Mecanismos de consentimento\n- Direitos do titular (acesso, exclus\u00e3o)\n- Relat\u00f3rios de impacto\n\n#### 8.2.2 PCI DSS\n\nConformidade para processamento de pagamentos:\n\n- Seguran\u00e7a de dados de cart\u00e3o\n- Tokeniza\u00e7\u00e3o via Stripe\n- Escopo reduzido de PCI\n- Varreduras de seguran\u00e7a\n- Treinamento e conscientiza\u00e7\u00e3o\n\n#### 8.2.3 Auditoria e Compliance\n\nImplementa\u00e7\u00e3o de pr\u00e1ticas de conformidade:\n\n- Trilhas de auditoria\n- Logs imut\u00e1veis\n- Evid\u00eancias de controle\n- Relat\u00f3rios de compliance\n- Revis\u00f5es peri\u00f3dicas\n\n## 9. Lan\u00e7amento e Opera\u00e7\u00f5es\n\n### 9.1 Estrat\u00e9gia de Lan\u00e7amento\n\n#### 9.1.1 MVP e Roadmap\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Defini\u00e7\u00e3o do MVP inicial\n- Prioriza\u00e7\u00e3o de funcionalidades\n- Roadmap de m\u00e9dio prazo\n- Feedback loops planejados\n- Marcos e m\u00e9tricas de sucesso\n\n#### 9.1.2 Beta e Early Adopters\n\nImplementa\u00e7\u00e3o de programa inicial:\n\n- Sele\u00e7\u00e3o de clientes beta\n- Incentivos para early adopters\n- Coleta estruturada de feedback\n- Ciclos r\u00e1pidos de itera\u00e7\u00e3o\n- Estrat\u00e9gia de expans\u00e3o\n\n#### 9.1.3 Go-to-Market\n\nDesenvolvimento de estrat\u00e9gia comercial:\n\n- Posicionamento de mercado\n- Estrat\u00e9gia de pre\u00e7os\n- Canais de aquisi\u00e7\u00e3o\n- Materiais de marketing\n- Plano de vendas\n\n### 9.2 Opera\u00e7\u00f5es Cont\u00ednuas\n\n#### 9.2.1 Suporte ao Cliente\n\nImplementa\u00e7\u00e3o de estrutura de atendimento:\n\n- Equipe de suporte escalonada\n- Base de conhecimento\n- Procedimentos documentados\n- M\u00e9tricas de atendimento\n- Feedback e melhoria cont\u00ednua\n\n#### 9.2.2 Monitoramento de Uso\n\nDesenvolvimento de an\u00e1lise de utiliza\u00e7\u00e3o:\n\n- Telemetria de uso\n- Detec\u00e7\u00e3o de problemas\n- M\u00e9tricas de engajamento\n- An\u00e1lise de churn\n- Oportunidades de upsell\n\n#### 9.2.3 SLA e Garantias\n\nEstabelecimento de acordos de n\u00edvel de servi\u00e7o:\n\n- Disponibilidade garantida\n- Tempo de resposta para suporte\n- Resolu\u00e7\u00e3o de incidentes\n- Compensa\u00e7\u00f5es por falhas\n- Comunica\u00e7\u00e3o proativa\n\n## 10. Manuten\u00e7\u00e3o e Evolu\u00e7\u00e3o\n\n### 10.1 Desenvolvimento Cont\u00ednuo\n\n#### 10.1.1 Novas Funcionalidades\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Processo de coleta de requisitos\n- Prioriza\u00e7\u00e3o baseada em valor\n- Desenvolvimento \u00e1gil\n- Testes de conceito\n- Valida\u00e7\u00e3o com usu\u00e1rios\n\n#### 10.1.2 Corre\u00e7\u00f5es e Melhorias\n\nImplementa\u00e7\u00e3o de processo de manuten\u00e7\u00e3o:\n\n- Triagem de bugs e issues\n- Prioriza\u00e7\u00e3o por impacto\n- Janelas de manuten\u00e7\u00e3o\n- Hotfixes para problemas cr\u00edticos\n- Refatora\u00e7\u00e3o planejada\n\n#### 10.1.3 Atualiza\u00e7\u00f5es de Tecnologia\n\nPlano para evolu\u00e7\u00e3o tecnol\u00f3gica:\n\n- Atualiza\u00e7\u00f5es de seguran\u00e7a\n- Atualiza\u00e7\u00e3o de frameworks\n- Migra\u00e7\u00e3o planejada\n- Testes de compatibilidade\n- Comunica\u00e7\u00e3o de mudan\u00e7as\n\n### 10.2 An\u00e1lise e Otimiza\u00e7\u00e3o\n\n#### 10.2.1 Performance\n\nMonitoramento e melhoria cont\u00ednua:\n\n- An\u00e1lise de gargalos\n- Otimiza\u00e7\u00e3o de consultas\n- Refinamento de caching\n- Monitoramento de uso de recursos\n- Benchmarking peri\u00f3dico\n\n#### 10.2.2 Custo-Benef\u00edcio\n\nAvalia\u00e7\u00e3o financeira constante:\n\n- An\u00e1lise de custos operacionais\n- Otimiza\u00e7\u00e3o de recursos\n- Renegocia\u00e7\u00e3o com fornecedores\n- Efici\u00eancia energ\u00e9tica\n- Automa\u00e7\u00e3o de processos\n\n#### 10.2.3 Experi\u00eancia do Usu\u00e1rio\n\nMelhoria cont\u00ednua da UX:\n\n- Testes de usabilidade\n- An\u00e1lise de caminhos e convers\u00e3o\n- Feedback estruturado\n- A/B testing\n- Pesquisas de satisfa\u00e7\u00e3o\n\n## 11. Diret\u00f3rio Completo do Projeto\n\n```\nrestaurante-sistema/\n\u2502\n\u251c\u2500\u2500 assets/                        # Arquivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 css/                       # Estilos CSS\n\u2502   \u2502   \u251c\u2500\u2500 main.css               # Estilo principal\n\u2502   \u2502   \u251c\u2500\u2500 login.css              # Estilos da p\u00e1gina de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.css          # Estilos do painel principal\n\u2502   \u2502   \u251c\u2500\u2500 tables.css             # Estilos do mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 menu.css               # Estilos do card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.css            # Estilos do painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 reports.css            # Estilos dos relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 ponto.css              # Estilos para o sistema de ponto\n\u2502   \u2502   \u251c\u2500\u2500 fornecedores.css       # Estilos para gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 customer-mobile.css    # Estilos para interface mobile do cliente\n\u2502   \u2502   \u251c\u2500\u2500 subscription.css       # Estilos para p\u00e1ginas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 pricing.css            # Estilos para p\u00e1gina de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing.css            # Estilos para gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Estilos espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.css       # Estilo para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.css       # Estilo para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.css       # Estilo para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.css        # Estilo para rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.css    # Estilo para self-service/buf\u00ea\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.css       # Estilo para delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foodtruck.css      # Estilo para food truck\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bar.css            # Estilo para bar/pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cafeteria.css      # Estilo para cafeteria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.css      # Estilo para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.css         # Estilos para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 js/                        # Arquivos JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # JavaScript principal\n\u2502   \u2502   \u251c\u2500\u2500 login.js               # L\u00f3gica de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js           # Funcionalidades do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 tables.js              # Gerenciamento de mesas\n\u2502   \u2502   \u251c\u2500\u2500 orders.js              # Processamento de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 menu.js                # Card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.js             # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory.js           # Controle de estoque\n\u2502   \u2502   \u251c\u2500\u2500 payments.js            # Processamento de pagamentos\n\u2502   \u2502   \u251c\u2500\u2500 stripe-integration.js  # Integra\u00e7\u00e3o com Stripe\n\u2502   \u2502   \u251c\u2500\u2500 subscription.js        # L\u00f3gica de gerenciamento de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 pricing-calculator.js  # Calculadora de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing-portal.js      # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 charts.js              # L\u00f3gica para gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 ponto.js               # L\u00f3gica de registro de ponto\n\u2502   \u2502   \u251c\u2500\u2500 supplier-manager.js    # Gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 group-orders.js        # L\u00f3gica de pedidos em grupo\n\u2502   \u2502   \u251c\u2500\u2500 bill-splitter.js       # Divis\u00e3o de contas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Scripts espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.js        # L\u00f3gica para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.js        # L\u00f3gica para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.js        # L\u00f3gica para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.js         # L\u00f3gica para rod\u00edzio (controle de passadas)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.js     # L\u00f3gica para self-service (integra\u00e7\u00e3o com balan\u00e7as)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.js        # L\u00f3gica para delivery (rastreamento)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.js       # L\u00f3gica para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.js          # L\u00f3gica para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 images/                    # Imagens\n\u2502   \u2502   \u251c\u2500\u2500 logo/                  # Logotipos\n\u2502   \u2502   \u251c\u2500\u2500 icons/                 # \u00cdcones\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 menu/              # \u00cdcones para categorias do menu\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status/            # \u00cdcones de status\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 actions/           # \u00cdcones para a\u00e7\u00f5es\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 payment/           # \u00cdcones para m\u00e9todos de pagamento\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 subscription/      # \u00cdcones para planos de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 menu/                  # Imagens dos pratos\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Elementos da interface\n\u2502   \u2502   \u251c\u2500\u2500 plans/                 # Imagens para os planos de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 restaurant-types/      # Imagens espec\u00edficas por tipo de restaurante\n\u2502   \u2502       \u251c\u2500\u2500 alacarte/          # Imagens para restaurante \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood/          # Imagens para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria/          # Imagens para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 ...                # Outros tipos\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fonts/                     # Fontes\n\u2502\n\u251c\u2500\u2500 config/                        # Arquivos de configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 database.php               # Configura\u00e7\u00e3o da conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 constants.php              # Constantes da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 stripe.php                 # Configura\u00e7\u00e3o da API do Stripe\n\u2502   \u251c\u2500\u2500 email.php                  # Configura\u00e7\u00e3o de emails\n\u2502   \u251c\u2500\u2500 sms.php                    # Configura\u00e7\u00e3o de SMS\n\u2502   \u251c\u2500\u2500 qrcode.php                 # Configura\u00e7\u00e3o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 ifood.php                  # Configura\u00e7\u00e3o da API do iFood\n\u2502   \u251c\u2500\u2500 restaurant_types.php       # Configura\u00e7\u00e3o de tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface_settings.php     # Configura\u00e7\u00f5es de interface por tipo\n\u2502   \u251c\u2500\u2500 order_methods.php          # Configura\u00e7\u00f5es de m\u00e9todos de pedido\n\u2502   \u251c\u2500\u2500 subscription_plans.php     # Configura\u00e7\u00e3o de planos de assinatura\n\u2502   \u251c\u2500\u2500 tenant.php                 # Configura\u00e7\u00e3o multi-tenant\n\u2502   \u2514\u2500\u2500 feature_limits.php         # Limites de recursos por plano\n\u2502\n\u251c\u2500\u2500 controllers/                   # Controladores\n\u2502   \u251c\u2500\u2500 AuthController.php         # Controlador de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 SubscriptionController.php # Controlador de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 PlansController.php    # Controlador de planos\n\u2502   \u2502   \u251c\u2500\u2500 BillingController.php  # Controlador de faturamento\n\u2502   \u2502   \u2514\u2500\u2500 FeatureController.php  # Controlador de recursos dispon\u00edveis\n\u2502   \u251c\u2500\u2500 TenantController.php       # Controlador multi-tenant\n\u2502   \u251c\u2500\u2500 OnboardingController.php   # Controlador de configura\u00e7\u00e3o inicial\n\u2502   \u251c\u2500\u2500 DashboardController.php    # Controlador do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteDashboardController.php  # Dashboard espec\u00edfico para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodDashboardController.php  # Dashboard espec\u00edfico para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaDashboardController.php  # Dashboard espec\u00edfico para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioDashboardController.php   # Dashboard espec\u00edfico para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 DeliveryDashboardController.php  # Dashboard espec\u00edfico para delivery\n\u2502   \u251c\u2500\u2500 TableController.php        # Controlador de mesas\n\u2502   \u251c\u2500\u2500 OrderController.php        # Controlador de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrderController.php    # Pedidos individuais\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrderController.php     # Pedidos em grupo\n\u2502   \u251c\u2500\u2500 MenuController.php         # Controlador do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuController.php   # Card\u00e1pio para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuController.php   # Card\u00e1pio para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaMenuController.php   # Card\u00e1pio para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioMenuController.php    # Card\u00e1pio para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 SelfServiceMenuController.php # Card\u00e1pio para self-service\n\u2502   \u251c\u2500\u2500 KitchenController.php      # Controlador da cozinha\n\u2502   \u251c\u2500\u2500 InventoryController.php    # Controlador de estoque\n\u2502   \u251c\u2500\u2500 PaymentController.php      # Controlador de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 BillSplitController.php      # Controlador de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ReportController.php       # Controlador de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 iFoodController.php        # Controlador de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 SupplierController.php     # Controlador de fornecedores\n\u2502   \u2502   \u2514\u2500\u2500 QuickOrderController.php     # Controlador de pedidos r\u00e1pidos\n\u2502   \u251c\u2500\u2500 StaffController.php        # Controlador de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 TimeClockController.php      # Controlador de ponto\n\u2502   \u251c\u2500\u2500 CustomerController.php     # Controlador de clientes\n\u2502   \u251c\u2500\u2500 QRCodeController.php       # Controlador de gera\u00e7\u00e3o e gest\u00e3o de QR Codes\n\u2502   \u251c\u2500\u2500 RestaurantTypeController.php # Controlador de tipo de restaurante\n\u2502   \u2514\u2500\u2500 SettingsController.php     # Controlador de configura\u00e7\u00f5es\n\u2502\n\u251c\u2500\u2500 models/                        # Modelos\n\u2502   \u251c\u2500\u2500 User.php                   # Modelo de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 Account.php                # Modelo de conta (assinatura)\n\u2502   \u2502   \u251c\u2500\u2500 Subscription.php       # Modelo de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 Plan.php               # Modelo de plano\n\u2502   \u2502   \u251c\u2500\u2500 Invoice.php            # Modelo de fatura\n\u2502   \u2502   \u2514\u2500\u2500 Usage.php              # Modelo de uso de recursos\n\u2502   \u251c\u2500\u2500 Tenant.php                 # Modelo de tenant (separa\u00e7\u00e3o de dados)\n\u2502   \u251c\u2500\u2500 Restaurant.php             # Modelo de restaurante com tipo e configura\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 RestaurantType.php         # Modelo de tipos de restaurante\n\u2502   \u251c\u2500\u2500 CashRegister.php           # Modelo de caixa\n\u2502   \u251c\u2500\u2500 Table.php                  # Modelo de mesa\n\u2502   \u251c\u2500\u2500 Order.php                  # Modelo de pedido\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrder.php        # Modelo de pedido individual\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrder.php         # Modelo de pedido em grupo\n\u2502   \u251c\u2500\u2500 OrderItem.php              # Modelo de item de pedido\n\u2502   \u251c\u2500\u2500 MenuItem.php               # Modelo de item do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuItem.php   # Extens\u00e3o para itens de \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuItem.php   # Extens\u00e3o para itens de fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzaMenuItem.php      # Extens\u00e3o para pizza (metades, bordas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 RodizioMenuItem.php    # Extens\u00e3o para rod\u00edzio\n\u2502   \u251c\u2500\u2500 Inventory.php              # Modelo de estoque\n\u2502   \u2502   \u2514\u2500\u2500 StockMovement.php      # Modelo de movimenta\u00e7\u00e3o de estoque\n\u2502   \u251c\u2500\u2500 Reservation.php            # Modelo de reserva\n\u2502   \u251c\u2500\u2500 Payment.php                # Modelo de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 BillSplit.php          # Modelo de divis\u00e3o de conta\n\u2502   \u251c\u2500\u2500 Staff.php                  # Modelo de funcion\u00e1rio\n\u2502   \u2502   \u2514\u2500\u2500 TimeClock.php          # Modelo de registro de ponto\n\u2502   \u251c\u2500\u2500 Supplier.php               # Modelo de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierContact.php    # Modelo de contato de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierOrder.php      # Modelo de pedido para fornecedor\n\u2502   \u2502   \u2514\u2500\u2500 SupplierRating.php     # Modelo de avalia\u00e7\u00e3o de fornecedor\n\u2502   \u251c\u2500\u2500 Customer.php               # Modelo de cliente\n\u2502   \u2502   \u2514\u2500\u2500 LoyaltyProgram.php     # Modelo de programa de fidelidade\n\u2502   \u251c\u2500\u2500 MarketingCampaign.php      # Modelo de campanha de marketing\n\u2502   \u251c\u2500\u2500 QRCode.php                 # Modelo de QR Code\n\u2502   \u251c\u2500\u2500 RestaurantConfiguration.php # Modelo de configura\u00e7\u00e3o do restaurante\n\u2502   \u2514\u2500\u2500 RestaurantInterface.php    # Modelo de interface do restaurante\n\u2502\n\u251c\u2500\u2500 views/                         # Visualiza\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 auth/                      # Telas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 login.php              # Tela de login\n\u2502   \u2502   \u251c\u2500\u2500 reset-password.php     # Redefini\u00e7\u00e3o de senha\n\u2502   \u2502   \u2514\u2500\u2500 register.php           # Cadastro inicial\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 subscription/              # Telas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # P\u00e1gina de planos dispon\u00edveis\n\u2502   \u2502   \u251c\u2500\u2500 checkout.php           # Checkout de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 success.php            # Confirma\u00e7\u00e3o de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 billing.php            # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 upgrade.php            # Upgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 downgrade.php          # Downgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 cancel.php             # Cancelamento de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 payment-methods.php    # Gest\u00e3o de m\u00e9todos de pagamento\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 onboarding/                # Telas de configura\u00e7\u00e3o inicial\n\u2502   \u2502   \u251c\u2500\u2500 welcome.php            # Boas-vindas e introdu\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-type.php    # Sele\u00e7\u00e3o de tipo de restaurante\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-comparison.php # Compara\u00e7\u00e3o entre tipos\n\u2502   \u2502   \u251c\u2500\u2500 basic-info.php         # Informa\u00e7\u00f5es b\u00e1sicas\n\u2502   \u2502   \u251c\u2500\u2500 menu-setup.php         # Configura\u00e7\u00e3o inicial do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 operating-hours.php    # Hor\u00e1rios de funcionamento\n\u2502   \u2502   \u251c\u2500\u2500 table-setup.php        # Configura\u00e7\u00e3o de mesas/layout\n\u2502   \u2502   \u251c\u2500\u2500 staff-roles.php        # Defini\u00e7\u00e3o de cargos\n\u2502   \u2502   \u251c\u2500\u2500 payment-options.php    # Op\u00e7\u00f5es de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 finalize.php           # Finaliza\u00e7\u00e3o e ativa\u00e7\u00e3o\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 dashboard/                 # Telas do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 index.php              # Dashboard principal (din\u00e2mico por tipo)\n\u2502   \u2502   \u251c\u2500\u2500 account-status.php     # Status da conta e assinatura\n\u2502   \u2502   \u251c\u2500\u2500 alacarte/              # Dashboards espec\u00edficos por tipo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal \u00e0 la carte\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tables.php         # Visualiza\u00e7\u00e3o de mesas \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood/              # Fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal fast food\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 queue.php          # Fila de pedidos fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria/              # Pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal pizzaria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pizza-builder.php  # Construtor de pizza\n\u2502   \u2502   \u251c\u2500\u2500 rodizio/               # Rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal rod\u00edzio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rounds.php         # Controle de passadas\n\u2502   \u2502   \u251c\u2500\u2500 selfservice/           # Self-service\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal self-service\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scales.php         # Controle de balan\u00e7as\n\u2502   \u2502   \u251c\u2500\u2500 delivery/              # Delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal delivery\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 routes.php         # Controle de rotas de entrega\n\u2502   \u2502   \u2514\u2500\u2500 multiunit/             # Rede de restaurantes\n\u2502   \u2502       \u251c\u2500\u2500 index.php          # Dashboard principal rede\n\u2502   \u2502       \u2514\u2500\u2500 units.php          # Controle de unidades\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tables/                    # Telas de mesas\n\u2502   \u2502   \u251c\u2500\u2500 map.php                # Mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 order.php              # Cria\u00e7\u00e3o de pedido\n\u2502   \u2502   \u2514\u2500\u2500 multi-user.php         # Gest\u00e3o de mesas com m\u00faltiplos usu\u00e1rios\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 menu/                      # Telas do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 admin.php              # Gerenciamento do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 editor.php             # Editor de itens do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 customer.php           # Card\u00e1pio para o cliente (QR Code)\n\u2502   \u2502   \u251c\u2500\u2500 category-manager.php   # Gerenciador de categorias\n\u2502   \u2502   \u251c\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es e card\u00e1pios especiais\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Card\u00e1pios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Layout para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Layout para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Layout para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Layout para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 selfservice.php    # Layout para self-service\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 kitchen/                   # Telas da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 panel.php              # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory-usage.php    # Uso de ingredientes\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Pain\u00e9is espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Painel para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Painel para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Painel para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 rodizio.php        # Painel para rod\u00edzio\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 inventory/                 # Telas de estoque\n\u2502   \u2502   \u251c\u2500\u2500 management.php         # Gerenciamento de estoque\n\u2502   \u2502   \u251c\u2500\u2500 movements.php          # Movimenta\u00e7\u00f5es de estoque\n\u2502   \u2502   \u2514\u2500\u2500 alerts.php             # Alertas de estoque\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 payments/                  # Telas de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 process.php            # Processamento de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 receipt.php            # Recibo\n\u2502   \u2502   \u251c\u2500\u2500 split-bill.php         # Divis\u00e3o de conta\n\u2502   \u2502   \u2514\u2500\u2500 group-payment.php      # Pagamento em grupo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 reports/                   # Telas de relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 sales.php              # Relat\u00f3rios de vendas\n\u2502   \u2502   \u251c\u2500\u2500 cash.php               # Fechamento de caixa\n\u2502   \u2502   \u251c\u2500\u2500 performance.php        # Desempenho de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 financial.php          # Relat\u00f3rios financeiros\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Relat\u00f3rios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Relat\u00f3rios para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Relat\u00f3rios para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Relat\u00f3rios para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Relat\u00f3rios para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 delivery.php       # Relat\u00f3rios para delivery\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 ifood/                     # Telas de integra\u00e7\u00e3o com iFood\n\u2502   \u2502   \u2514\u2500\u2500 orders.php             # Pedidos do iFood\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 suppliers/                 # Telas de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 quick-order.php        # Pedido r\u00e1pido\n\u2502   \u2502   \u251c\u2500\u2500 history.php            # Hist\u00f3rico de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 ratings.php            # Avalia\u00e7\u00e3o de fornecedores\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 staff/                     # Telas de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do funcion\u00e1rio\n\u2502   \u2502   \u251c\u2500\u2500 schedule.php           # Escala de trabalho\n\u2502   \u2502   \u2514\u2500\u2500 time-clock/            # Sistema de ponto\n\u2502   \u2502       \u251c\u2500\u2500 register.php       # Registro de ponto\n\u2502   \u2502       \u251c\u2500\u2500 management.php     # Gest\u00e3o de ponto\n\u2502   \u2502       \u2514\u2500\u2500 reports.php        # Relat\u00f3rios de ponto\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 customers/                 # Telas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de clientes\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do cliente\n\u2502   \u2502   \u2514\u2500\u2500 loyalty.php            # Programa de fidelidade\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 marketing/                 # Telas de marketing\n\u2502   \u2502   \u251c\u2500\u2500 campaigns.php          # Campanhas de marketing\n\u2502   \u2502   \u2514\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 qrcode/                    # Telas de gest\u00e3o de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 generator.php          # Gerador de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 manager.php            # Gestor de QR Codes\n\u2502   \u2502   \u2514\u2500\u2500 preview.php            # Pr\u00e9-visualiza\u00e7\u00e3o de QR Codes\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 admin/                     # \u00c1rea administrativa da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 accounts.php           # Gest\u00e3o de contas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # Configura\u00e7\u00e3o de planos\n\u2502   \u2502   \u251c\u2500\u2500 statistics.php         # Estat\u00edsticas da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 support.php            # Sistema de suporte\n\u2502   \u2502   \u2514\u2500\u2500 settings.php           # Configura\u00e7\u00f5es da plataforma\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 settings/                  # Telas de configura\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 general.php            # Configura\u00e7\u00f5es gerais\n\u2502       \u251c\u2500\u2500 restaurant-type.php    # Configura\u00e7\u00e3o de tipo de restaurante\n\u2502       \u251c\u2500\u2500 interfaces.php         # Configura\u00e7\u00e3o de interfaces\n\u2502       \u251c\u2500\u2500 qrcode.php             # Configura\u00e7\u00e3o de QR Code\n\u2502       \u251c\u2500\u2500 group-orders.php       # Configura\u00e7\u00e3o de pedidos em grupo\n\u2502       \u251c\u2500\u2500 time-clock.php         # Configura\u00e7\u00e3o de ponto\n\u2502       \u251c\u2500\u2500 integrations.php       # Integra\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 account.php            # Configura\u00e7\u00f5es da conta/assinatura\n\u2502       \u2514\u2500\u2500 backup.php             # Backup e seguran\u00e7a\n\u2502\n\u251c\u2500\u2500 includes/                      # Arquivos inclu\u00eddos\n\u2502   \u251c\u2500\u2500 functions.php              # Fun\u00e7\u00f5es auxiliares\n\u2502   \u251c\u2500\u2500 validation.php             # Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 session.php                # Gerenciamento de sess\u00e3o\n\u2502   \u251c\u2500\u2500 security.php               # Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 currency.php               # Formata\u00e7\u00e3o de moeda\n\u2502   \u251c\u2500\u2500 date.php                   # Fun\u00e7\u00f5es de data e hora\n\u2502   \u251c\u2500\u2500 notification.php           # Sistema de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 restaurant-type-helper.php # Fun\u00e7\u00f5es auxiliares para tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface-loader.php       # Carregador de interfaces espec\u00edficas\n\u2502   \u251c\u2500\u2500 tenant-resolver.php        # Resolu\u00e7\u00e3o de tenant\n\u2502   \u251c\u2500\u2500 feature-checker.php        # Verifica\u00e7\u00e3o de recursos dispon\u00edveis por plano\n\u2502   \u2514\u2500\u2500 subscription-helper.php    # Fun\u00e7\u00f5es auxiliares para assinaturas\n\u2502\n\u251c\u2500\u2500 api/                           # Endpoints da API\n\u2502   \u251c\u2500\u2500 auth.php                   # API de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 subscription.php           # API de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # API de planos\n\u2502   \u2502   \u251c\u2500\u2500 webhooks.php           # Webhooks do Stripe\n\u2502   \u2502   \u2514\u2500\u2500 billing.php            # API de faturamento\n\u2502   \u251c\u2500\u2500 tables.php                 # API de mesas\n\u2502   \u251c\u2500\u2500 orders.php                 # API de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 group-orders.php       # API de pedidos em grupo\n\u2502   \u251c\u2500\u2500 menu.php                   # API do card\u00e1pio\n\u2502   \u251c\u2500\u2500 payments.php               # API de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 bill-split.php         # API de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ifood.php                  # API de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 suppliers.php              # API de fornecedores\n\u2502   \u251c\u2500\u2500 staff.php                  # API de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 time-clock.php         # API de registro de ponto\n\u2502   \u251c\u2500\u2500 customers.php              # API de clientes\n\u2502   \u251c\u2500\u2500 reports.php                # API de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 qrcode.php                 # API de QR Codes\n\u2502   \u2514\u2500\u2500 restaurant-type.php        # API de tipo de restaurante\n\u2502\n\u251c\u2500\u2500 services/                      # Servi\u00e7os\n\u2502   \u251c\u2500\u2500 StripeService.php          # Servi\u00e7o de pagamento Stripe\n\u2502   \u251c\u2500\u2500 SubscriptionService.php    # Servi\u00e7o de gerenciamento de assinaturas\n\u2502   \u251c\u2500\u2500 BillingService.php         # Servi\u00e7o de gerenciamento de faturas\n\u2502   \u251c\u2500\u2500 TenantService.php          # Servi\u00e7o de gest\u00e3o multi-tenant\n\u2502   \u251c\u2500\u2500 FeatureLimitService.php    # Servi\u00e7o de controle de limites por plano\n\u2502   \u251c\u2500\u2500 QRCodeService.php          # Servi\u00e7o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 PDFService.php             # Servi\u00e7o de gera\u00e7\u00e3o de PDF\n\u2502   \u251c\u2500\u2500 iFoodService.php           # Servi\u00e7o de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 EmailService.php           # Servi\u00e7o de e-mail\n\u2502   \u251c\u2500\u2500 SMSService.php             # Servi\u00e7o de SMS\n\u2502   \u251c\u2500\u2500 NotificationService.php    # Servi\u00e7o de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 ChartService.php           # Servi\u00e7o de gera\u00e7\u00e3o de gr\u00e1ficos\n\u2502   \u251c\u2500\u2500 BackupService.php          # Servi\u00e7o de backup\n\u2502   \u251c\u2500\u2500 RestaurantTypeService.php  # Servi\u00e7o de tipo de restaurante\n\u2502   \u251c\u2500\u2500 InterfaceService.php       # Servi\u00e7o de interfaces\n\u2502   \u251c\u2500\u2500 ScaleService.php           # Servi\u00e7o de integra\u00e7\u00e3o com balan\u00e7as\n\u2502   \u251c\u2500\u2500 DeliveryTrackingService.php # Servi\u00e7o de rastreamento de entregas\n\u2502   \u2514\u2500\u2500 RodizioTrackingService.php # Servi\u00e7o de controle de rod\u00edzio\n\u2502\n\u251c\u2500\u2500 database/                      # Arquivos de banco de dados\n\u2502   \u251c\u2500\u2500 migrations/                # Migra\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 create_tenants_table.php     # Tabela de tenants\n\u2502   \u2502   \u251c\u2500\u2500 create_accounts_table.php    # Tabela de contas\n\u2502   \u2502   \u251c\u2500\u2500 create_subscriptions_table.php # Tabela de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 create_plans_table.php       # Tabela de planos\n\u2502   \u2502   \u251c\u2500\u2500 create_invoices_table.php    # Tabela de faturas\n\u2502   \u2502   \u251c\u2500\u2500 create_usage_logs_table.php  # Tabela de uso de recursos\n\u2502   \u2502   \u251c\u2500\u2500 create_users_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_types_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurants_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_configurations_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_tables_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_menu_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_order_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_inventory_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_customers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_staff_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_time_clock_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_suppliers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_contacts_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_payments_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_bill_splits_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_qrcodes_table.php\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 seeds/                     # Seeds\n\u2502       \u251c\u2500\u2500 plans_seeder.php       # Seed para planos de assinatura\n\u2502       \u251c\u2500\u2500 features_seeder.php    # Seed para recursos por plano\n\u2502       \u251c\u2500\u2500 users_seeder.php\n\u2502       \u251c\u2500\u2500 restaurant_types_seeder.php\n\u2502       \u251c\u2500\u2500 menu_items_seeder.php\n\u2502       \u251c\u2500\u2500 suppliers_seeder.php\n\u2502       \u251c\u2500\u2500 staff_seeder.php\n\u2502       \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 public/                        # Arquivos p\u00fablicos\n\u2502   \u251c\u2500\u2500 index.php                  # Ponto de entrada principal\n\u2502   \u251c\u2500\u2500 pricing.php                # P\u00e1gina p\u00fablica de pre\u00e7os\n\u2502   \u251c\u2500\u2500 register.php               # P\u00e1gina de registro\n\u2502   \u251c\u2500\u2500 customer-menu.php          # P\u00e1gina do card\u00e1pio digital\n\u2502   \u251c\u2500\u2500 group-order.php            # P\u00e1gina de pedido em grupo\n\u2502   \u251c\u2500\u2500 time-clock.php             # P\u00e1gina de registro de ponto\n\u2502   \u251c\u2500\u2500 webhook/                   # Endpoints de webhooks\n\u2502   \u2502   \u2514\u2500\u2500 stripe.php             # Webhook do Stripe\n\u2502   \u251c\u2500\u2500 qr/                        # QR Codes gerados\n\u2502   \u2502   \u2514\u2500\u2500 tables/                # QR Codes para mesas\n\u2502   \u251c\u2500\u2500 receipt/                   # Recibos gerados\n\u2502   \u2514\u2500\u2500 .htaccess                  # Configura\u00e7\u00e3o do Apache\n\u2502\n\u251c\u2500\u2500 mobile/                        # Arquivos de interface mobile\n\u2502   \u251c\u2500\u2500 index.php                  # Entrada principal mobile\n\u2502   \u251c\u2500\u2500 menu.php                   # Card\u00e1pio digital mobile\n\u2502   \u251c\u2500\u2500 order.php                  # Interface de pedido mobile\n\u2502   \u251c\u2500\u2500 group-order.php            # Interface de pedido em grupo\n\u2502   \u251c\u2500\u2500 payment.php                # Interface de pagamento mobile\n\u2502   \u251c\u2500\u2500 types/                     # Interfaces espec\u00edficas por tipo\n\u2502   \u2502   \u251c\u2500\u2500 alacarte.php           # Interface mobile para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood.php           # Interface mobile para fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria.php           # Interface mobile para pizzaria\n\u2502   \u2502   \u2514\u2500\u2500 rodizio.php            # Interface mobile para rod\u00edzio\n\u2502   \u2514\u2500\u2500 staff/                     # Interface para funcion\u00e1rios\n\u2502       \u2514\u2500\u2500 time-clock.php         # Registro de ponto mobile\n\u2502\n\u251c\u2500\u2500 docs/                          # Documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 setup.md                   # Instru\u00e7\u00f5es de instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 admin-guide.md             # Guia do administrador\n\u2502   \u251c\u2500\u2500 user-guide.md              # Guia do usu\u00e1rio\n\u2502   \u251c\u2500\u2500 api-docs.md                # Documenta\u00e7\u00e3o da API\n\u2502   \u251c\u2500\u2500 database-schema.md         # Esquema do banco de dados\n\u2502   \u251c\u2500\u2500 subscription.md            # Documenta\u00e7\u00e3o do sistema de assinaturas\n\u2502   \u2514\u2500\u2500 restaurant-types/          # Documenta\u00e7\u00e3o espec\u00edfica por tipo\n\u2502       \u251c\u2500\u2500 alacarte.md            # Documenta\u00e7\u00e3o para \u00e0 la carte\n\u2502       \u251c\u2500\u2500 fastfood.md            # Documenta\u00e7\u00e3o para fast food\n\u2502       \u251c\u2500\u2500 pizzaria.md            # Documenta\u00e7\u00e3o para pizzaria\n\u2502       \u2514\u2500\u2500 ...                    # Outros tipos\n\u2502\n\u251c\u2500\u2500 tests/                         # Testes automatizados\n\u2502   \u251c\u2500\u2500 unit/                      # Testes unit\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 subscription/          # Testes de assinatura\n\u2502   \u251c\u2500\u2500 integration/               # Testes de integra\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 acceptance/                # Testes de aceita\u00e7\u00e3o\n\u2502\n\u251c\u2500\u2500 vendor/                        # Depend\u00eancias (Composer)\n\u2502\n\u251c\u2500\u2500 .htaccess                      # Configura\u00e7\u00e3o do Apache\n\u251c\u2500\u2500 index.php                      # Arquivo inicial (redirecionamento)\n\u251c\u2500\u2500 composer.json                  # Configura\u00e7\u00e3o do Composer\n\u251c\u2500\u2500 package.json                   # Configura\u00e7\u00e3o do NPM\n\u251c\u2500\u2500 README.md                      # Documenta\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 LICENSE                        # Licen\u00e7a do software\n\u2514\u2500\u2500 .gitignore                     # Arquivos ignorados pelo Git\n```\n\n## Conclus\u00e3o\n\nO Sistema de Gest\u00e3o de Restaurantes SaaS representa uma solu\u00e7\u00e3o completa e flex\u00edvel, adaptada para diversos tipos de estabelecimentos. A implementa\u00e7\u00e3o como servi\u00e7o por assinatura permite escalabilidade e sustentabilidade do neg\u00f3cio, enquanto a personaliza\u00e7\u00e3o por tipo de restaurante garante que cada cliente tenha uma experi\u00eancia otimizada para seu modelo espec\u00edfico.\n\nA arquitetura multi-tenant, combinada com um modelo de planos em n\u00edveis, permite atender desde pequenos estabelecimentos at\u00e9 grandes redes, com um caminho claro de crescimento que acompanha a evolu\u00e7\u00e3o do neg\u00f3cio do cliente.\n\n\n\nA integra\u00e7\u00e3o com servi\u00e7os essenciais como Stripe para pagamentos, iFood para delivery, e um sistema robusto de QR Codes para pedidos digitais posiciona o sistema como uma solu\u00e7\u00e3o moderna e completa para o mercado de restaurantes, que cada vez mais demanda digitaliza\u00e7\u00e3o e efici\u00eancia operacional.\n\nO projeto apresentado n\u00e3o apenas resolve os desafios operacionais do dia a dia de um restaurante, mas tamb\u00e9m oferece insights valiosos baseados em dados que podem impulsionar o crescimento e a lucratividade do neg\u00f3cio.\n\n\n\n## Resumo \n\n\n# Checkpoint de Desenvolvimento do Sistema de Gest\u00e3o de Restaurantes SaaS\n\n\n\n### Componentes Implementados:\n\n1. **Banco de Dados MySQL (100%)**\n   - Esquema completo com todas as tabelas necess\u00e1rias\n   - Rela\u00e7\u00f5es e chaves estrangeiras\n   - \u00cdndices para otimiza\u00e7\u00e3o\n   - Estrutura para dados JSON\n   - Suporte completo para multi-tenant\n   -- Cria\u00e7\u00e3o do banco de dados\nCREATE DATABASE restaurante_saas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nUSE restaurante_saas;\n\n-- -----------------------------------------------------\n-- Tabelas do Sistema SaaS (Plataforma)\n-- -----------------------------------------------------\n\n-- Tabela de tenants (restaurantes)\nCREATE TABLE tenants (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) NOT NULL UNIQUE,\n    restaurant_type VARCHAR(20) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL,\n    logo VARCHAR(255) DEFAULT NULL,\n    theme_color VARCHAR(7) DEFAULT '#3498db',\n    domain VARCHAR(100) DEFAULT NULL,\n    \n    -- Campos para configura\u00e7\u00e3o de pagamentos\n    payment_gateway ENUM('stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede') DEFAULT 'stripe',\n    payment_gateway_key VARCHAR(255) DEFAULT NULL,\n    payment_gateway_token VARCHAR(255) DEFAULT NULL,\n    bank_name VARCHAR(100) DEFAULT NULL,\n    bank_agency VARCHAR(20) DEFAULT NULL,\n    bank_account VARCHAR(30) DEFAULT NULL,\n    pix_key VARCHAR(255) DEFAULT NULL,\n    payment_methods JSON DEFAULT '{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}',\n    payment_settings JSON DEFAULT '{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}',\n    \n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de planos de assinatura\nCREATE TABLE plans (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    code VARCHAR(20) NOT NULL UNIQUE,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    billing_cycle ENUM('monthly', 'quarterly', 'semiannual', 'annual') DEFAULT 'monthly',\n    features JSON NOT NULL,\n    limits JSON NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    stripe_product_id VARCHAR(100) DEFAULT NULL,\n    stripe_price_id VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de assinaturas\nCREATE TABLE subscriptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    plan_id INT UNSIGNED NOT NULL,\n    stripe_subscription_id VARCHAR(100) DEFAULT NULL,\n    stripe_customer_id VARCHAR(100) DEFAULT NULL,\n    status ENUM('trial', 'active', 'past_due', 'canceled', 'suspended') NOT NULL DEFAULT 'trial',\n    trial_ends_at TIMESTAMP NULL DEFAULT NULL,\n    ends_at TIMESTAMP NULL DEFAULT NULL,\n    next_billing_at TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (plan_id) REFERENCES plans(id)\n) ENGINE=InnoDB;\n\n-- Tabela de faturas\nCREATE TABLE invoices (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    subscription_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED NOT NULL,\n    stripe_invoice_id VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('draft', 'open', 'paid', 'uncollectible', 'void') NOT NULL DEFAULT 'draft',\n    due_date TIMESTAMP NULL DEFAULT NULL,\n    paid_at TIMESTAMP NULL DEFAULT NULL,\n    pdf_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de controle de uso de recursos\nCREATE TABLE resource_usage (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    resource_type VARCHAR(50) NOT NULL,\n    resource_count INT NOT NULL DEFAULT 1,\n    year INT NOT NULL,\n    month INT NOT NULL,\n    day INT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_resource_usage_per_day (tenant_id, resource_type, year, month, day),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Usu\u00e1rios e Acesso\n-- -----------------------------------------------------\n\n-- Tabela de usu\u00e1rios\nCREATE TABLE users (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NULL DEFAULT NULL,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin') NOT NULL,\n    phone VARCHAR(20) DEFAULT NULL,\n    profile_image VARCHAR(255) DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE,\n    last_login TIMESTAMP NULL DEFAULT NULL,\n    password_reset_token VARCHAR(100) DEFAULT NULL,\n    password_reset_expires TIMESTAMP NULL DEFAULT NULL,\n    remember_token VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_user_email (email),\n    UNIQUE KEY unique_user_username (username),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es\nCREATE TABLE permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es por papel\nCREATE TABLE role_permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer') NOT NULL,\n    permission_id INT UNSIGNED NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_role_permission (tenant_id, role, permission_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id)\n) ENGINE=InnoDB;\n\n-- Tabela de log de acesso\nCREATE TABLE access_logs (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    user_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED DEFAULT NULL,\n    ip_address VARCHAR(45) NOT NULL,\n    user_agent VARCHAR(255) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    details JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00e3o do Restaurante\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es do restaurante\nCREATE TABLE restaurant_configurations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    opening_hours JSON DEFAULT NULL,\n    operating_days JSON DEFAULT NULL,\n    delivery_radius INT DEFAULT 5,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    min_delivery_value DECIMAL(10, 2) DEFAULT 0.00,\n    allow_pickup BOOLEAN DEFAULT TRUE,\n    allow_delivery BOOLEAN DEFAULT TRUE,\n    allow_reservations BOOLEAN DEFAULT TRUE,\n    allow_qrcode_orders BOOLEAN DEFAULT TRUE,\n    allow_group_orders BOOLEAN DEFAULT TRUE,\n    default_order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    estimated_preparation_time INT DEFAULT 30,\n    default_table_capacity INT DEFAULT 4,\n    use_kitchen_display BOOLEAN DEFAULT TRUE,\n    taxes_included BOOLEAN DEFAULT TRUE,\n    tax_rate DECIMAL(5, 2) DEFAULT 0.00,\n    service_fee DECIMAL(5, 2) DEFAULT 0.00,\n    tip_options JSON DEFAULT NULL,\n    notification_settings JSON DEFAULT NULL,\n    printer_settings JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de \u00e1reas do restaurante\nCREATE TABLE restaurant_areas (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de caixas/terminais\nCREATE TABLE cash_registers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    location VARCHAR(100) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de aberturas e fechamentos de caixa\nCREATE TABLE cash_register_operations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    operation_type ENUM('opening', 'closing') NOT NULL,\n    initial_amount DECIMAL(10, 2) DEFAULT 0.00,\n    final_amount DECIMAL(10, 2) DEFAULT 0.00,\n    system_calculated_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_notes TEXT DEFAULT NULL,\n    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    closing_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de reservas\nCREATE TABLE reservations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    customer_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) NOT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    number_of_people INT NOT NULL,\n    reservation_date DATE NOT NULL,\n    reservation_time TIME NOT NULL,\n    arrival_time TIMESTAMP NULL DEFAULT NULL,\n    departure_time TIMESTAMP NULL DEFAULT NULL,\n    status ENUM('pending', 'confirmed', 'seated', 'completed', 'canceled', 'no_show') DEFAULT 'pending',\n    special_requests TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Mesas e QR Code\n-- -----------------------------------------------------\n\n-- Tabela de mesas\nCREATE TABLE tables (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    area_id INT UNSIGNED DEFAULT NULL,\n    number VARCHAR(10) NOT NULL,\n    name VARCHAR(50) DEFAULT NULL,\n    capacity INT UNSIGNED DEFAULT 4,\n    position_x INT DEFAULT 0,\n    position_y INT DEFAULT 0,\n    status ENUM('available', 'occupied', 'reserved', 'cleaning', 'inactive') DEFAULT 'available',\n    qr_code VARCHAR(255) DEFAULT NULL,\n    qr_code_hash VARCHAR(64) DEFAULT NULL,\n    occupied_since TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_table_number_per_tenant (tenant_id, number),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (area_id) REFERENCES restaurant_areas(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de QR Codes\nCREATE TABLE qr_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    code VARCHAR(100) NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    type ENUM('table', 'menu', 'payment', 'custom') NOT NULL DEFAULT 'table',\n    data JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    scan_count INT UNSIGNED DEFAULT 0,\n    last_scanned TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de ocupa\u00e7\u00e3o de mesas\nCREATE TABLE table_occupancy_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED NOT NULL,\n    start_time TIMESTAMP NOT NULL,\n    end_time TIMESTAMP NULL DEFAULT NULL,\n    number_of_customers INT UNSIGNED DEFAULT 1,\n    order_id INT UNSIGNED DEFAULT NULL,\n    total_spent DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Card\u00e1pio e Itens\n-- -----------------------------------------------------\n\n-- Tabela de categorias de menu\nCREATE TABLE menu_categories (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    image VARCHAR(255) DEFAULT NULL,\n    sort_order INT DEFAULT 0,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_category_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens do menu\nCREATE TABLE menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    category_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    cost DECIMAL(10, 2) DEFAULT 0.00,\n    image VARCHAR(255) DEFAULT NULL,\n    preparation_time INT DEFAULT 15,\n    ingredients TEXT DEFAULT NULL,\n    allergens TEXT DEFAULT NULL,\n    nutritional_info JSON DEFAULT NULL,\n    available BOOLEAN DEFAULT TRUE,\n    featured BOOLEAN DEFAULT FALSE,\n    sort_order INT DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    restaurant_type_specific BOOLEAN DEFAULT FALSE,\n    restaurant_type_config JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES menu_categories(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de op\u00e7\u00f5es e adicionais para itens do menu\nCREATE TABLE menu_item_options (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_selections INT DEFAULT 0,\n    max_selections INT DEFAULT 1,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de valores para op\u00e7\u00f5es de itens do menu\nCREATE TABLE menu_item_option_values (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    option_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    price_adjustment DECIMAL(10, 2) DEFAULT 0.00,\n    available BOOLEAN DEFAULT TRUE,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (option_id) REFERENCES menu_item_options(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de card\u00e1pios especiais/promo\u00e7\u00f5es\nCREATE TABLE special_menus (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    start_date DATE DEFAULT NULL,\n    end_date DATE DEFAULT NULL,\n    start_time TIME DEFAULT NULL,\n    end_time TIME DEFAULT NULL,\n    days_of_week JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens em card\u00e1pios especiais\nCREATE TABLE special_menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    special_menu_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    special_price DECIMAL(10, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (special_menu_id) REFERENCES special_menus(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pedidos\n-- -----------------------------------------------------\n\n-- Tabela de pedidos\nCREATE TABLE orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    staff_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) DEFAULT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    order_number VARCHAR(20) NOT NULL,\n    order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'new',\n    subtotal DECIMAL(10, 2) NOT NULL,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    scheduled_for TIMESTAMP NULL DEFAULT NULL,\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP NULL DEFAULT NULL,\n    cancelled_at TIMESTAMP NULL DEFAULT NULL,\n    cancellation_reason TEXT DEFAULT NULL,\n    is_group_order BOOLEAN DEFAULT FALSE,\n    group_order_code VARCHAR(20) DEFAULT NULL,\n    payment_status ENUM('pending', 'paid', 'partially_paid', 'refunded', 'failed') DEFAULT 'pending',\n    source ENUM('in_person', 'qrcode', 'website', 'app', 'ifood', 'phone') DEFAULT 'in_person',\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n    FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de itens do pedido\nCREATE TABLE order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    options JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',\n    preparation_started_at TIMESTAMP NULL DEFAULT NULL,\n    preparation_completed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de status do pedido\nCREATE TABLE order_status_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') NOT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de entregas\nCREATE TABLE deliveries (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    delivery_address VARCHAR(255) NOT NULL,\n    delivery_city VARCHAR(100) NOT NULL,\n    delivery_state VARCHAR(2) NOT NULL,\n    delivery_zip_code VARCHAR(10) NOT NULL,\n    delivery_instructions TEXT DEFAULT NULL,\n    delivery_person_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'assigned', 'in_transit', 'delivered', 'failed') DEFAULT 'pending',\n    estimated_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    actual_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    tracking_code VARCHAR(50) DEFAULT NULL,\n    tracking_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (delivery_person_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pagamentos\n-- -----------------------------------------------------\n\n-- Tabela de pagamentos\nCREATE TABLE payments (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') NOT NULL,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    installments TINYINT DEFAULT 1,\n    card_brand VARCHAR(50) DEFAULT NULL,\n    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',\n    transaction_id VARCHAR(100) DEFAULT NULL,\n    payment_data JSON DEFAULT NULL,\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de divis\u00e3o de contas\nCREATE TABLE bill_splits (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    split_type ENUM('equal', 'custom', 'percentage', 'item') NOT NULL DEFAULT 'equal',\n    payment_status ENUM('pending', 'paid') DEFAULT 'pending',\n    items JSON DEFAULT NULL,\n    payment_link VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de transa\u00e7\u00f5es no caixa\nCREATE TABLE cash_register_transactions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    cash_register_operation_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    transaction_type ENUM('sale', 'refund', 'expense', 'deposit', 'withdrawal') NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') DEFAULT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type ENUM('order', 'invoice', 'expense', 'other') DEFAULT NULL,\n    description TEXT DEFAULT NULL,\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (cash_register_operation_id) REFERENCES cash_register_operations(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de cupons e descontos\nCREATE TABLE coupons (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    code VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    discount_type ENUM('percentage', 'fixed', 'free_item') NOT NULL,\n    discount_value DECIMAL(10, 2) NOT NULL,\n    free_item_id INT UNSIGNED DEFAULT NULL,\n    min_order_value DECIMAL(10, 2) DEFAULT 0.00,\n    max_discount DECIMAL(10, 2) DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    max_uses INT UNSIGNED DEFAULT NULL,\n    uses_count INT UNSIGNED DEFAULT 0,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_coupon_code_per_tenant (tenant_id, code),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (free_item_id) REFERENCES menu_items(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Estoque e Ingredientes\n-- -----------------------------------------------------\n\n-- Tabela de ingredientes\nCREATE TABLE ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    cost_per_unit DECIMAL(10, 4) NOT NULL,\n    inventory_alert_threshold DECIMAL(10, 2) DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    barcode VARCHAR(50) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de ingredientes por item do menu\nCREATE TABLE menu_item_ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_item_ingredient (menu_item_id, ingredient_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de estoque\nCREATE TABLE inventory (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL DEFAULT 0,\n    location VARCHAR(50) DEFAULT 'main',\n    last_count_date TIMESTAMP NULL DEFAULT NULL,\n    last_count_by INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_location (tenant_id, ingredient_id, location),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (last_count_by) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de movimenta\u00e7\u00f5es de estoque\nCREATE TABLE inventory_movements (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    movement_type ENUM('purchase', 'order_usage', 'adjustment', 'transfer', 'waste', 'return') NOT NULL,\n    unit_cost DECIMAL(10, 4) DEFAULT NULL,\n    location VARCHAR(50) DEFAULT 'main',\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de contagem de estoque (invent\u00e1rio)\nCREATE TABLE inventory_counts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    count_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    user_id INT UNSIGNED NOT NULL,\n    status ENUM('in_progress', 'completed', 'cancelled') DEFAULT 'in_progress',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de detalhes da contagem de estoque\nCREATE TABLE inventory_count_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    inventory_count_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    expected_quantity DECIMAL(10, 2) NOT NULL,\n    actual_quantity DECIMAL(10, 2) NOT NULL,\n    discrepancy DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (inventory_count_id) REFERENCES inventory_counts(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Funcion\u00e1rios\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de funcion\u00e1rios\nCREATE TABLE staff_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    department VARCHAR(100) DEFAULT NULL,\n    hire_date DATE DEFAULT NULL,\n    salary DECIMAL(10, 2) DEFAULT NULL,\n    hourly_rate DECIMAL(10, 2) DEFAULT NULL,\n    commission_rate DECIMAL(5, 2) DEFAULT NULL,\n    working_hours JSON DEFAULT NULL,\n    employee_id VARCHAR(50) DEFAULT NULL,\n    emergency_contact_name VARCHAR(100) DEFAULT NULL,\n    emergency_contact_phone VARCHAR(20) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_staff_employee_id (tenant_id, employee_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de registro de ponto\nCREATE TABLE time_clock (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP NULL DEFAULT NULL,\n    break_start TIMESTAMP NULL DEFAULT NULL,\n    break_end TIMESTAMP NULL DEFAULT NULL,\n    total_hours DECIMAL(5, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de comiss\u00f5es de vendas\nCREATE TABLE sales_commissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    commission_amount DECIMAL(10, 2) NOT NULL,\n    commission_rate DECIMAL(5, 2) NOT NULL,\n    status ENUM('pending', 'approved', 'paid', 'rejected') DEFAULT 'pending',\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de escalas de trabalho\nCREATE TABLE staff_schedules (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    schedule_date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Clientes\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de clientes\nCREATE TABLE customer_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    birth_date DATE DEFAULT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    allergy_info TEXT DEFAULT NULL,\n    favorite_items JSON DEFAULT NULL,\n    marketing_preferences JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de programa de fidelidade\nCREATE TABLE loyalty_program (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_per_currency DECIMAL(10, 2) DEFAULT 1.00,\n    points_validity_days INT UNSIGNED DEFAULT 365,\n    min_points_to_redeem INT UNSIGNED DEFAULT 100,\n    currency_per_point DECIMAL(10, 4) DEFAULT 0.01,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de n\u00edveis de fidelidade\nCREATE TABLE loyalty_tiers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_points INT UNSIGNED NOT NULL,\n    multiplier DECIMAL(5, 2) DEFAULT 1.00,\n    benefits JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pontos de fidelidade\nCREATE TABLE loyalty_points (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    points INT NOT NULL,\n    source ENUM('purchase', 'reward', 'bonus', 'adjustment', 'redemption') NOT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    is_expired BOOLEAN DEFAULT FALSE,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de recompensas do programa de fidelidade\nCREATE TABLE loyalty_rewards (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_required INT UNSIGNED NOT NULL,\n    reward_type ENUM('discount', 'free_item', 'gift', 'coupon') NOT NULL,\n    reward_value JSON NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de resgates de recompensas\nCREATE TABLE loyalty_redemptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    loyalty_reward_id INT UNSIGNED NOT NULL,\n    points_used INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'approved', 'used', 'expired', 'cancelled') DEFAULT 'pending',\n    redemption_code VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    used_at TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_reward_id) REFERENCES loyalty_rewards(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Fornecedores\n-- -----------------------------------------------------\n\n-- Tabela de fornecedores\nCREATE TABLE suppliers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) DEFAULT NULL,\n    email VARCHAR(100) DEFAULT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    contact_name VARCHAR(100) DEFAULT NULL,\n    contact_phone VARCHAR(20) DEFAULT NULL,\n    contact_email VARCHAR(100) DEFAULT NULL,\n    category VARCHAR(50) DEFAULT NULL,\n    payment_terms VARCHAR(100) DEFAULT NULL,\n    delivery_time INT DEFAULT NULL,\n    minimum_order DECIMAL(10, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de produtos de fornecedores\nCREATE TABLE supplier_products (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    sku VARCHAR(50) DEFAULT NULL,\n    supplier_sku VARCHAR(50) DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    ingredient_id INT UNSIGNED DEFAULT NULL,\n    conversion_factor DECIMAL(10, 4) DEFAULT 1.0000,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos a fornecedores\nCREATE TABLE supplier_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_number VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expected_delivery_date DATE DEFAULT NULL,\n    delivery_date DATE DEFAULT NULL,\n    status ENUM('draft', 'sent', 'confirmed', 'partially_received', 'received', 'cancelled') DEFAULT 'draft',\n    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0.00,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    shipping DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    payment_status ENUM('pending', 'partial', 'paid', 'cancelled') DEFAULT 'pending',\n    payment_method VARCHAR(50) DEFAULT NULL,\n    payment_details JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de itens de pedidos a fornecedores\nCREATE TABLE supplier_order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED NOT NULL,\n    supplier_product_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    quantity_received DECIMAL(10, 2) DEFAULT 0.00,\n    status ENUM('pending', 'partial', 'complete', 'cancelled') DEFAULT 'pending',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_product_id) REFERENCES supplier_products(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de avalia\u00e7\u00e3o de fornecedores\nCREATE TABLE supplier_ratings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    quality_rating TINYINT UNSIGNED DEFAULT NULL,\n    service_rating TINYINT UNSIGNED DEFAULT NULL,\n    price_rating TINYINT UNSIGNED DEFAULT NULL,\n    delivery_rating TINYINT UNSIGNED DEFAULT NULL,\n    overall_rating TINYINT UNSIGNED NOT NULL,\n    comments TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Relat\u00f3rios e M\u00e9tricas\n-- -----------------------------------------------------\n\n-- Tabela de relat\u00f3rios salvos\nCREATE TABLE saved_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    report_type VARCHAR(50) NOT NULL,\n    parameters JSON NOT NULL,\n    public BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de relat\u00f3rios agendados\nCREATE TABLE scheduled_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    saved_report_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    frequency ENUM('daily', 'weekly', 'monthly', 'quarterly') NOT NULL,\n    day_of_week TINYINT UNSIGNED DEFAULT NULL,\n    day_of_month TINYINT UNSIGNED DEFAULT NULL,\n    time_of_day TIME NOT NULL,\n    recipients JSON NOT NULL,\n    last_sent TIMESTAMP NULL DEFAULT NULL,\n    next_scheduled TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (saved_report_id) REFERENCES saved_reports(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de m\u00e9tricas di\u00e1rias\nCREATE TABLE daily_metrics (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    metric_date DATE NOT NULL,\n    sales DECIMAL(10, 2) DEFAULT 0.00,\n    orders INT UNSIGNED DEFAULT 0,\n    customers INT UNSIGNED DEFAULT 0,\n    average_ticket DECIMAL(10, 2) DEFAULT 0.00,\n    tables_served INT UNSIGNED DEFAULT 0,\n    average_table_time INT UNSIGNED DEFAULT 0,\n    staff_count INT UNSIGNED DEFAULT 0,\n    labor_cost DECIMAL(10, 2) DEFAULT 0.00,\n    cogs DECIMAL(10, 2) DEFAULT 0.00,\n    profit_margin DECIMAL(5, 2) DEFAULT 0.00,\n    item_metrics JSON DEFAULT NULL,\n    payment_methods JSON DEFAULT NULL,\n    source_metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_tenant_date (tenant_id, metric_date),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Integra\u00e7\u00f5es Externas\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es de integra\u00e7\u00e3o com iFood\nCREATE TABLE ifood_integration (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    merchant_id VARCHAR(100) NOT NULL,\n    api_key VARCHAR(255) NOT NULL,\n    merchant_token VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT FALSE,\n    auto_accept_orders BOOLEAN DEFAULT FALSE,\n    default_preparation_time INT UNSIGNED DEFAULT 30,\n    sync_menu BOOLEAN DEFAULT TRUE,\n    sync_status BOOLEAN DEFAULT TRUE,\n    menu_last_sync TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos do iFood\nCREATE TABLE ifood_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    ifood_order_id VARCHAR(100) NOT NULL,\n    ifood_status VARCHAR(50) NOT NULL,\n    status_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    order_json JSON NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ifood_order (tenant_id, ifood_order_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de mapeamento de itens do card\u00e1pio com iFood\nCREATE TABLE ifood_menu_mapping (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ifood_item_id VARCHAR(100) NOT NULL,\n    ifood_category_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_mapping (tenant_id, menu_item_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de webhooks recebidos\nCREATE TABLE webhooks (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    source VARCHAR(50) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    webhook_id VARCHAR(100) NOT NULL,\n    payload JSON NOT NULL,\n    processed BOOLEAN DEFAULT FALSE,\n    error_message TEXT DEFAULT NULL,\n    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Marketing e Comunica\u00e7\u00e3o\n-- -----------------------------------------------------\n\n-- Tabela de campanhas de marketing\nCREATE TABLE marketing_campaigns (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    campaign_type ENUM('email', 'sms', 'push', 'in_app', 'multi_channel') NOT NULL,\n    target_audience JSON DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    content JSON NOT NULL,\n    metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de mensagens enviadas\nCREATE TABLE sent_messages (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    campaign_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    message_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    recipient VARCHAR(100) NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('sent', 'delivered', 'opened', 'clicked', 'bounced', 'failed') DEFAULT 'sent',\n    status_updated_at TIMESTAMP NULL DEFAULT NULL,\n    tracking_data JSON DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (campaign_id) REFERENCES marketing_campaigns(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de modelos de comunica\u00e7\u00e3o\nCREATE TABLE message_templates (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    template_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    variables JSON DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00f5es Fiscais\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es fiscais\nCREATE TABLE fiscal_settings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    company_tax_regime VARCHAR(50) DEFAULT NULL,\n    tax_id VARCHAR(50) DEFAULT NULL,\n    state_tax_id VARCHAR(50) DEFAULT NULL,\n    municipal_tax_id VARCHAR(50) DEFAULT NULL,\n    tax_rates JSON DEFAULT NULL,\n    fiscal_printer_model VARCHAR(100) DEFAULT NULL,\n    fiscal_printer_serial VARCHAR(100) DEFAULT NULL,\n    nfce_token VARCHAR(255) DEFAULT NULL,\n    nfce_certificate VARCHAR(255) DEFAULT NULL,\n    nfce_environment ENUM('production', 'sandbox') DEFAULT 'sandbox',\n    nfce_series INT UNSIGNED DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de notas fiscais\nCREATE TABLE fiscal_receipts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    receipt_type ENUM('nfce', 'nfe', 'sat', 'nfse') NOT NULL,\n    receipt_number VARCHAR(50) NOT NULL,\n    receipt_series VARCHAR(10) DEFAULT NULL,\n    receipt_key VARCHAR(100) DEFAULT NULL,\n    status ENUM('pending', 'issued', 'cancelled', 'error') DEFAULT 'pending',\n    issue_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_reason TEXT DEFAULT NULL,\n    receipt_url VARCHAR(255) DEFAULT NULL,\n    receipt_data JSON DEFAULT NULL,\n    qr_code TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de c\u00f3digo de produtos fiscais\nCREATE TABLE fiscal_item_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ncm VARCHAR(20) DEFAULT NULL,\n    cest VARCHAR(20) DEFAULT NULL,\n    cfop VARCHAR(10) DEFAULT NULL,\n    icms_rate DECIMAL(5, 2) DEFAULT NULL,\n    pis_rate DECIMAL(5, 2) DEFAULT NULL,\n    cofins_rate DECIMAL(5, 2) DEFAULT NULL,\n    iss_rate DECIMAL(5, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Dados iniciais\n-- -----------------------------------------------------\n\n-- Inserir planos de assinatura\nINSERT INTO plans (name, code, description, price, billing_cycle, features, limits, active) VALUES\n('Plano B\u00e1sico', 'basic', 'Ideal para pequenos estabelecimentos com funcionalidades essenciais', 99.90, 'monthly', \n '[\"qrcode_basic\", \"basic_reports\"]', \n '{\"max_tables\": 10, \"max_users\": 5, \"max_menu_items\": 50, \"max_monthly_orders\": 500}', \n true),\n('Plano Padr\u00e3o', 'standard', 'Perfeito para restaurantes de m\u00e9dio porte com recursos completos', 199.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\"]', \n '{\"max_tables\": 25, \"max_users\": 15, \"max_menu_items\": 150, \"max_monthly_orders\": 2000}', \n true),\n('Plano Premium', 'premium', 'Solu\u00e7\u00e3o completa para grandes estabelecimentos com funcionalidades avan\u00e7adas', 349.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\"]', \n '{\"max_tables\": 50, \"max_users\": 30, \"max_menu_items\": 300, \"max_monthly_orders\": 5000}', \n true),\n('Plano Enterprise', 'enterprise', 'Solu\u00e7\u00e3o personalizada para redes de restaurantes e franquias', 599.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\", \"api_access\", \"custom_integrations\"]', \n '{\"max_tables\": -1, \"max_users\": -1, \"max_menu_items\": -1, \"max_monthly_orders\": -1}', \n true);\n\n-- Inserir usu\u00e1rio admin para testes (senha: admin123)\nINSERT INTO users (username, email, password, name, role, active, email_verified) VALUES\n('admin', 'admin@restaurantesaas.com.br', '$2y$12$WxkpKAQQ1RBoOaNUvDH4R.UJYPzMvEVDkn5P3nCWfxmYUQQeMLOsW', 'Administrador', 'platform_admin', true, true);\n\n-- Inserir permiss\u00f5es b\u00e1sicas\nINSERT INTO permissions (name, description) VALUES\n('view_dashboard', 'Visualizar dashboard'),\n('manage_menu', 'Gerenciar card\u00e1pio'),\n('manage_orders', 'Gerenciar pedidos'),\n('manage_tables', 'Gerenciar mesas'),\n('manage_inventory', 'Gerenciar estoque'),\n('manage_staff', 'Gerenciar funcion\u00e1rios'),\n('manage_customers', 'Gerenciar clientes'),\n('manage_payments', 'Gerenciar pagamentos'),\n('view_reports', 'Visualizar relat\u00f3rios'),\n('manage_settings', 'Gerenciar configura\u00e7\u00f5es'),\n('manage_integrations', 'Gerenciar integra\u00e7\u00f5es'),\n('admin_access', 'Acesso administrativo completo');\n\n2. **Estrutura de Diret\u00f3rios (100%)**\n\n#!/bin/bash\n\n# Criar diret\u00f3rio raiz\nmkdir -p restaurante-sistema\n\n# Criar estrutura de assets\nmkdir -p restaurante-sistema/assets/css/restaurant-types\nmkdir -p restaurante-sistema/assets/js/restaurant-types\nmkdir -p restaurante-sistema/assets/images/logo\nmkdir -p restaurante-sistema/assets/images/icons/{menu,status,actions,payment,subscription}\nmkdir -p restaurante-sistema/assets/images/menu\nmkdir -p restaurante-sistema/assets/images/ui\nmkdir -p restaurante-sistema/assets/images/plans\nmkdir -p restaurante-sistema/assets/images/restaurant-types/{alacarte,fastfood,pizzaria}\nmkdir -p restaurante-sistema/assets/fonts\n\n# Criar arquivos CSS\ntouch restaurante-sistema/assets/css/main.css\ntouch restaurante-sistema/assets/css/login.css\ntouch restaurante-sistema/assets/css/dashboard.css\ntouch restaurante-sistema/assets/css/tables.css\ntouch restaurante-sistema/assets/css/menu.css\ntouch restaurante-sistema/assets/css/kitchen.css\ntouch restaurante-sistema/assets/css/reports.css\ntouch restaurante-sistema/assets/css/ponto.css\ntouch restaurante-sistema/assets/css/fornecedores.css\ntouch restaurante-sistema/assets/css/customer-mobile.css\ntouch restaurante-sistema/assets/css/subscription.css\ntouch restaurante-sistema/assets/css/pricing.css\ntouch restaurante-sistema/assets/css/billing.css\ntouch restaurante-sistema/assets/css/onboarding.css\n\n# Criar arquivos CSS espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/css/restaurant-types/alacarte.css\ntouch restaurante-sistema/assets/css/restaurant-types/fastfood.css\ntouch restaurante-sistema/assets/css/restaurant-types/pizzaria.css\ntouch restaurante-sistema/assets/css/restaurant-types/rodizio.css\ntouch restaurante-sistema/assets/css/restaurant-types/selfservice.css\ntouch restaurante-sistema/assets/css/restaurant-types/delivery.css\ntouch restaurante-sistema/assets/css/restaurant-types/foodtruck.css\ntouch restaurante-sistema/assets/css/restaurant-types/bar.css\ntouch restaurante-sistema/assets/css/restaurant-types/cafeteria.css\ntouch restaurante-sistema/assets/css/restaurant-types/multiunit.css\n\n# Criar arquivos JavaScript\ntouch restaurante-sistema/assets/js/main.js\ntouch restaurante-sistema/assets/js/login.js\ntouch restaurante-sistema/assets/js/dashboard.js\ntouch restaurante-sistema/assets/js/tables.js\ntouch restaurante-sistema/assets/js/orders.js\ntouch restaurante-sistema/assets/js/menu.js\ntouch restaurante-sistema/assets/js/kitchen.js\ntouch restaurante-sistema/assets/js/inventory.js\ntouch restaurante-sistema/assets/js/payments.js\ntouch restaurante-sistema/assets/js/stripe-integration.js\ntouch restaurante-sistema/assets/js/subscription.js\ntouch restaurante-sistema/assets/js/pricing-calculator.js\ntouch restaurante-sistema/assets/js/billing-portal.js\ntouch restaurante-sistema/assets/js/charts.js\ntouch restaurante-sistema/assets/js/ponto.js\ntouch restaurante-sistema/assets/js/supplier-manager.js\ntouch restaurante-sistema/assets/js/group-orders.js\ntouch restaurante-sistema/assets/js/bill-splitter.js\ntouch restaurante-sistema/assets/js/onboarding.js\n\n# Criar arquivos JavaScript espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/js/restaurant-types/alacarte.js\ntouch restaurante-sistema/assets/js/restaurant-types/fastfood.js\ntouch restaurante-sistema/assets/js/restaurant-types/pizzaria.js\ntouch restaurante-sistema/assets/js/restaurant-types/rodizio.js\ntouch restaurante-sistema/assets/js/restaurant-types/selfservice.js\ntouch restaurante-sistema/assets/js/restaurant-types/delivery.js\ntouch restaurante-sistema/assets/js/restaurant-types/multiunit.js\n\n# Criar estrutura de config\nmkdir -p restaurante-sistema/config\ntouch restaurante-sistema/config/database.php\ntouch restaurante-sistema/config/constants.php\ntouch restaurante-sistema/config/stripe.php\ntouch restaurante-sistema/config/email.php\ntouch restaurante-sistema/config/sms.php\ntouch restaurante-sistema/config/qrcode.php\ntouch restaurante-sistema/config/ifood.php\ntouch restaurante-sistema/config/restaurant_types.php\ntouch restaurante-sistema/config/interface_settings.php\ntouch restaurante-sistema/config/order_methods.php\ntouch restaurante-sistema/config/subscription_plans.php\ntouch restaurante-sistema/config/tenant.php\ntouch restaurante-sistema/config/feature_limits.php\n\n# Criar estrutura de controllers\nmkdir -p restaurante-sistema/controllers/subscription\nmkdir -p restaurante-sistema/controllers/DashboardController/{AlacarteDashboardController.php,FastFoodDashboardController.php,PizzariaDashboardController.php,RodizioDashboardController.php,DeliveryDashboardController.php}\nmkdir -p restaurante-sistema/controllers/OrderController\nmkdir -p restaurante-sistema/controllers/MenuController\nmkdir -p restaurante-sistema/controllers/PaymentController\nmkdir -p restaurante-sistema/controllers/SupplierController\nmkdir -p restaurante-sistema/controllers/StaffController\n\ntouch restaurante-sistema/controllers/AuthController.php\ntouch restaurante-sistema/controllers/SubscriptionController.php\ntouch restaurante-sistema/controllers/subscription/PlansController.php\ntouch restaurante-sistema/controllers/subscription/BillingController.php\ntouch restaurante-sistema/controllers/subscription/FeatureController.php\ntouch restaurante-sistema/controllers/TenantController.php\ntouch restaurante-sistema/controllers/OnboardingController.php\ntouch restaurante-sistema/controllers/DashboardController.php\ntouch restaurante-sistema/controllers/TableController.php\ntouch restaurante-sistema/controllers/OrderController.php\ntouch restaurante-sistema/controllers/OrderController/SingleOrderController.php\ntouch restaurante-sistema/controllers/OrderController/GroupOrderController.php\ntouch restaurante-sistema/controllers/MenuController.php\ntouch restaurante-sistema/controllers/MenuController/AlacarteMenuController.php\ntouch restaurante-sistema/controllers/MenuController/FastFoodMenuController.php\ntouch restaurante-sistema/controllers/MenuController/PizzariaMenuController.php\ntouch restaurante-sistema/controllers/MenuController/RodizioMenuController.php\ntouch restaurante-sistema/controllers/MenuController/SelfServiceMenuController.php\ntouch restaurante-sistema/controllers/KitchenController.php\ntouch restaurante-sistema/controllers/InventoryController.php\ntouch restaurante-sistema/controllers/PaymentController.php\ntouch restaurante-sistema/controllers/PaymentController/BillSplitController.php\ntouch restaurante-sistema/controllers/ReportController.php\ntouch restaurante-sistema/controllers/iFoodController.php\ntouch restaurante-sistema/controllers/SupplierController.php\ntouch restaurante-sistema/controllers/SupplierController/QuickOrderController.php\ntouch restaurante-sistema/controllers/StaffController.php\ntouch restaurante-sistema/controllers/StaffController/TimeClockController.php\ntouch restaurante-sistema/controllers/CustomerController.php\ntouch restaurante-sistema/controllers/QRCodeController.php\ntouch restaurante-sistema/controllers/RestaurantTypeController.php\ntouch restaurante-sistema/controllers/SettingsController.php\n\n# Criar estrutura de models\nmkdir -p restaurante-sistema/models/Account\nmkdir -p restaurante-sistema/models/Order\nmkdir -p restaurante-sistema/models/MenuItem\nmkdir -p restaurante-sistema/models/Inventory\nmkdir -p restaurante-sistema/models/Payment\nmkdir -p restaurante-sistema/models/Staff\nmkdir -p restaurante-sistema/models/Supplier\nmkdir -p restaurante-sistema/models/Customer\n\ntouch restaurante-sistema/models/User.php\ntouch restaurante-sistema/models/Account.php\ntouch restaurante-sistema/models/Account/Subscription.php\ntouch restaurante-sistema/models/Account/Plan.php\ntouch restaurante-sistema/models/Account/Invoice.php\ntouch restaurante-sistema/models/Account/Usage.php\ntouch restaurante-sistema/models/Tenant.php\ntouch restaurante-sistema/models/Restaurant.php\ntouch restaurante-sistema/models/RestaurantType.php\ntouch restaurante-sistema/models/CashRegister.php\ntouch restaurante-sistema/models/Table.php\ntouch restaurante-sistema/models/Order.php\ntouch restaurante-sistema/models/Order/SingleOrder.php\ntouch restaurante-sistema/models/Order/GroupOrder.php\ntouch restaurante-sistema/models/OrderItem.php\ntouch restaurante-sistema/models/MenuItem.php\ntouch restaurante-sistema/models/MenuItem/AlacarteMenuItem.php\ntouch restaurante-sistema/models/MenuItem/FastFoodMenuItem.php\ntouch restaurante-sistema/models/MenuItem/PizzaMenuItem.php\ntouch restaurante-sistema/models/MenuItem/RodizioMenuItem.php\ntouch restaurante-sistema/models/Inventory.php\ntouch restaurante-sistema/models/Inventory/StockMovement.php\ntouch restaurante-sistema/models/Reservation.php\ntouch restaurante-sistema/models/Payment.php\ntouch restaurante-sistema/models/Payment/BillSplit.php\ntouch restaurante-sistema/models/Staff.php\ntouch restaurante-sistema/models/Staff/TimeClock.php\ntouch restaurante-sistema/models/Supplier.php\ntouch restaurante-sistema/models/Supplier/SupplierContact.php\ntouch restaurante-sistema/models/Supplier/SupplierOrder.php\ntouch restaurante-sistema/models/Supplier/SupplierRating.php\ntouch restaurante-sistema/models/Customer.php\ntouch restaurante-sistema/models/Customer/LoyaltyProgram.php\ntouch restaurante-sistema/models/MarketingCampaign.php\ntouch restaurante-sistema/models/QRCode.php\ntouch restaurante-sistema/models/RestaurantConfiguration.php\ntouch restaurante-sistema/models/RestaurantInterface.php\n\n# Criar estrutura de views\nmkdir -p restaurante-sistema/views/auth\nmkdir -p restaurante-sistema/views/subscription\nmkdir -p restaurante-sistema/views/onboarding\nmkdir -p restaurante-sistema/views/dashboard/{alacarte,fastfood,pizzaria,rodizio,selfservice,delivery,multiunit}\nmkdir -p restaurante-sistema/views/tables\nmkdir -p restaurante-sistema/views/menu/types\nmkdir -p restaurante-sistema/views/kitchen/types\nmkdir -p restaurante-sistema/views/inventory\nmkdir -p restaurante-sistema/views/payments\nmkdir -p restaurante-sistema/views/reports/types\nmkdir -p restaurante-sistema/views/ifood\nmkdir -p restaurante-sistema/views/suppliers\nmkdir -p restaurante-sistema/views/staff/time-clock\nmkdir -p restaurante-sistema/views/customers\nmkdir -p restaurante-sistema/views/marketing\nmkdir -p restaurante-sistema/views/qrcode\nmkdir -p restaurante-sistema/views/admin\nmkdir -p restaurante-sistema/views/settings\n\n# Criar arquivos de views de autentica\u00e7\u00e3o\ntouch restaurante-sistema/views/auth/login.php\ntouch restaurante-sistema/views/auth/reset-password.php\ntouch restaurante-sistema/views/auth/register.php\n\n# Criar arquivos de views de assinatura\ntouch restaurante-sistema/views/subscription/plans.php\ntouch restaurante-sistema/views/subscription/checkout.php\ntouch restaurante-sistema/views/subscription/success.php\ntouch restaurante-sistema/views/subscription/billing.php\ntouch restaurante-sistema/views/subscription/upgrade.php\ntouch restaurante-sistema/views/subscription/downgrade.php\ntouch restaurante-sistema/views/subscription/cancel.php\ntouch restaurante-sistema/views/subscription/payment-methods.php\n\n# Criar arquivos de views de onboarding\ntouch restaurante-sistema/views/onboarding/welcome.php\ntouch restaurante-sistema/views/onboarding/restaurant-type.php\ntouch restaurante-sistema/views/onboarding/restaurant-comparison.php\ntouch restaurante-sistema/views/onboarding/basic-info.php\ntouch restaurante-sistema/views/onboarding/menu-setup.php\ntouch restaurante-sistema/views/onboarding/operating-hours.php\ntouch restaurante-sistema/views/onboarding/table-setup.php\ntouch restaurante-sistema/views/onboarding/staff-roles.php\ntouch restaurante-sistema/views/onboarding/payment-options.php\ntouch restaurante-sistema/views/onboarding/finalize.php\n\n# Criar arquivos de views de dashboard\ntouch restaurante-sistema/views/dashboard/index.php\ntouch restaurante-sistema/views/dashboard/account-status.php\ntouch restaurante-sistema/views/dashboard/alacarte/index.php\ntouch restaurante-sistema/views/dashboard/alacarte/tables.php\ntouch restaurante-sistema/views/dashboard/fastfood/index.php\ntouch restaurante-sistema/views/dashboard/fastfood/queue.php\ntouch restaurante-sistema/views/dashboard/pizzaria/index.php\ntouch restaurante-sistema/views/dashboard/pizzaria/pizza-builder.php\ntouch restaurante-sistema/views/dashboard/rodizio/index.php\ntouch restaurante-sistema/views/dashboard/rodizio/rounds.php\ntouch restaurante-sistema/views/dashboard/selfservice/index.php\ntouch restaurante-sistema/views/dashboard/selfservice/scales.php\ntouch restaurante-sistema/views/dashboard/delivery/index.php\ntouch restaurante-sistema/views/dashboard/delivery/routes.php\ntouch restaurante-sistema/views/dashboard/multiunit/index.php\ntouch restaurante-sistema/views/dashboard/multiunit/units.php\n\n# Criar mais arquivos de views (continua\u00e7\u00e3o)\ntouch restaurante-sistema/views/tables/map.php\ntouch restaurante-sistema/views/tables/order.php\ntouch restaurante-sistema/views/tables/multi-user.php\n\ntouch restaurante-sistema/views/menu/admin.php\ntouch restaurante-sistema/views/menu/editor.php\ntouch restaurante-sistema/views/menu/customer.php\ntouch restaurante-sistema/views/menu/category-manager.php\ntouch restaurante-sistema/views/menu/promotions.php\ntouch restaurante-sistema/views/menu/types/alacarte.php\ntouch restaurante-sistema/views/menu/types/fastfood.php\ntouch restaurante-sistema/views/menu/types/pizzaria.php\ntouch restaurante-sistema/views/menu/types/rodizio.php\ntouch restaurante-sistema/views/menu/types/selfservice.php\n\ntouch restaurante-sistema/views/kitchen/panel.php\ntouch restaurante-sistema/views/kitchen/inventory-usage.php\ntouch restaurante-sistema/views/kitchen/types/alacarte.php\ntouch restaurante-sistema/views/kitchen/types/fastfood.php\ntouch restaurante-sistema/views/kitchen/types/pizzaria.php\ntouch restaurante-sistema/views/kitchen/types/rodizio.php\n\ntouch restaurante-sistema/views/inventory/management.php\ntouch restaurante-sistema/views/inventory/movements.php\ntouch restaurante-sistema/views/inventory/alerts.php\n\ntouch restaurante-sistema/views/payments/process.php\ntouch restaurante-sistema/views/payments/receipt.php\ntouch restaurante-sistema/views/payments/split-bill.php\ntouch restaurante-sistema/views/payments/group-payment.php\n\ntouch restaurante-sistema/views/reports/sales.php\ntouch restaurante-sistema/views/reports/cash.php\ntouch restaurante-sistema/views/reports/performance.php\ntouch restaurante-sistema/views/reports/financial.php\ntouch restaurante-sistema/views/reports/types/alacarte.php\ntouch restaurante-sistema/views/reports/types/fastfood.php\ntouch restaurante-sistema/views/reports/types/pizzaria.php\ntouch restaurante-sistema/views/reports/types/rodizio.php\ntouch restaurante-sistema/views/reports/types/delivery.php\n\ntouch restaurante-sistema/views/ifood/orders.php\n\ntouch restaurante-sistema/views/suppliers/list.php\ntouch restaurante-sistema/views/suppliers/details.php\ntouch restaurante-sistema/views/suppliers/quick-order.php\ntouch restaurante-sistema/views/suppliers/history.php\ntouch restaurante-sistema/views/suppliers/ratings.php\n\ntouch restaurante-sistema/views/staff/list.php\ntouch restaurante-sistema/views/staff/details.php\ntouch restaurante-sistema/views/staff/schedule.php\ntouch restaurante-sistema/views/staff/time-clock/register.php\ntouch restaurante-sistema/views/staff/time-clock/management.php\ntouch restaurante-sistema/views/staff/time-clock/reports.php\n\ntouch restaurante-sistema/views/customers/list.php\ntouch restaurante-sistema/views/customers/details.php\ntouch restaurante-sistema/views/customers/loyalty.php\n\ntouch restaurante-sistema/views/marketing/campaigns.php\ntouch restaurante-sistema/views/marketing/promotions.php\n\ntouch restaurante-sistema/views/qrcode/generator.php\ntouch restaurante-sistema/views/qrcode/manager.php\ntouch restaurante-sistema/views/qrcode/preview.php\n\ntouch restaurante-sistema/views/admin/accounts.php\ntouch restaurante-sistema/views/admin/plans.php\ntouch restaurante-sistema/views/admin/statistics.php\ntouch restaurante-sistema/views/admin/support.php\ntouch restaurante-sistema/views/admin/settings.php\n\ntouch restaurante-sistema/views/settings/general.php\ntouch restaurante-sistema/views/settings/restaurant-type.php\ntouch restaurante-sistema/views/settings/interfaces.php\ntouch restaurante-sistema/views/settings/qrcode.php\ntouch restaurante-sistema/views/settings/group-orders.php\ntouch restaurante-sistema/views/settings/time-clock.php\ntouch restaurante-sistema/views/settings/integrations.php\ntouch restaurante-sistema/views/settings/account.php\ntouch restaurante-sistema/views/settings/backup.php\n\n# Criar estrutura de includes\nmkdir -p restaurante-sistema/includes\ntouch restaurante-sistema/includes/functions.php\ntouch restaurante-sistema/includes/validation.php\ntouch restaurante-sistema/includes/session.php\ntouch restaurante-sistema/includes/security.php\ntouch restaurante-sistema/includes/currency.php\ntouch restaurante-sistema/includes/date.php\ntouch restaurante-sistema/includes/notification.php\ntouch restaurante-sistema/includes/restaurant-type-helper.php\ntouch restaurante-sistema/includes/interface-loader.php\ntouch restaurante-sistema/includes/tenant-resolver.php\ntouch restaurante-sistema/includes/feature-checker.php\ntouch restaurante-sistema/includes/subscription-helper.php\n\n# Criar estrutura de API\nmkdir -p restaurante-sistema/api/subscription\nmkdir -p restaurante-sistema/api/orders\nmkdir -p restaurante-sistema/api/payments\nmkdir -p restaurante-sistema/api/staff\n\ntouch restaurante-sistema/api/auth.php\ntouch restaurante-sistema/api/subscription.php\ntouch restaurante-sistema/api/subscription/plans.php\ntouch restaurante-sistema/api/subscription/webhooks.php\ntouch restaurante-sistema/api/subscription/billing.php\ntouch restaurante-sistema/api/tables.php\ntouch restaurante-sistema/api/orders.php\ntouch restaurante-sistema/api/orders/group-orders.php\ntouch restaurante-sistema/api/menu.php\ntouch restaurante-sistema/api/payments.php\ntouch restaurante-sistema/api/payments/bill-split.php\ntouch restaurante-sistema/api/ifood.php\ntouch restaurante-sistema/api/suppliers.php\ntouch restaurante-sistema/api/staff.php\ntouch restaurante-sistema/api/staff/time-clock.php\ntouch restaurante-sistema/api/customers.php\ntouch restaurante-sistema/api/reports.php\ntouch restaurante-sistema/api/qrcode.php\ntouch restaurante-sistema/api/restaurant-type.php\n\n# Criar estrutura de services\nmkdir -p restaurante-sistema/services\ntouch restaurante-sistema/services/StripeService.php\ntouch restaurante-sistema/services/SubscriptionService.php\ntouch restaurante-sistema/services/BillingService.php\ntouch restaurante-sistema/services/TenantService.php\ntouch restaurante-sistema/services/FeatureLimitService.php\ntouch restaurante-sistema/services/QRCodeService.php\ntouch restaurante-sistema/services/PDFService.php\ntouch restaurante-sistema/services/iFoodService.php\ntouch restaurante-sistema/services/EmailService.php\ntouch restaurante-sistema/services/SMSService.php\ntouch restaurante-sistema/services/NotificationService.php\ntouch restaurante-sistema/services/ChartService.php\ntouch restaurante-sistema/services/BackupService.php\ntouch restaurante-sistema/services/RestaurantTypeService.php\ntouch restaurante-sistema/services/InterfaceService.php\ntouch restaurante-sistema/services/ScaleService.php\ntouch restaurante-sistema/services/DeliveryTrackingService.php\ntouch restaurante-sistema/services/RodizioTrackingService.php\n\n# Criar estrutura de database\nmkdir -p restaurante-sistema/database/migrations\nmkdir -p restaurante-sistema/database/seeds\n\ntouch restaurante-sistema/database/migrations/create_tenants_table.php\ntouch restaurante-sistema/database/migrations/create_accounts_table.php\ntouch restaurante-sistema/database/migrations/create_subscriptions_table.php\ntouch restaurante-sistema/database/migrations/create_plans_table.php\ntouch restaurante-sistema/database/migrations/create_invoices_table.php\ntouch restaurante-sistema/database/migrations/create_usage_logs_table.php\ntouch restaurante-sistema/database/migrations/create_users_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_types_table.php\ntouch restaurante-sistema/database/migrations/create_restaurants_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_configurations_table.php\ntouch restaurante-sistema/database/migrations/create_tables_table.php\ntouch restaurante-sistema/database/migrations/create_menu_items_table.php\ntouch restaurante-sistema/database/migrations/create_orders_table.php\ntouch restaurante-sistema/database/migrations/create_order_items_table.php\ntouch restaurante-sistema/database/migrations/create_inventory_table.php\ntouch restaurante-sistema/database/migrations/create_customers_table.php\ntouch restaurante-sistema/database/migrations/create_staff_table.php\ntouch restaurante-sistema/database/migrations/create_time_clock_table.php\ntouch restaurante-sistema/database/migrations/create_suppliers_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_orders_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_contacts_table.php\ntouch restaurante-sistema/database/migrations/create_payments_table.php\ntouch restaurante-sistema/database/migrations/create_bill_splits_table.php\ntouch restaurante-sistema/database/migrations/create_qrcodes_table.php\n\ntouch restaurante-sistema/database/seeds/plans_seeder.php\ntouch restaurante-sistema/database/seeds/features_seeder.php\ntouch restaurante-sistema/database/seeds/users_seeder.php\ntouch restaurante-sistema/database/seeds/restaurant_types_seeder.php\ntouch restaurante-sistema/database/seeds/menu_items_seeder.php\ntouch restaurante-sistema/database/seeds/suppliers_seeder.php\ntouch restaurante-sistema/database/seeds/staff_seeder.php\n\n# Criar estrutura de public\nmkdir -p restaurante-sistema/public/webhook\nmkdir -p restaurante-sistema/public/qr/tables\nmkdir -p restaurante-sistema/public/receipt\n\ntouch restaurante-sistema/public/index.php\ntouch restaurante-sistema/public/pricing.php\ntouch restaurante-sistema/public/register.php\ntouch restaurante-sistema/public/customer-menu.php\ntouch restaurante-sistema/public/group-order.php\ntouch restaurante-sistema/public/time-clock.php\ntouch restaurante-sistema/public/webhook/stripe.php\ntouch restaurante-sistema/public/.htaccess\n\n# Criar estrutura de mobile\nmkdir -p restaurante-sistema/mobile/types\nmkdir -p restaurante-sistema/mobile/staff\n\ntouch restaurante-sistema/mobile/index.php\ntouch restaurante-sistema/mobile/menu.php\ntouch restaurante-sistema/mobile/order.php\ntouch restaurante-sistema/mobile/group-order.php\ntouch restaurante-sistema/mobile/payment.php\ntouch restaurante-sistema/mobile/types/alacarte.php\ntouch restaurante-sistema/mobile/types/fastfood.php\ntouch restaurante-sistema/mobile/types/pizzaria.php\ntouch restaurante-sistema/mobile/types/rodizio.php\ntouch restaurante-sistema/mobile/staff/time-clock.php\n\n# Criar estrutura de docs\nmkdir -p restaurante-sistema/docs/restaurant-types\n\ntouch restaurante-sistema/docs/setup.md\ntouch restaurante-sistema/docs/admin-guide.md\ntouch restaurante-sistema/docs/user-guide.md\ntouch restaurante-sistema/docs/api-docs.md\ntouch restaurante-sistema/docs/database-schema.md\ntouch restaurante-sistema/docs/subscription.md\ntouch restaurante-sistema/docs/restaurant-types/alacarte.md\ntouch restaurante-sistema/docs/restaurant-types/fastfood.md\ntouch restaurante-sistema/docs/restaurant-types/pizzaria.md\n\n# Criar estrutura de tests\nmkdir -p restaurante-sistema/tests/unit/subscription\nmkdir -p restaurante-sistema/tests/integration\nmkdir -p restaurante-sistema/tests/acceptance\n\n# Criar estrutura de vendor (diret\u00f3rio vazio para Composer)\nmkdir -p restaurante-sistema/vendor\n\n# Criar arquivos raiz\ntouch restaurante-sistema/.htaccess\ntouch restaurante-sistema/index.php\ntouch restaurante-sistema/composer.json\ntouch restaurante-sistema/package.json\ntouch restaurante-sistema/README.md\ntouch restaurante-sistema/LICENSE\ntouch restaurante-sistema/.gitignore\n\n\ntudo acima meno o banco de dados precisar ser criado, incluindo o diret\u00f3rio\n\n# CHECKPOINT DE DESENVOLVIMENTO - SISTEMA DE GEST\u00c3O DE RESTAURANTES SAAS\n\n## PROGRESSO ATUAL: 0% CONCLU\u00cdDO\n\n\nEste checkpoint resume o progresso atual e define claramente os pr\u00f3ximos passos para o desenvolvimento. Em sua pr\u00f3xima conversa, voc\u00ea pode continuar a partir deste ponto, concentrando-se na implementa\u00e7\u00e3o dos m\u00f3dulos listados acima.\n\n\n\n\n\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\n- /core/config/app.php\n- restaurante-sistema/core/Router.php\n- restaurante-sistema/core/Controller.php\n- restaurante-sistema/core/View.php\n- restaurante-sistema/core/Response.php\n- restaurante-sistema/core/ErrorHandler.php\n- restaurante-sistema/restaurante-sistema/core/Database/MigrationManager.php\n- restaurante-sistema/restaurante-sistema/core/Database/Migration.php\n- restaurante-sistema/restaurante-sistema/migrate.php\n- restaurante-sistema/restaurante-sistema/database/migrations/001_create_tenants_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/002_create_users_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/003_create_roles_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/004_create_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/006_create_access_logs_table.php\n- restaurante-sistema/restaurante-sistema/models/User.php\n- restaurante-sistema/restaurante-sistema/controllers/AuthController.php\n- restaurante-sistema/Migration Manager\n- restaurante-sistema/Base Migration Class\n- restaurante-sistema/CLI Migration Runner\n- restaurante-sistema/Actual Migration Files\n- restaurante-sistema/Modelo de Usu\u00e1rio\n- restaurante-sistema/Controlador de Autentica\u00e7\u00e3o\n\n## Requisitos para o Pr\u00f3ximo Passo\n# Desenvolvimento do Sistema SaaS de Restaurantes - Pr\u00f3ximos 10%\n\nAgora que a infraestrutura b\u00e1sica do m\u00f3dulo core foi implementada com o sistema de rotas, controladores base, views e gest\u00e3o de erros, precisamos avan\u00e7ar para o pr\u00f3ximo est\u00e1gio do desenvolvimento, que representa mais 10% do projeto.\n\n## REQUISITOS DESTA ETAPA\n\n### 1. Completar o M\u00f3dulo Core\n\n#### 1.1 Sistema de Migrations\n- Implementar um sistema de migrations para versionamento do banco de dados\n- Criar as migrations para as tabelas principais do sistema:\n  - `tenants` - Tabela para gerenciar os restaurantes (multi-tenant)\n  - `users` - Usu\u00e1rios do sistema\n  - `roles` - Pap\u00e9is de usu\u00e1rio (admin, gerente, gar\u00e7om, etc.)\n  - `permissions` - Permiss\u00f5es do sistema\n  - `role_permissions` - Relacionamento entre pap\u00e9is e permiss\u00f5es\n  - `access_logs` - Registros de acesso e atividades\n\n#### 1.2 Implementa\u00e7\u00e3o de Autentica\u00e7\u00e3o\n- Completar o sistema de autentica\u00e7\u00e3o (login, logout, reset de senha)\n- Implementar middleware de autentica\u00e7\u00e3o para prote\u00e7\u00e3o de rotas\n- Criar os controladores e views para autentica\u00e7\u00e3o\n- Implementar sistema de registro de novos tenants/restaurantes\n\n#### 1.3 Gerenciamento de Tenants (Multi-tenancy)\n- Finalizar o sistema de resolu\u00e7\u00e3o de tenants por dom\u00ednio/subdom\u00ednio\n- Implementar filtros de tenant para todas as consultas\n- Criar painel administrativo b\u00e1sico para gest\u00e3o de tenants\n\n### 2. Iniciar o M\u00f3dulo de Assinaturas (Subscription)\n\n#### 2.1 Modelos de Dados\n- Implementar os modelos para:\n  - `plans` - Planos de assinatura dispon\u00edveis\n  - `subscriptions` - Assinaturas dos tenants\n  - `invoices` - Faturas geradas para assinaturas\n  - `subscription_items` - Itens inclu\u00eddos nas assinaturas\n\n#### 2.2 Integra\u00e7\u00e3o com Stripe\n- Implementar o servi\u00e7o de integra\u00e7\u00e3o com Stripe\n- Criar os endpoints para webhooks do Stripe\n- Sincronizar produtos e pre\u00e7os com o Stripe\n- Implementar o fluxo de checkout para novas assinaturas\n\n#### 2.3 Sistema de Gest\u00e3o de Assinaturas\n- Desenvolver controladores para gerenciamento de assinaturas\n- Criar views para exibi\u00e7\u00e3o de planos e status da assinatura\n- Implementar l\u00f3gica para limites de recursos com base no plano\n- Desenvolver sistema de notifica\u00e7\u00f5es para renova\u00e7\u00f5es e pagamentos\n\n## DIRETRIZES DE IMPLEMENTA\u00c7\u00c3O\n\n1. Seguir o padr\u00e3o PSR-12 para estilo de c\u00f3digo\n2. Usar namespaces adequados (`RestauranteSaas\\Module\\Component`)\n3. Documentar todas as classes e m\u00e9todos com PHPDoc\n4. Implementar valida\u00e7\u00e3o de dados em todas as entradas\n5. Tratar erros e exce\u00e7\u00f5es adequadamente\n6. Considerar a seguran\u00e7a em cada aspecto da implementa\u00e7\u00e3o\n7. Usar prepared statements para todas as consultas SQL\n8. Garantir que todas as tabelas relevantes incluam o campo `tenant_id`\n9. Aplicar filtro de tenant em cada consulta ao banco de dados\n\n## FORMATO DE C\u00d3DIGO\n\nPara facilitar a extra\u00e7\u00e3o e cria\u00e7\u00e3o autom\u00e1tica dos arquivos, use o formato:\n\n```php\n// File: caminho/do/arquivo.php\n// C\u00f3digo completo aqui...\n```\n\n## ENTREG\u00c1VEIS ESPERADOS\n\n1. Sistema completo de migrations\n2. Sistema de autentica\u00e7\u00e3o funcionando\n3. Resolu\u00e7\u00e3o de multi-tenancy implementada\n4. Modelos e controladores para assinaturas\n5. Integra\u00e7\u00e3o funcional com Stripe\n6. Views para gerenciamento de assinaturas\n7. Sistema para verifica\u00e7\u00e3o de limites de recursos por plano\n8. Documenta\u00e7\u00e3o de uso e integra\u00e7\u00e3o dos componentes\n\nLembre-se de que este sistema deve ser flex\u00edvel para atender a diversos tipos de restaurantes (\u00e0 la carte, fast food, pizzaria, rod\u00edzio) e deve ser constru\u00eddo considerando escalabilidade e seguran\u00e7a desde o in\u00edcio.\n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# Implementa\u00e7\u00e3o do M\u00f3dulo Core - Sistema SaaS de Restaurantes\n\nVamos implementar os componentes principais do m\u00f3dulo core para o sistema de restaurantes SaaS, focando na estrutura multi-tenant, autentica\u00e7\u00e3o e gerenciamento b\u00e1sico.\n\n## 1. Completar o Sistema de Migrations\n\nVamos iniciar melhorando o gerenciador de migra\u00e7\u00f5es:\n\n```php\n// File: restaurante-sistema/core/Database/MigrationManager.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Database;\n\nclass MigrationManager {\n    protected $db;\n    protected $migrationsTable = 'migrations';\n    protected $migrationsPath;\n\n    public function __construct($db, $migrationsPath) {\n        $this->db = $db;\n        $this->migrationsPath = $migrationsPath;\n        $this->initialize();\n    }\n\n    /**\n     * Inicializa o gerenciador de migra\u00e7\u00f5es\n     */\n    protected function initialize() {\n        // Verifica se a tabela de migrations existe\n        $query = \"SHOW TABLES LIKE '{$this->migrationsTable}'\";\n        $result = $this->db->query($query);\n        \n        if ($result->num_rows === 0) {\n            // Cria a tabela de migrations se ela n\u00e3o existir\n            $query = \"CREATE TABLE {$this->migrationsTable} (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                migration VARCHAR(255) NOT NULL,\n                batch INT NOT NULL,\n                executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\";\n            $this->db->query($query);\n        }\n    }\n\n    /**\n     * Executa todas as migra\u00e7\u00f5es pendentes\n     * \n     * @return array Lista de migra\u00e7\u00f5es executadas\n     */\n    public function migrate() {\n        // Obt\u00e9m migra\u00e7\u00f5es j\u00e1 executadas\n        $executed = $this->getExecutedMigrations();\n        $batch = $this->getLastBatch() + 1;\n\n        // Obt\u00e9m arquivos de migra\u00e7\u00e3o dispon\u00edveis\n        $files = $this->getMigrationFiles();\n        $executed = array_column($executed, 'migration');\n        $migrations = [];\n\n        foreach ($files as $file) {\n            $migrationName = pathinfo($file, PATHINFO_FILENAME);\n            \n            // Verifica se a migra\u00e7\u00e3o j\u00e1 foi executada\n            if (in_array($migrationName, $executed)) {\n                continue;\n            }\n\n            // Carrega e executa a migra\u00e7\u00e3o\n            require_once $this->migrationsPath . '/' . $file;\n            \n            $className = $this->getMigrationClassName($migrationName);\n            $migration = new $className($this->db);\n            \n            if ($migration->up()) {\n                // Registra a migra\u00e7\u00e3o executada\n                $this->markMigrationAsExecuted($migrationName, $batch);\n                $migrations[] = $migrationName;\n            }\n        }\n\n        return $migrations;\n    }\n\n    /**\n     * Reverte migra\u00e7\u00f5es do \u00faltimo batch\n     * \n     * @return array Lista de migra\u00e7\u00f5es revertidas\n     */\n    public function rollback() {\n        $lastBatch = $this->getLastBatch();\n        $migrations = $this->getMigrationsByBatch($lastBatch);\n        $reverted = [];\n\n        // Reverte as migra\u00e7\u00f5es na ordem inversa\n        foreach (array_reverse($migrations) as $migration) {\n            $file = $migration['migration'] . '.php';\n            \n            if (file_exists($this->migrationsPath . '/' . $file)) {\n                require_once $this->migrationsPath . '/' . $file;\n                \n                $className = $this->getMigrationClassName($migration['migration']);\n                $instance = new $className($this->db);\n                \n                if ($instance->down()) {\n                    $this->removeMigration($migration['migration']);\n                    $reverted[] = $migration['migration'];\n                }\n            }\n        }\n\n        return $reverted;\n    }\n\n    /**\n     * Obt\u00e9m a lista de migra\u00e7\u00f5es j\u00e1 executadas\n     * \n     * @return array Lista de migra\u00e7\u00f5es executadas\n     */\n    protected function getExecutedMigrations() {\n        $query = \"SELECT * FROM {$this->migrationsTable} ORDER BY id\";\n        $result = $this->db->query($query);\n        $migrations = [];\n\n        while ($row = $result->fetch_assoc()) {\n            $migrations[] = $row;\n        }\n\n        return $migrations;\n    }\n\n    /**\n     * Obt\u00e9m o n\u00famero do \u00faltimo batch de migra\u00e7\u00f5es\n     * \n     * @return int N\u00famero do \u00faltimo batch\n     */\n    protected function getLastBatch() {\n        $query = \"SELECT MAX(batch) as last_batch FROM {$this->migrationsTable}\";\n        $result = $this->db->query($query);\n        \n        if ($result->num_rows > 0) {\n            $row = $result->fetch_assoc();\n            return (int) $row['last_batch'];\n        }\n        \n        return 0;\n    }\n\n    /**\n     * Obt\u00e9m migra\u00e7\u00f5es de um batch espec\u00edfico\n     * \n     * @param int $batch N\u00famero do batch\n     * @return array Lista de migra\u00e7\u00f5es do batch\n     */\n    protected function getMigrationsByBatch($batch) {\n        $query = \"SELECT * FROM {$this->migrationsTable} WHERE batch = ? ORDER BY id\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bind_param('i', $batch);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        $migrations = [];\n\n        while ($row = $result->fetch_assoc()) {\n            $migrations[] = $row;\n        }\n\n        return $migrations;\n    }\n\n    /**\n     * Obt\u00e9m a lista de arquivos de migra\u00e7\u00e3o\n     * \n     * @return array Lista de arquivos\n     */\n    protected function getMigrationFiles() {\n        $files = scandir($this->migrationsPath);\n        return array_filter($files, function($file) {\n            return pathinfo($file, PATHINFO_EXTENSION) === 'php';\n        });\n    }\n\n    /**\n     * Marca uma migra\u00e7\u00e3o como executada\n     * \n     * @param string $migration Nome da migra\u00e7\u00e3o\n     * @param int $batch N\u00famero do batch\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function markMigrationAsExecuted($migration, $batch) {\n        $query = \"INSERT INTO {$this->migrationsTable} (migration, batch) VALUES (?, ?)\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bind_param('si', $migration, $batch);\n        return $stmt->execute();\n    }\n\n    /**\n     * Remove uma migra\u00e7\u00e3o da lista de executadas\n     * \n     * @param string $migration Nome da migra\u00e7\u00e3o\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function removeMigration($migration) {\n        $query = \"DELETE FROM {$this->migrationsTable} WHERE migration = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bind_param('s', $migration);\n        return $stmt->execute();\n    }\n\n    /**\n     * Obt\u00e9m o nome da classe de migra\u00e7\u00e3o a partir do nome do arquivo\n     * \n     * @param string $migrationName Nome do arquivo de migra\u00e7\u00e3o\n     * @return string Nome da classe\n     */\n    protected function getMigrationClassName($migrationName) {\n        // Formato: 001_create_tenants_table => CreateTenantsTable\n        $parts = explode('_', $migrationName);\n        array_shift($parts); // Remove o n\u00famero sequencial\n        \n        $className = '';\n        foreach ($parts as $part) {\n            $className .= ucfirst($part);\n        }\n        \n        return $className;\n    }\n}\n```\n\nAgora vamos melhorar a classe base de Migration:\n\n```php\n// File: restaurante-sistema/core/Database/Migration.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Database;\n\nabstract class Migration {\n    protected $db;\n    \n    public function __construct($db) {\n        $this->db = $db;\n    }\n    \n    /**\n     * Executa a migra\u00e7\u00e3o\n     * \n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    abstract public function up();\n    \n    /**\n     * Reverte a migra\u00e7\u00e3o\n     * \n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    abstract public function down();\n    \n    /**\n     * Cria uma nova tabela\n     * \n     * @param string $table Nome da tabela\n     * @param callable $callback Fun\u00e7\u00e3o de defini\u00e7\u00e3o da tabela\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function createTable($table, $callback) {\n        $builder = new SchemaBuilder($table);\n        $callback($builder);\n        \n        $query = \"CREATE TABLE IF NOT EXISTS `{$table}` (\n            {$builder->getColumnDefinitions()}\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\";\n        \n        return $this->db->query($query);\n    }\n    \n    /**\n     * Remove uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function dropTable($table) {\n        $query = \"DROP TABLE IF EXISTS `{$table}`\";\n        return $this->db->query($query);\n    }\n    \n    /**\n     * Adiciona uma coluna a uma tabela existente\n     * \n     * @param string $table Nome da tabela\n     * @param string $column Nome da coluna\n     * @param string $type Tipo da coluna\n     * @param array $options Op\u00e7\u00f5es adicionais\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function addColumn($table, $column, $type, $options = []) {\n        $default = isset($options['default']) ? \"DEFAULT '{$options['default']}'\" : '';\n        $nullable = isset($options['nullable']) && $options['nullable'] ? 'NULL' : 'NOT NULL';\n        \n        $query = \"ALTER TABLE `{$table}` ADD COLUMN `{$column}` {$type} {$nullable} {$default}\";\n        return $this->db->query($query);\n    }\n    \n    /**\n     * Remove uma coluna de uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param string $column Nome da coluna\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function dropColumn($table, $column) {\n        $query = \"ALTER TABLE `{$table}` DROP COLUMN `{$column}`\";\n        return $this->db->query($query);\n    }\n    \n    /**\n     * Adiciona um \u00edndice a uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param string|array $columns Colunas do \u00edndice\n     * @param string $name Nome do \u00edndice\n     * @param bool $unique Se o \u00edndice \u00e9 \u00fanico\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function addIndex($table, $columns, $name = null, $unique = false) {\n        if (is_array($columns)) {\n            $columns = implode('`, `', $columns);\n        }\n        \n        $type = $unique ? 'UNIQUE' : 'INDEX';\n        $name = $name ?: ($unique ? \"unique_{$table}_\" : \"idx_{$table}_\") . str_replace('`', '', $columns);\n        \n        $query = \"ALTER TABLE `{$table}` ADD {$type} `{$name}` (`{$columns}`)\";\n        return $this->db->query($query);\n    }\n    \n    /**\n     * Remove um \u00edndice de uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param string $name Nome do \u00edndice\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function dropIndex($table, $name) {\n        $query = \"ALTER TABLE `{$table}` DROP INDEX `{$name}`\";\n        return $this->db->query($query);\n    }\n    \n    /**\n     * Adiciona uma chave estrangeira a uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param string $column Coluna local\n     * @param string $references Tabela referenciada\n     * @param string $referenceColumn Coluna referenciada\n     * @param string $name Nome da chave estrangeira\n     * @param string $onDelete A\u00e7\u00e3o ON DELETE\n     * @param string $onUpdate A\u00e7\u00e3o ON UPDATE\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function addForeignKey($table, $column, $references, $referenceColumn, $name = null, $onDelete = 'CASCADE', $onUpdate = 'CASCADE') {\n        $name = $name ?: \"fk_{$table}_{$column}\";\n        \n        $query = \"ALTER TABLE `{$table}` ADD CONSTRAINT `{$name}` \n                  FOREIGN KEY (`{$column}`) REFERENCES `{$references}`(`{$referenceColumn}`) \n                  ON DELETE {$onDelete} ON UPDATE {$onUpdate}\";\n                  \n        return $this->db->query($query);\n    }\n    \n    /**\n     * Remove uma chave estrangeira de uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param string $name Nome da chave estrangeira\n     * @return bool Resultado da opera\u00e7\u00e3o\n     */\n    protected function dropForeignKey($table, $name) {\n        $query = \"ALTER TABLE `{$table}` DROP FOREIGN KEY `{$name}`\";\n        return $this->db->query($query);\n    }\n}\n\n/**\n * Auxiliar para constru\u00e7\u00e3o de schema de tabelas\n */\nclass SchemaBuilder {\n    protected $table;\n    protected $columns = [];\n    protected $primaryKey = 'id';\n    protected $useTimestamps = false;\n    \n    public function __construct($table) {\n        $this->table = $table;\n    }\n    \n    /**\n     * Adiciona uma coluna inteira\n     * \n     * @param string $name Nome da coluna\n     * @param int $length Tamanho do inteiro\n     * @param bool $unsigned Se \u00e9 sem sinal\n     * @param bool $nullable Se aceita NULL\n     * @param string $default Valor padr\u00e3o\n     * @return $this\n     */\n    public function integer($name, $length = null, $unsigned = false, $nullable = false, $default = null) {\n        $type = \"INT\";\n        if ($length) {\n            $type .= \"({$length})\";\n        }\n        if ($unsigned) {\n            $type .= \" UNSIGNED\";\n        }\n        \n        $this->addColumn($name, $type, $nullable, $default);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna de ID autoincremental\n     * \n     * @param string $name Nome da coluna\n     * @return $this\n     */\n    public function id($name = 'id') {\n        $this->primaryKey = $name;\n        $this->integer($name, null, true, false, null);\n        $this->columns[$name] .= \" AUTO_INCREMENT PRIMARY KEY\";\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna de string\n     * \n     * @param string $name Nome da coluna\n     * @param int $length Tamanho da string\n     * @param bool $nullable Se aceita NULL\n     * @param string $default Valor padr\u00e3o\n     * @return $this\n     */\n    public function string($name, $length = 255, $nullable = false, $default = null) {\n        $this->addColumn($name, \"VARCHAR({$length})\", $nullable, $default);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna de texto\n     * \n     * @param string $name Nome da coluna\n     * @param bool $nullable Se aceita NULL\n     * @return $this\n     */\n    public function text($name, $nullable = false) {\n        $this->addColumn($name, \"TEXT\", $nullable, null);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna decimal\n     * \n     * @param string $name Nome da coluna\n     * @param int $precision Precis\u00e3o total\n     * @param int $scale Casas decimais\n     * @param bool $nullable Se aceita NULL\n     * @param string $default Valor padr\u00e3o\n     * @return $this\n     */\n    public function decimal($name, $precision = 8, $scale = 2, $nullable = false, $default = null) {\n        $this->addColumn($name, \"DECIMAL({$precision},{$scale})\", $nullable, $default);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna de booleano\n     * \n     * @param string $name Nome da coluna\n     * @param bool $nullable Se aceita NULL\n     * @param bool $default Valor padr\u00e3o\n     * @return $this\n     */\n    public function boolean($name, $nullable = false, $default = false) {\n        $defaultValue = $default ? '1' : '0';\n        $this->addColumn($name, \"TINYINT(1)\", $nullable, $defaultValue);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna de data\n     * \n     * @param string $name Nome da coluna\n     * @param bool $nullable Se aceita NULL\n     * @param string $default Valor padr\u00e3o\n     * @return $this\n     */\n    public function date($name, $nullable = false, $default = null) {\n        $this->addColumn($name, \"DATE\", $nullable, $default);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna de timestamp\n     * \n     * @param string $name Nome da coluna\n     * @param bool $nullable Se aceita NULL\n     * @param string $default Valor padr\u00e3o\n     * @return $this\n     */\n    public function timestamp($name, $nullable = false, $default = null) {\n        $this->addColumn($name, \"TIMESTAMP\", $nullable, $default);\n        return $this;\n    }\n    \n    /**\n     * Adiciona colunas de timestamps (created_at, updated_at)\n     * \n     * @return $this\n     */\n    public function timestamps() {\n        $this->useTimestamps = true;\n        $this->timestamp('created_at', false, 'CURRENT_TIMESTAMP');\n        $this->timestamp('updated_at', false, 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP');\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna de chave estrangeira\n     * \n     * @param string $name Nome da coluna\n     * @param bool $nullable Se aceita NULL\n     * @return $this\n     */\n    public function foreignId($name, $nullable = false) {\n        $this->integer($name, null, true, $nullable, null);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna para armazenar dados JSON\n     * \n     * @param string $name Nome da coluna\n     * @param bool $nullable Se aceita NULL\n     * @return $this\n     */\n    public function json($name, $nullable = false) {\n        $this->addColumn($name, \"JSON\", $nullable, null);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma coluna ENUM\n     * \n     * @param string $name Nome da coluna\n     * @param array $values Valores do ENUM\n     * @param bool $nullable Se aceita NULL\n     * @param string $default Valor padr\u00e3o\n     * @return $this\n     */\n    public function enum($name, array $values, $nullable = false, $default = null) {\n        $valuesStr = \"'\" . implode(\"','\", $values) . \"'\";\n        $this->addColumn($name, \"ENUM({$valuesStr})\", $nullable, $default);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma defini\u00e7\u00e3o gen\u00e9rica de coluna\n     * \n     * @param string $name Nome da coluna\n     * @param string $type Tipo da coluna\n     * @param bool $nullable Se aceita NULL\n     * @param string $default Valor padr\u00e3o\n     */\n    protected function addColumn($name, $type, $nullable, $default) {\n        $nullableStr = $nullable ? 'NULL' : 'NOT NULL';\n        $defaultStr = '';\n        \n        if ($default !== null) {\n            $defaultStr = \" DEFAULT \" . (is_string($default) && $default !== 'CURRENT_TIMESTAMP' && !strstr($default, 'CURRENT_TIMESTAMP') ? \"'{$default}'\" : $default);\n        }\n        \n        $this->columns[$name] = \"`{$name}` {$type} {$nullableStr}{$defaultStr}\";\n    }\n    \n    /**\n     * Retorna a defini\u00e7\u00e3o completa das colunas\n     * \n     * @return string Defini\u00e7\u00e3o SQL das colunas\n     */\n    public function getColumnDefinitions() {\n        return implode(\",\\n    \", $this->columns);\n    }\n}\n```\n\nAgora implementamos o command-line para executar as migra\u00e7\u00f5es:\n\n```php\n// File: restaurante-sistema/migrate.php\n<?php\n\nrequire_once 'config/database.php';\nrequire_once 'core/Database/MigrationManager.php';\nrequire_once 'core/Database/Migration.php';\n\n// Conex\u00e3o com o banco de dados\n$db = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);\n\nif ($db->connect_error) {\n    die(\"Erro de conex\u00e3o com o banco de dados: \" . $db->connect_error);\n}\n\n$migrationsPath = __DIR__ . '/database/migrations';\n$manager = new RestauranteSaas\\Core\\Database\\MigrationManager($db, $migrationsPath);\n\n// Processa argumentos de linha de comando\n$action = isset($argv[1]) ? $argv[1] : 'help';\n\nswitch ($action) {\n    case 'migrate':\n        $migrations = $manager->migrate();\n        if (count($migrations) > 0) {\n            echo \"Migra\u00e7\u00f5es executadas com sucesso: \" . count($migrations) . \"\\n\";\n            foreach ($migrations as $migration) {\n                echo \"- {$migration}\\n\";\n            }\n        } else {\n            echo \"Nenhuma migra\u00e7\u00e3o pendente encontrada.\\n\";\n        }\n        break;\n        \n    case 'rollback':\n        $migrations = $manager->rollback();\n        if (count($migrations) > 0) {\n            echo \"Migra\u00e7\u00f5es revertidas com sucesso: \" . count($migrations) . \"\\n\";\n            foreach ($migrations as $migration) {\n                echo \"- {$migration}\\n\";\n            }\n        } else {\n            echo \"Nenhuma migra\u00e7\u00e3o para reverter.\\n\";\n        }\n        break;\n        \n    case 'help':\n    default:\n        echo \"Uso: php migrate.php [comando]\\n\\n\";\n        echo \"Comandos dispon\u00edveis:\\n\";\n        echo \"  migrate   - Executa todas as migra\u00e7\u00f5es pendentes\\n\";\n        echo \"  rollback  - Reverte o \u00faltimo lote de migra\u00e7\u00f5es\\n\";\n        echo \"  help      - Exibe esta ajuda\\n\";\n        break;\n}\n\n$db->close();\n```\n\n## 2. Migra\u00e7\u00f5es Espec\u00edficas\n\nAgora, vamos criar as migra\u00e7\u00f5es necess\u00e1rias para o sistema:\n\n```php\n// File: restaurante-sistema/database/migrations/001_create_tenants_table.php\n<?php\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateTenantsTable extends Migration {\n    public function up() {\n        return $this->createTable('tenants', function($table) {\n            $table->id();\n            $table->string('name', 100);\n            $table->string('slug', 100); // Para uso em subdom\u00ednios\n            $table->string('domain', 100)->nullable();\n            $table->string('restaurant_type', 20);\n            $table->string('company_name', 150);\n            $table->string('cnpj', 18);\n            $table->string('email', 100);\n            $table->string('phone', 20);\n            $table->string('address', 255);\n            $table->string('city', 100);\n            $table->string('state', 2);\n            $table->string('zip_code', 10);\n            $table->string('logo', 255)->nullable();\n            $table->string('theme_color', 7)->default('#3498db');\n            \n            // Campos para configura\u00e7\u00e3o de pagamentos\n            $table->enum('payment_gateway', ['stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede'])->default('stripe');\n            $table->string('payment_gateway_key', 255)->nullable();\n            $table->string('payment_gateway_token', 255)->nullable();\n            $table->string('bank_name', 100)->nullable();\n            $table->string('bank_agency', 20)->nullable();\n            $table->string('bank_account', 30)->nullable();\n            $table->string('pix_key', 255)->nullable();\n            $table->json('payment_methods')->default('{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}');\n            $table->json('payment_settings')->default('{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}');\n            \n            $table->boolean('active')->default(true);\n            $table->timestamps();\n        });\n    }\n    \n    public function down() {\n        return $this->dropTable('tenants');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/002_create_users_table.php\n<?php\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateUsersTable extends Migration {\n    public function up() {\n        return $this->createTable('users', function($table) {\n            $table->id();\n            $table->foreignId('tenant_id')->nullable(); // NULL para usu\u00e1rios do sistema\n            $table->string('username', 50);\n            $table->string('email', 100);\n            $table->string('password', 255);\n            $table->string('name', 100);\n            $table->enum('role', ['admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin']);\n            $table->string('phone', 20)->nullable();\n            $table->string('profile_image', 255)->nullable();\n            $table->boolean('active')->default(true);\n            $table->boolean('email_verified')->default(false);\n            $table->timestamp('last_login')->nullable();\n            $table->string('password_reset_token', 100)->nullable();\n            $table->timestamp('password_reset_expires')->nullable();\n            $table->string('remember_token', 100)->nullable();\n            $table->timestamps();\n            \n            // Adicionar \u00edndices\n            $table->addIndex('email', 'unique_user_email', true);\n            $table->addIndex('username', 'unique_user_username', true);\n            \n            // Adicionar chave estrangeira\n            $this->addForeignKey('users', 'tenant_id', 'tenants', 'id', 'fk_users_tenant', 'CASCADE', 'CASCADE');\n        });\n    }\n    \n    public function down() {\n        return $this->dropTable('users');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/003_create_roles_table.php\n<?php\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateRolesTable extends Migration {\n    public function up() {\n        return $this->createTable('roles', function($table) {\n            $table->id();\n            $table->foreignId('tenant_id');\n            $table->string('name', 50);\n            $table->string('description', 255)->nullable();\n            $table->boolean('is_custom')->default(true);\n            $table->timestamps();\n            \n            // Adicionar \u00edndice \u00fanico para nome de papel por tenant\n            $table->addIndex(['tenant_id', 'name'], 'unique_role_name_per_tenant', true);\n            \n            // Adicionar chave estrangeira\n            $this->addForeignKey('roles', 'tenant_id', 'tenants', 'id', 'fk_roles_tenant', 'CASCADE', 'CASCADE');\n        });\n    }\n    \n    public function down() {\n        return $this->dropTable('roles');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/004_create_permissions_table.php\n<?php\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreatePermissionsTable extends Migration {\n    public function up() {\n        return $this->createTable('permissions', function($table) {\n            $table->id();\n            $table->string('name', 50);\n            $table->string('description', 255);\n            $table->timestamp('created_at')->default('CURRENT_TIMESTAMP');\n            \n            // Adicionar \u00edndice \u00fanico para nome da permiss\u00e3o\n            $table->addIndex('name', 'unique_permission_name', true);\n        });\n    }\n    \n    public function down() {\n        return $this->dropTable('permissions');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n<?php\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateRolePermissionsTable extends Migration {\n    public function up() {\n        return $this->createTable('role_permissions', function($table) {\n            $table->id();\n            $table->foreignId('tenant_id');\n            $table->foreignId('role_id');\n            $table->foreignId('permission_id');\n            $table->timestamp('created_at')->default('CURRENT_TIMESTAMP');\n            \n            // Adicionar \u00edndice \u00fanico\n            $table->addIndex(['tenant_id', 'role_id', 'permission_id'], 'unique_role_permission', true);\n            \n            // Adicionar chaves estrangeiras\n            $this->addForeignKey('role_permissions', 'tenant_id', 'tenants', 'id', 'fk_role_permissions_tenant', 'CASCADE', 'CASCADE');\n            $this->addForeignKey('role_permissions', 'role_id', 'roles', 'id', 'fk_role_permissions_role', 'CASCADE', 'CASCADE');\n            $this->addForeignKey('role_permissions', 'permission_id', 'permissions', 'id', 'fk_role_permissions_permission', 'CASCADE', 'CASCADE');\n        });\n    }\n    \n    public function down() {\n        return $this->dropTable('role_permissions');\n    }\n}\n```\n\n```php\n// File: restaurante-sistema/database/migrations/006_create_access_logs_table.php\n<?php\n\nuse RestauranteSaas\\Core\\Database\\Migration;\n\nclass CreateAccessLogsTable extends Migration {\n    public function up() {\n        return $this->createTable('access_logs', function($table) {\n            $table->id();\n            $table->foreignId('user_id');\n            $table->foreignId('tenant_id')->nullable();\n            $table->string('ip_address', 45);\n            $table->string('user_agent', 255);\n            $table->string('action', 50);\n            $table->json('details')->nullable();\n            $table->timestamp('created_at')->default('CURRENT_TIMESTAMP');\n            \n            // Adicionar chaves estrangeiras\n            $this->addForeignKey('access_logs', 'user_id', 'users', 'id', 'fk_access_logs_user', 'CASCADE', 'CASCADE');\n            $this->addForeignKey('access_logs', 'tenant_id', 'tenants', 'id', 'fk_access_logs_tenant', 'CASCADE', 'CASCADE');\n        });\n    }\n    \n    public function down() {\n        return $this->dropTable('access_logs');\n    }\n}\n```\n\n## 3. Modelo User\n\nAgora, vamos implementar o modelo User que ser\u00e1 fundamental para a autentica\u00e7\u00e3o:\n\n```php\n// File: restaurante-sistema/models/User.php\n<?php\n\nnamespace RestauranteSaas\\Models;\n\nclass User {\n    private $db;\n    private $table = 'users';\n    \n    // Propriedades do usu\u00e1rio\n    public $id;\n    public $tenant_id;\n    public $username;\n    public $email;\n    public $password;\n    public $name;\n    public $role;\n    public $phone;\n    public $profile_image;\n    public $active;\n    public $email_verified;\n    public $last_login;\n    public $created_at;\n    public $updated_at;\n    \n    public function __construct($db) {\n        $this->db = $db;\n    }\n    \n    /**\n     * Obt\u00e9m um usu\u00e1rio pelo ID\n     * \n     * @param int $id ID do usu\u00e1rio\n     * @return bool Sucesso\n     */\n    public function getById($id) {\n        $query = \"SELECT * FROM {$this->table} WHERE id = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bind_param('i', $id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows === 1) {\n            $data = $result->fetch_assoc();\n            $this->mapProperties($data);\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Obt\u00e9m um usu\u00e1rio pelo e-mail\n     * \n     * @param string $email E-mail do usu\u00e1rio\n     * @return bool Sucesso\n     */\n    public function getByEmail($email) {\n        $query = \"SELECT * FROM {$this->table} WHERE email = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bind_param('s', $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows === 1) {\n            $data = $result->fetch_assoc();\n            $this->mapProperties($data);\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Obt\u00e9m um usu\u00e1rio pelo nome de usu\u00e1rio\n     * \n     * @param string $username Nome de usu\u00e1rio\n     * @return bool Sucesso\n     */\n    public function getByUsername($username) {\n        $query = \"SELECT * FROM {$this->table} WHERE username = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bind_param('s', $username);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows === 1) {\n            $data = $result->fetch_assoc();\n            $this->mapProperties($data);\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Tenta autenticar o usu\u00e1rio com credenciais\n     * \n     * @param string $login E-mail ou nome de usu\u00e1rio\n     * @param string $password Senha\n     * @return bool Sucesso da autentica\u00e7\u00e3o\n     */\n    public function authenticate($login, $password) {\n        // Verifica se o login \u00e9 um e-mail\n        $isEmail = filter_var($login, FILTER_VALIDATE_EMAIL);\n        \n        // Busca o usu\u00e1rio pelo e-mail ou nome de usu\u00e1rio\n        if ($isEmail) {\n            $success = $this->getByEmail($login);\n        } else {\n            $success = $this->getByUsername($login);\n        }\n        \n        // Verifica se o usu\u00e1rio existe e a senha est\u00e1 correta\n        if ($success && $this->active && password_verify($password, $this->password)) {\n            // Atualiza \u00faltimo login\n            $this->updateLastLogin();\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Cria um novo usu\u00e1rio\n     * \n     * @param array $data Dados do usu\u00e1rio\n     * @return bool Sucesso\n     */\n    public function create($data) {\n        // Hash da senha\n        $data['password'] = password_hash($data['password'], PASSWORD_DEFAULT);\n        \n        $query = \"INSERT INTO {$this->table} (tenant_id, username, email, password, name, role, phone, active, email_verified) \n                  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n                  \n        $stmt = $this->db->prepare($query);\n        $active = isset($data['active']) ? $data['active'] : 1;\n        $emailVerified = isset($data['email_verified']) ? $data['email_verified'] : 0;\n        \n        $stmt->bind_param(\n            'isssssii', \n            $data['tenant_id'], \n            $data['username'], \n            $data['email'], \n            $data['password'], \n            $data['name'], \n            $data['role'], \n            $data['phone'], \n            $active,\n            $emailVerified\n        );\n        \n        if ($stmt->execute()) {\n            $this->id = $stmt->insert_id;\n            // Recarregar para ter todos os dados\n            return $this->getById($this->id);\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Atualiza um usu\u00e1rio existente\n     * \n     * @param array $data Dados a atualizar\n     * @return bool Sucesso\n     */\n    public function update($data) {\n        // Prepara a query com apenas os campos a serem atualizados\n        $fields = [];\n        $values = [];\n        $types = '';\n        \n        foreach ($data as $key => $value) {\n            // N\u00e3o permitir atualiza\u00e7\u00e3o de ID\n            if ($key === 'id') continue;\n            \n            // Trata a senha separadamente\n            if ($key === 'password') {\n                $value = password_hash($value, PASSWORD_DEFAULT);\n            }\n            \n            $fields[] = \"{$key} = ?\";\n            $values[] = $value;\n            \n            // Define o tipo do par\u00e2metro\n            if (is_int($value)) {\n                $types .= 'i';\n            } elseif (is_double($value)) {\n                $types .= 'd';\n            } else {\n                $types .= 's';\n            }\n        }\n        \n        // Adiciona o ID para a cl\u00e1usula WHERE\n        $types .= 'i';\n        $values[] = $this->id;\n        \n        $query = \"UPDATE {$this->table} SET \" . implode(', ', $fields) . \" WHERE id = ?\";\n        $stmt = $this->db->prepare($query);\n        \n        ",
                "tokens_used": 51252,
                "response_time": 118.94
            },
            {
                "id": "3e8711f777add3df859cea4261f27f67",
                "timestamp": "2025-03-18T03:31:53.288116",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\n\n\n# Projeto Completo - Sistema de Gest\u00e3o de Restaurantes SaaS\n\n## 1. Tecnologias que devem ser usadas\n\nHTML,CSS,Javascript,PHP, mysql essa aplica\u00e7ao dever ser feita em web apenas\n\n## 1. Vis\u00e3o Geral do Projeto\n\n### 1.1 Descri\u00e7\u00e3o do Projeto\n\nO projeto consiste em um sistema de gest\u00e3o de restaurantes oferecido como servi\u00e7o por assinatura (SaaS - Software as a Service). O sistema atende a diversos tipos de estabelecimentos (\u00e0 la carte, fast food, pizzaria, rod\u00edzio, etc.) com funcionalidades adaptadas para cada modelo de neg\u00f3cio, permitindo opera\u00e7\u00f5es atrav\u00e9s de QR Code ou atendimento tradicional com gar\u00e7ons.\n\n### 1.2 Objetivos Principais\n\n1. Oferecer um sistema completo e personaliz\u00e1vel para gest\u00e3o de restaurantes\n2. Permitir flexibilidade para diferentes modelos de neg\u00f3cio\n3. Implementar uma estrutura escal\u00e1vel baseada em assinaturas\n4. Garantir uma experi\u00eancia otimizada tanto para restaurantes quanto para clientes finais\n5. Proporcionar integra\u00e7\u00e3o com servi\u00e7os externos (Stripe, iFood, etc.)\n\n### 1.3 P\u00fablico-Alvo\n\n- Restaurantes tradicionais \u00e0 la carte\n- Fast-foods e lanchonetes\n- Pizzarias e delivery\n- Rod\u00edzios e buf\u00eas\n- Bares e pubs\n- Food trucks\n- Redes de restaurantes\n\n### 1.4 Proposta de Valor\n\n- Redu\u00e7\u00e3o de custos operacionais\n- Aumento da efici\u00eancia no atendimento\n- Melhoria da experi\u00eancia do cliente\n- Maior controle financeiro e operacional\n- Insights de neg\u00f3cio baseados em dados\n- Flexibilidade para diferentes modelos e tamanhos de opera\u00e7\u00e3o\n\n## 2. Arquitetura do Sistema\n\n### 2.1 Vis\u00e3o Geral da Arquitetura\n\nO sistema utiliza uma arquitetura de tr\u00eas camadas:\n\n1. **Camada de Apresenta\u00e7\u00e3o**: Interfaces web e mobile para diferentes perfis de usu\u00e1rio\n2. **Camada de Aplica\u00e7\u00e3o**: L\u00f3gica de neg\u00f3cio, processamento e servi\u00e7os\n3. **Camada de Dados**: Persist\u00eancia e gerenciamento de dados\n\n### 2.2 Modelo Multi-Tenant\n\nO sistema \u00e9 constru\u00eddo com arquitetura multi-tenant, onde m\u00faltiplos restaurantes (tenants) compartilham a mesma infraestrutura, mas com dados completamente isolados:\n\n- Cada tenant possui um identificador \u00fanico\n- Todas as opera\u00e7\u00f5es de banco de dados incluem filtro por tenant\n- Recursos s\u00e3o alocados conforme o plano de assinatura\n- Backups s\u00e3o individualizados por tenant\n\n### 2.3 Infraestrutura de Nuvem\n\nA plataforma ser\u00e1 hospedada em infraestrutura de nuvem para garantir:\n\n- Alta disponibilidade (99.9+%)\n- Escalabilidade horizontal e vertical\n- Balanceamento de carga\n- Backups automatizados\n- Recupera\u00e7\u00e3o de desastres\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n\n### 2.4 Integra\u00e7\u00f5es Externas\n\nO sistema se integrar\u00e1 com diversos servi\u00e7os externos:\n\n- Stripe para processamento de pagamentos e assinaturas\n- iFood e outras plataformas de delivery\n- Sistemas fiscais e emiss\u00e3o de notas\n- Servi\u00e7os de email e SMS\n- Gateways de pagamento para opera\u00e7\u00f5es do restaurante\n\n## 3. Implementa\u00e7\u00e3o da Plataforma SaaS\n\n### 3.1 Sistema de Assinaturas\n\n#### 3.1.1 Estrutura de Planos\n\nImplementa\u00e7\u00e3o de diferentes n\u00edveis de planos:\n\n- **Plano B\u00e1sico**: Funcionalidades essenciais para pequenos estabelecimentos\n- **Plano Padr\u00e3o**: Recursos intermedi\u00e1rios para m\u00e9dios restaurantes\n- **Plano Premium**: Funcionalidades completas para grandes opera\u00e7\u00f5es\n- **Plano Enterprise**: Solu\u00e7\u00f5es personalizadas para redes e franquias\n\n#### 3.1.2 Gerenciamento de Assinaturas\n\nDesenvolvimento do fluxo completo de gest\u00e3o de assinaturas:\n\n- Cadastro e onboarding\n- Per\u00edodo de teste gratuito\n- Convers\u00e3o para assinatura paga\n- Gest\u00e3o de m\u00e9todos de pagamento\n- Renova\u00e7\u00f5es autom\u00e1ticas\n- Upgrades e downgrades de plano\n- Cancelamentos e reten\u00e7\u00e3o\n\n#### 3.1.3 Integra\u00e7\u00e3o com Stripe\n\nImplementa\u00e7\u00e3o da integra\u00e7\u00e3o completa com a API do Stripe:\n\n- Cria\u00e7\u00e3o de produtos e planos no Stripe\n- Processamento de pagamentos recorrentes\n- Gest\u00e3o de cart\u00f5es e m\u00e9todos de pagamento\n- Webhooks para eventos de pagamento\n- Tratamento de falhas e disputas\n- Gera\u00e7\u00e3o de faturas e recibos\n\n#### 3.1.4 Controle de Limites e Recursos\n\nDesenvolvimento de mecanismos para controlar a utiliza\u00e7\u00e3o conforme o plano:\n\n- Verifica\u00e7\u00e3o de limites (mesas, usu\u00e1rios, etc.)\n- Monitoramento de uso de recursos\n- Notifica\u00e7\u00f5es de limite pr\u00f3ximo\n- Op\u00e7\u00f5es de upgrade quando necess\u00e1rio\n- Controle de acesso a m\u00f3dulos premium\n\n### 3.2 Portal Administrativo\n\n#### 3.2.1 Gest\u00e3o de Clientes\n\nCria\u00e7\u00e3o de interfaces para administradores da plataforma:\n\n- Dashboard de clientes ativos\n- Detalhes de conta e consumo\n- Hist\u00f3rico de pagamentos\n- Ferramentas de suporte\n- A\u00e7\u00f5es administrativas (suspender, cancelar, etc.)\n\n#### 3.2.2 Relat\u00f3rios e Analytics\n\nImplementa\u00e7\u00e3o de ferramentas de an\u00e1lise para a opera\u00e7\u00e3o SaaS:\n\n- M\u00e9tricas de aquisi\u00e7\u00e3o de clientes\n- Taxas de convers\u00e3o e reten\u00e7\u00e3o\n- Receita recorrente mensal (MRR)\n- Valor do tempo de vida do cliente (LTV)\n- Custos de aquisi\u00e7\u00e3o de cliente (CAC)\n- Churn e renova\u00e7\u00f5es\n\n#### 3.2.3 Sistema de Suporte\n\nDesenvolvimento de ferramentas para atendimento ao cliente:\n\n- Sistema de tickets\n- Base de conhecimento\n- Chat ao vivo\n- Suporte por email\n- Escalamento para diferentes n\u00edveis\n- M\u00e9tricas de satisfa\u00e7\u00e3o e tempo de resposta\n\n## 4. Implementa\u00e7\u00e3o do Sistema de Gest\u00e3o de Restaurantes\n\n### 4.1 Personaliza\u00e7\u00e3o por Tipo de Restaurante\n\n#### 4.1.1 Onboarding e Configura\u00e7\u00e3o\n\nCria\u00e7\u00e3o do processo de configura\u00e7\u00e3o inicial:\n\n- Sele\u00e7\u00e3o do tipo de restaurante\n- Compara\u00e7\u00e3o entre tipos\n- Configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas\n- Setup inicial de mesas e ambiente\n- Cadastro de card\u00e1pio inicial\n- Configura\u00e7\u00e3o de funcion\u00e1rios e acessos\n\n#### 4.1.2 Interfaces Espec\u00edficas\n\nDesenvolvimento de interfaces adaptadas para cada tipo:\n\n- \u00c0 la carte: Foco em mesas e reservas\n- Fast Food: Foco em fila de pedidos e agilidade\n- Pizzaria: Construtor de pizza meio a meio\n- Rod\u00edzio: Controle de passadas e tempos\n- Delivery: Rastreamento e rotas\n- Self-service: Integra\u00e7\u00e3o com balan\u00e7as\n- Food Truck: Interface simplificada e mobile-first\n\n#### 4.1.3 Fluxos de Trabalho Personalizados\n\nImplementa\u00e7\u00e3o de fluxos adaptados para cada modelo:\n\n- L\u00f3gica de neg\u00f3cio espec\u00edfica por tipo\n- Regras de prioriza\u00e7\u00e3o de pedidos\n- Controles especializados (forno, passadas, pesagem)\n- Relat\u00f3rios e m\u00e9tricas relevantes para cada modelo\n\n### 4.2 M\u00f3dulo de Comandas e Pedidos\n\n#### 4.2.1 Gest\u00e3o de Mesas\n\nDesenvolvimento do sistema de controle de mesas:\n\n- Mapa visual de mesas\n- Status em tempo real\n- Controle de ocupa\u00e7\u00e3o\n- Timer de perman\u00eancia\n- Hist\u00f3rico de uso\n\n#### 4.2.2 Sistema de Pedidos\n\nImplementa\u00e7\u00e3o do fluxo completo de pedidos:\n\n- Registro de pedidos (via QR Code e gar\u00e7om)\n- Modifica\u00e7\u00f5es e adi\u00e7\u00f5es\n- Encaminhamento para cozinha\n- Notifica\u00e7\u00f5es de status\n- Fechamento e pagamento\n\n#### 4.2.3 QR Code para Clientes\n\nDesenvolvimento da experi\u00eancia de pedido via QR Code:\n\n- Gera\u00e7\u00e3o de QR Codes para mesas\n- Interface adaptada para mobile\n- Registro de dados do cliente\n- Card\u00e1pio digital interativo\n- Carrinho de pedidos\n- Solicita\u00e7\u00e3o de atendimento\n- Pagamento pelo smartphone\n\n#### 4.2.4 Divis\u00e3o de Contas\n\nImplementa\u00e7\u00e3o de mecanismos para divis\u00e3o de contas:\n\n- Divis\u00e3o por item\n- Divis\u00e3o igual entre participantes\n- Divis\u00e3o percentual\n- M\u00faltiplos pagamentos\n- Contas parciais\n\n### 4.3 M\u00f3dulo de Cozinha\n\n#### 4.3.1 Painel de Produ\u00e7\u00e3o\n\nDesenvolvimento da interface para cozinha:\n\n- Fila de pedidos em tempo real\n- Classifica\u00e7\u00e3o por prioridade\n- Temporizadores de preparo\n- Status visual por pedido\n- Alertas para pedidos atrasados\n\n#### 4.3.2 Gest\u00e3o de Estoque\n\nImplementa\u00e7\u00e3o do controle de estoque integrado:\n\n- Cadastro de ingredientes e insumos\n- Abate autom\u00e1tico do estoque\n- Alertas de estoque baixo\n- Previs\u00e3o de necessidade\n- Pedidos autom\u00e1ticos\n\n#### 4.3.3 Controles Espec\u00edficos\n\nCria\u00e7\u00e3o de funcionalidades especializadas:\n\n- Temporizadores para forno\n- Controle de passadas para rod\u00edzio\n- Separa\u00e7\u00e3o de delivery e local\n- Alertas para al\u00e9rgenos\n\n### 4.4 M\u00f3dulo de Pagamentos\n\n#### 4.4.1 Processamento de Pagamentos\n\nImplementa\u00e7\u00e3o dos fluxos de pagamento:\n\n- Integra\u00e7\u00e3o com Stripe para pagamentos\n- Suporte a cart\u00f5es de cr\u00e9dito/d\u00e9bito\n- Pagamentos via PIX\n- Dinheiro e outras formas locais\n- Concilia\u00e7\u00e3o financeira\n\n#### 4.4.2 Fechamento de Caixa\n\nDesenvolvimento do processo de fechamento:\n\n- Abertura e fechamento de caixa\n- Registro de entradas e sa\u00eddas\n- Contagem f\u00edsica\n- Detec\u00e7\u00e3o de diferen\u00e7as\n- Relat\u00f3rio de fechamento\n\n#### 4.4.3 Emiss\u00e3o de Comprovantes\n\nImplementa\u00e7\u00e3o da gera\u00e7\u00e3o de documentos:\n\n- Recibos digitais\n- Envio por email ou WhatsApp\n- Integra\u00e7\u00e3o com sistemas fiscais\n- Armazenamento de comprovantes\n\n### 4.5 M\u00f3dulo de Funcion\u00e1rios\n\n#### 4.5.1 Controle de Acesso\n\nDesenvolvimento do sistema de acesso:\n\n- Cadastro de funcion\u00e1rios\n- Perfis de permiss\u00e3o\n- Autentica\u00e7\u00e3o segura\n- Registro de atividades\n- Pol\u00edticas de seguran\u00e7a\n\n#### 4.5.2 Registro de Ponto\n\nImplementa\u00e7\u00e3o do controle de ponto:\n\n- Registro de entrada e sa\u00edda\n- Valida\u00e7\u00e3o por localiza\u00e7\u00e3o\n- C\u00e1lculo de horas trabalhadas\n- Controle de intervalos\n- Exporta\u00e7\u00e3o para folha de pagamento\n\n#### 4.5.3 Desempenho e Comiss\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para gest\u00e3o de desempenho:\n\n- M\u00e9tricas por funcion\u00e1rio\n- C\u00e1lculo de comiss\u00f5es\n- Avalia\u00e7\u00e3o de desempenho\n- Classifica\u00e7\u00e3o por objetivos\n- Feedback e desenvolvimento\n\n### 4.6 M\u00f3dulo de Fornecedores\n\n#### 4.6.1 Cadastro e Gest\u00e3o\n\nImplementa\u00e7\u00e3o do gerenciamento de fornecedores:\n\n- Cadastro detalhado de fornecedores\n- Categoriza\u00e7\u00e3o por tipo de produto\n- Condi\u00e7\u00f5es comerciais\n- Contatos de emerg\u00eancia\n- Avalia\u00e7\u00e3o de desempenho\n\n#### 4.6.2 Pedidos e Reposi\u00e7\u00e3o\n\nDesenvolvimento do fluxo de compras:\n\n- Pedidos r\u00e1pidos\n- Sugest\u00e3o autom\u00e1tica de reposi\u00e7\u00e3o\n- Aprova\u00e7\u00e3o de pedidos\n- Acompanhamento de entrega\n- Recebimento e confer\u00eancia\n\n#### 4.6.3 Hist\u00f3rico e Avalia\u00e7\u00e3o\n\nCria\u00e7\u00e3o de ferramentas para an\u00e1lise de fornecedores:\n\n- Hist\u00f3rico de pedidos\n- Cumprimento de prazos\n- Qualidade de produtos\n- Competitividade de pre\u00e7os\n- Ranking de fornecedores\n\n### 4.7 M\u00f3dulo de Relat\u00f3rios\n\n#### 4.7.1 Relat\u00f3rios Operacionais\n\nImplementa\u00e7\u00e3o de relat\u00f3rios para a opera\u00e7\u00e3o di\u00e1ria:\n\n- Vendas por per\u00edodo\n- Ocupa\u00e7\u00e3o de mesas\n- Tempo m\u00e9dio de atendimento\n- Itens mais vendidos\n- Cancelamentos e devolu\u00e7\u00f5es\n\n#### 4.7.2 Relat\u00f3rios Financeiros\n\nDesenvolvimento de an\u00e1lises financeiras:\n\n- Faturamento por per\u00edodo\n- Custos e despesas\n- Lucratividade por produto\n- Fluxo de caixa\n- Proje\u00e7\u00f5es e comparativos\n\n#### 4.7.3 Dashboards e Analytics\n\nCria\u00e7\u00e3o de pain\u00e9is visuais e an\u00e1lises:\n\n- Dashboard executivo\n- Gr\u00e1ficos e visualiza\u00e7\u00f5es\n- Tend\u00eancias e sazonalidade\n- An\u00e1lise de dados em tempo real\n- Exporta\u00e7\u00e3o para Excel/PDF\n\n### 4.8 M\u00f3dulo de Marketing e CRM\n\n#### 4.8.1 Cadastro de Clientes\n\nImplementa\u00e7\u00e3o do gerenciamento de clientes:\n\n- Captura de dados via QR Code\n- Hist\u00f3rico de pedidos\n- Prefer\u00eancias e restri\u00e7\u00f5es\n- Segmenta\u00e7\u00e3o de clientes\n- Privacidade e LGPD\n\n#### 4.8.2 Programa de Fidelidade\n\nDesenvolvimento de sistema de fideliza\u00e7\u00e3o:\n\n- Ac\u00famulo de pontos por compra\n- N\u00edveis de fidelidade\n- Recompensas e benef\u00edcios\n- Promo\u00e7\u00f5es personalizadas\n- An\u00e1lise de engajamento\n\n#### 4.8.3 Campanhas e Promo\u00e7\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para a\u00e7\u00f5es de marketing:\n\n- Cria\u00e7\u00e3o de campanhas\n- Descontos e ofertas especiais\n- Comunica\u00e7\u00e3o por email e SMS\n- Aniversariantes do m\u00eas\n- Mensura\u00e7\u00e3o de resultados\n\n## 5. Integra\u00e7\u00f5es com Servi\u00e7os Externos\n\n### 5.1 Integra\u00e7\u00e3o com Plataformas de Delivery\n\n#### 5.1.1 iFood e Outras Plataformas\n\nImplementa\u00e7\u00e3o de conex\u00e3o com marketplaces:\n\n- Recebimento de pedidos em tempo real\n- Aceita\u00e7\u00e3o/rejei\u00e7\u00e3o autom\u00e1tica\n- Atualiza\u00e7\u00e3o de status\n- Sincroniza\u00e7\u00e3o de card\u00e1pio\n- Concilia\u00e7\u00e3o financeira\n\n#### 5.1.2 Delivery Pr\u00f3prio\n\nDesenvolvimento de sistema pr\u00f3prio de delivery:\n\n- Cadastro de entregadores\n- Roteiriza\u00e7\u00e3o de entregas\n- Rastreamento em tempo real\n- \u00c1reas e taxas de entrega\n- Gest\u00e3o de frota\n\n### 5.2 Integra\u00e7\u00e3o com Sistemas Fiscais\n\n#### 5.2.1 Emiss\u00e3o de Notas Fiscais\n\nImplementa\u00e7\u00e3o de processos fiscais:\n\n- Emiss\u00e3o de NFC-e, NF-e\n- Valida\u00e7\u00e3o com WebServices da SEFAZ\n- Armazenamento e envio de documentos\n- Tratamento de conting\u00eancia\n- Relat\u00f3rios fiscais\n\n#### 5.2.2 Concilia\u00e7\u00e3o Cont\u00e1bil\n\nDesenvolvimento de ferramentas para contabilidade:\n\n- Exporta\u00e7\u00e3o para sistemas cont\u00e1beis\n- Plano de contas configur\u00e1vel\n- Relat\u00f3rios para DRE\n- Apura\u00e7\u00e3o de impostos\n- Fechamento mensal\n\n### 5.3 Integra\u00e7\u00e3o com Balan\u00e7as\n\n#### 5.3.1 Para Self-Service\n\nImplementa\u00e7\u00e3o de conex\u00e3o com balan\u00e7as:\n\n- Leitura de peso em tempo real\n- C\u00e1lculo autom\u00e1tico de valor\n- Calibra\u00e7\u00e3o e configura\u00e7\u00e3o\n- Modo offline para conting\u00eancia\n- Registro de pesagens\n\n#### 5.3.2 Para Controle de Estoque\n\nDesenvolvimento de pesagem para estoque:\n\n- Pesagem de insumos\n- Convers\u00e3o de unidades\n- Controle de quebra e perdas\n- Rastreabilidade\n- Invent\u00e1rio f\u00edsico\n\n### 5.4 Integra\u00e7\u00e3o com Equipamentos\n\n#### 5.4.1 Impressoras e Comandas\n\nImplementa\u00e7\u00e3o de sistema de impress\u00e3o:\n\n- Impress\u00e3o de comandas para cozinha\n- Impress\u00e3o de contas e recibos\n- Suporte a diversas marcas de impressoras\n- Configura\u00e7\u00e3o de layouts\n- Tratamento de falhas\n\n#### 5.4.2 Displays de Cozinha\n\nDesenvolvimento de integra\u00e7\u00e3o com displays:\n\n- Exibi\u00e7\u00e3o de pedidos em andamento\n- Alertas visuais e sonoros\n- Temporizadores\n- Confirma\u00e7\u00e3o por toque\n- Sincroniza\u00e7\u00e3o em tempo real\n\n## 6. Infraestrutura e Hospedagem\n\n### 6.1 Ambiente de Produ\u00e7\u00e3o\n\n#### 6.1.1 Servidores Web\n\nConfigura\u00e7\u00e3o da infraestrutura web:\n\n- Servidores web redundantes\n- Balanceadores de carga\n- Certificados SSL/TLS\n- Cache e otimiza\u00e7\u00e3o\n- Monitoramento 24/7\n\n#### 6.1.2 Banco de Dados\n\nImplementa\u00e7\u00e3o da camada de dados:\n\n- Cluster de banco de dados MySQL\n- Replica\u00e7\u00e3o e alta disponibilidade\n- Backups automatizados\n- Particionamento por tenant\n- Otimiza\u00e7\u00e3o de performance\n\n#### 6.1.3 Armazenamento\n\nConfigura\u00e7\u00e3o de sistemas de armazenamento:\n\n- Sistema de arquivos distribu\u00eddo\n- Armazenamento para backups\n- CDN para assets est\u00e1ticos\n- Pol\u00edticas de reten\u00e7\u00e3o\n- Compress\u00e3o e otimiza\u00e7\u00e3o\n\n### 6.2 Escalabilidade\n\n#### 6.2.1 Horizontal\n\nImplementa\u00e7\u00e3o de mecanismos de crescimento:\n\n- Auto-scaling de servidores\n- Gerenciamento de capacidade\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n- Load balancing avan\u00e7ado\n- Cont\u00eaineres e orquestra\u00e7\u00e3o\n\n#### 6.2.2 Vertical\n\nPlanejamento para crescimento de recursos:\n\n- Upgrades de hardware\n- Otimiza\u00e7\u00e3o de software\n- Benchmarking e performance\n- Ajuste de recursos por demanda\n- Monitoramento de gargalos\n\n### 6.3 Monitoramento e Logging\n\n#### 6.3.1 Monitoramento de Sistema\n\nImplementa\u00e7\u00e3o de sistemas de observabilidade:\n\n- Monitoramento em tempo real\n- Alertas autom\u00e1ticos\n- Dashboards operacionais\n- An\u00e1lise de tend\u00eancias\n- Detec\u00e7\u00e3o de anomalias\n\n#### 6.3.2 Logging e Auditoria\n\nDesenvolvimento de registro de eventos:\n\n- Centraliza\u00e7\u00e3o de logs\n- Reten\u00e7\u00e3o configur\u00e1vel\n- Busca e an\u00e1lise\n- Trilhas de auditoria\n- Exporta\u00e7\u00e3o e conformidade\n\n### 6.4 Continuidade de Neg\u00f3cio\n\n#### 6.4.1 Backups\n\nImplementa\u00e7\u00e3o de estrat\u00e9gia de backups:\n\n- Backups di\u00e1rios automatizados\n- Backups incrementais\n- Verifica\u00e7\u00e3o de integridade\n- Restaura\u00e7\u00e3o testada\n- Armazenamento offsite\n\n#### 6.4.2 Disaster Recovery\n\nDesenvolvimento de plano de recupera\u00e7\u00e3o:\n\n- Site alternativo\n- Procedimentos documentados\n- Tempo de recupera\u00e7\u00e3o definido\n- Testes regulares\n- Comunica\u00e7\u00e3o de incidentes\n\n#### 6.4.3 Modo Offline\n\nImplementa\u00e7\u00e3o de funcionamento offline:\n\n- Opera\u00e7\u00f5es b\u00e1sicas sem internet\n- Sincroniza\u00e7\u00e3o autom\u00e1tica\n- Buffer local de transa\u00e7\u00f5es\n- Reconcilia\u00e7\u00e3o ap\u00f3s reconex\u00e3o\n- Notifica\u00e7\u00f5es de status\n\n## 7. Testes e Garantia de Qualidade\n\n### 7.1 Estrat\u00e9gia de Testes\n\n#### 7.1.1 Testes Unit\u00e1rios\n\nImplementa\u00e7\u00e3o de testes de componentes:\n\n- Cobertura de c\u00f3digo\n- Testes automatizados\n- Mock de depend\u00eancias\n- Valida\u00e7\u00e3o de regras de neg\u00f3cio\n- Integra\u00e7\u00e3o com CI/CD\n\n#### 7.1.2 Testes de Integra\u00e7\u00e3o\n\nDesenvolvimento de valida\u00e7\u00e3o de integra\u00e7\u00f5es:\n\n- Teste de APIs\n- Simula\u00e7\u00f5es de servi\u00e7os externos\n- Valida\u00e7\u00e3o de fluxos completos\n- Ambientes de teste isolados\n- Automa\u00e7\u00e3o de casos de teste\n\n#### 7.1.3 Testes de Aceita\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de valida\u00e7\u00e3o do usu\u00e1rio:\n\n- Testes de usabilidade\n- Cen\u00e1rios de uso real\n- Valida\u00e7\u00e3o com stakeholders\n- Feedback documentado\n- Aprova\u00e7\u00e3o formal\n\n### 7.2 Garantia de Qualidade\n\n#### 7.2.1 Revis\u00e3o de C\u00f3digo\n\nEstabelecimento de processos de revis\u00e3o:\n\n- Padr\u00f5es de codifica\u00e7\u00e3o\n- Pull/merge requests\n- Code reviews\n- An\u00e1lise est\u00e1tica\n- M\u00e9tricas de qualidade\n\n#### 7.2.2 Controle de Vers\u00e3o\n\nImplementa\u00e7\u00e3o de gerenciamento de vers\u00f5es:\n\n- Git flow ou similar\n- Ambientes separados (DEV/STG/PROD)\n- Tagging de vers\u00f5es\n- Gest\u00e3o de releases\n- Changelogs e documenta\u00e7\u00e3o\n\n#### 7.2.3 Testes de Performance\n\nDesenvolvimento de valida\u00e7\u00e3o de desempenho:\n\n- Testes de carga\n- Benchmarking\n- Otimiza\u00e7\u00e3o de recursos\n- Monitoramento de impacto\n- Simula\u00e7\u00e3o de multi-tenancy\n\n## 8. Seguran\u00e7a e Conformidade\n\n### 8.1 Seguran\u00e7a de Aplica\u00e7\u00e3o\n\n#### 8.1.1 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de controle de acesso:\n\n- Autentica\u00e7\u00e3o forte (2FA)\n- Gerenciamento de sess\u00f5es\n- Controle de acesso baseado em perfil\n- Pol\u00edticas de senha\n- Prote\u00e7\u00e3o contra for\u00e7a bruta\n\n#### 8.1.2 Prote\u00e7\u00e3o de Dados\n\nDesenvolvimento de mecanismos de prote\u00e7\u00e3o:\n\n- Criptografia em tr\u00e2nsito (TLS)\n- Criptografia em repouso\n- Tokeniza\u00e7\u00e3o de dados sens\u00edveis\n- Mascaramento de informa\u00e7\u00f5es\n- Acesso baseado em necessidade\n\n#### 8.1.3 Seguran\u00e7a de API\n\nImplementa\u00e7\u00e3o de prote\u00e7\u00e3o de endpoints:\n\n- Autentica\u00e7\u00e3o por token (JWT)\n- Rate limiting\n- Valida\u00e7\u00e3o de entrada\n- CORS configurado\n- Prote\u00e7\u00e3o contra ataques comuns\n\n### 8.2 Conformidade\n\n#### 8.2.1 LGPD/GDPR\n\nAdequa\u00e7\u00e3o \u00e0 legisla\u00e7\u00e3o de privacidade:\n\n- Invent\u00e1rio de dados pessoais\n- Termos de uso e privacidade\n- Mecanismos de consentimento\n- Direitos do titular (acesso, exclus\u00e3o)\n- Relat\u00f3rios de impacto\n\n#### 8.2.2 PCI DSS\n\nConformidade para processamento de pagamentos:\n\n- Seguran\u00e7a de dados de cart\u00e3o\n- Tokeniza\u00e7\u00e3o via Stripe\n- Escopo reduzido de PCI\n- Varreduras de seguran\u00e7a\n- Treinamento e conscientiza\u00e7\u00e3o\n\n#### 8.2.3 Auditoria e Compliance\n\nImplementa\u00e7\u00e3o de pr\u00e1ticas de conformidade:\n\n- Trilhas de auditoria\n- Logs imut\u00e1veis\n- Evid\u00eancias de controle\n- Relat\u00f3rios de compliance\n- Revis\u00f5es peri\u00f3dicas\n\n## 9. Lan\u00e7amento e Opera\u00e7\u00f5es\n\n### 9.1 Estrat\u00e9gia de Lan\u00e7amento\n\n#### 9.1.1 MVP e Roadmap\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Defini\u00e7\u00e3o do MVP inicial\n- Prioriza\u00e7\u00e3o de funcionalidades\n- Roadmap de m\u00e9dio prazo\n- Feedback loops planejados\n- Marcos e m\u00e9tricas de sucesso\n\n#### 9.1.2 Beta e Early Adopters\n\nImplementa\u00e7\u00e3o de programa inicial:\n\n- Sele\u00e7\u00e3o de clientes beta\n- Incentivos para early adopters\n- Coleta estruturada de feedback\n- Ciclos r\u00e1pidos de itera\u00e7\u00e3o\n- Estrat\u00e9gia de expans\u00e3o\n\n#### 9.1.3 Go-to-Market\n\nDesenvolvimento de estrat\u00e9gia comercial:\n\n- Posicionamento de mercado\n- Estrat\u00e9gia de pre\u00e7os\n- Canais de aquisi\u00e7\u00e3o\n- Materiais de marketing\n- Plano de vendas\n\n### 9.2 Opera\u00e7\u00f5es Cont\u00ednuas\n\n#### 9.2.1 Suporte ao Cliente\n\nImplementa\u00e7\u00e3o de estrutura de atendimento:\n\n- Equipe de suporte escalonada\n- Base de conhecimento\n- Procedimentos documentados\n- M\u00e9tricas de atendimento\n- Feedback e melhoria cont\u00ednua\n\n#### 9.2.2 Monitoramento de Uso\n\nDesenvolvimento de an\u00e1lise de utiliza\u00e7\u00e3o:\n\n- Telemetria de uso\n- Detec\u00e7\u00e3o de problemas\n- M\u00e9tricas de engajamento\n- An\u00e1lise de churn\n- Oportunidades de upsell\n\n#### 9.2.3 SLA e Garantias\n\nEstabelecimento de acordos de n\u00edvel de servi\u00e7o:\n\n- Disponibilidade garantida\n- Tempo de resposta para suporte\n- Resolu\u00e7\u00e3o de incidentes\n- Compensa\u00e7\u00f5es por falhas\n- Comunica\u00e7\u00e3o proativa\n\n## 10. Manuten\u00e7\u00e3o e Evolu\u00e7\u00e3o\n\n### 10.1 Desenvolvimento Cont\u00ednuo\n\n#### 10.1.1 Novas Funcionalidades\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Processo de coleta de requisitos\n- Prioriza\u00e7\u00e3o baseada em valor\n- Desenvolvimento \u00e1gil\n- Testes de conceito\n- Valida\u00e7\u00e3o com usu\u00e1rios\n\n#### 10.1.2 Corre\u00e7\u00f5es e Melhorias\n\nImplementa\u00e7\u00e3o de processo de manuten\u00e7\u00e3o:\n\n- Triagem de bugs e issues\n- Prioriza\u00e7\u00e3o por impacto\n- Janelas de manuten\u00e7\u00e3o\n- Hotfixes para problemas cr\u00edticos\n- Refatora\u00e7\u00e3o planejada\n\n#### 10.1.3 Atualiza\u00e7\u00f5es de Tecnologia\n\nPlano para evolu\u00e7\u00e3o tecnol\u00f3gica:\n\n- Atualiza\u00e7\u00f5es de seguran\u00e7a\n- Atualiza\u00e7\u00e3o de frameworks\n- Migra\u00e7\u00e3o planejada\n- Testes de compatibilidade\n- Comunica\u00e7\u00e3o de mudan\u00e7as\n\n### 10.2 An\u00e1lise e Otimiza\u00e7\u00e3o\n\n#### 10.2.1 Performance\n\nMonitoramento e melhoria cont\u00ednua:\n\n- An\u00e1lise de gargalos\n- Otimiza\u00e7\u00e3o de consultas\n- Refinamento de caching\n- Monitoramento de uso de recursos\n- Benchmarking peri\u00f3dico\n\n#### 10.2.2 Custo-Benef\u00edcio\n\nAvalia\u00e7\u00e3o financeira constante:\n\n- An\u00e1lise de custos operacionais\n- Otimiza\u00e7\u00e3o de recursos\n- Renegocia\u00e7\u00e3o com fornecedores\n- Efici\u00eancia energ\u00e9tica\n- Automa\u00e7\u00e3o de processos\n\n#### 10.2.3 Experi\u00eancia do Usu\u00e1rio\n\nMelhoria cont\u00ednua da UX:\n\n- Testes de usabilidade\n- An\u00e1lise de caminhos e convers\u00e3o\n- Feedback estruturado\n- A/B testing\n- Pesquisas de satisfa\u00e7\u00e3o\n\n## 11. Diret\u00f3rio Completo do Projeto\n\n```\nrestaurante-sistema/\n\u2502\n\u251c\u2500\u2500 assets/                        # Arquivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 css/                       # Estilos CSS\n\u2502   \u2502   \u251c\u2500\u2500 main.css               # Estilo principal\n\u2502   \u2502   \u251c\u2500\u2500 login.css              # Estilos da p\u00e1gina de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.css          # Estilos do painel principal\n\u2502   \u2502   \u251c\u2500\u2500 tables.css             # Estilos do mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 menu.css               # Estilos do card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.css            # Estilos do painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 reports.css            # Estilos dos relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 ponto.css              # Estilos para o sistema de ponto\n\u2502   \u2502   \u251c\u2500\u2500 fornecedores.css       # Estilos para gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 customer-mobile.css    # Estilos para interface mobile do cliente\n\u2502   \u2502   \u251c\u2500\u2500 subscription.css       # Estilos para p\u00e1ginas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 pricing.css            # Estilos para p\u00e1gina de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing.css            # Estilos para gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Estilos espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.css       # Estilo para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.css       # Estilo para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.css       # Estilo para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.css        # Estilo para rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.css    # Estilo para self-service/buf\u00ea\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.css       # Estilo para delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foodtruck.css      # Estilo para food truck\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bar.css            # Estilo para bar/pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cafeteria.css      # Estilo para cafeteria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.css      # Estilo para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.css         # Estilos para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 js/                        # Arquivos JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # JavaScript principal\n\u2502   \u2502   \u251c\u2500\u2500 login.js               # L\u00f3gica de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js           # Funcionalidades do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 tables.js              # Gerenciamento de mesas\n\u2502   \u2502   \u251c\u2500\u2500 orders.js              # Processamento de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 menu.js                # Card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.js             # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory.js           # Controle de estoque\n\u2502   \u2502   \u251c\u2500\u2500 payments.js            # Processamento de pagamentos\n\u2502   \u2502   \u251c\u2500\u2500 stripe-integration.js  # Integra\u00e7\u00e3o com Stripe\n\u2502   \u2502   \u251c\u2500\u2500 subscription.js        # L\u00f3gica de gerenciamento de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 pricing-calculator.js  # Calculadora de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing-portal.js      # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 charts.js              # L\u00f3gica para gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 ponto.js               # L\u00f3gica de registro de ponto\n\u2502   \u2502   \u251c\u2500\u2500 supplier-manager.js    # Gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 group-orders.js        # L\u00f3gica de pedidos em grupo\n\u2502   \u2502   \u251c\u2500\u2500 bill-splitter.js       # Divis\u00e3o de contas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Scripts espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.js        # L\u00f3gica para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.js        # L\u00f3gica para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.js        # L\u00f3gica para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.js         # L\u00f3gica para rod\u00edzio (controle de passadas)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.js     # L\u00f3gica para self-service (integra\u00e7\u00e3o com balan\u00e7as)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.js        # L\u00f3gica para delivery (rastreamento)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.js       # L\u00f3gica para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.js          # L\u00f3gica para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 images/                    # Imagens\n\u2502   \u2502   \u251c\u2500\u2500 logo/                  # Logotipos\n\u2502   \u2502   \u251c\u2500\u2500 icons/                 # \u00cdcones\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 menu/              # \u00cdcones para categorias do menu\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status/            # \u00cdcones de status\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 actions/           # \u00cdcones para a\u00e7\u00f5es\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 payment/           # \u00cdcones para m\u00e9todos de pagamento\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 subscription/      # \u00cdcones para planos de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 menu/                  # Imagens dos pratos\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Elementos da interface\n\u2502   \u2502   \u251c\u2500\u2500 plans/                 # Imagens para os planos de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 restaurant-types/      # Imagens espec\u00edficas por tipo de restaurante\n\u2502   \u2502       \u251c\u2500\u2500 alacarte/          # Imagens para restaurante \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood/          # Imagens para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria/          # Imagens para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 ...                # Outros tipos\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fonts/                     # Fontes\n\u2502\n\u251c\u2500\u2500 config/                        # Arquivos de configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 database.php               # Configura\u00e7\u00e3o da conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 constants.php              # Constantes da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 stripe.php                 # Configura\u00e7\u00e3o da API do Stripe\n\u2502   \u251c\u2500\u2500 email.php                  # Configura\u00e7\u00e3o de emails\n\u2502   \u251c\u2500\u2500 sms.php                    # Configura\u00e7\u00e3o de SMS\n\u2502   \u251c\u2500\u2500 qrcode.php                 # Configura\u00e7\u00e3o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 ifood.php                  # Configura\u00e7\u00e3o da API do iFood\n\u2502   \u251c\u2500\u2500 restaurant_types.php       # Configura\u00e7\u00e3o de tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface_settings.php     # Configura\u00e7\u00f5es de interface por tipo\n\u2502   \u251c\u2500\u2500 order_methods.php          # Configura\u00e7\u00f5es de m\u00e9todos de pedido\n\u2502   \u251c\u2500\u2500 subscription_plans.php     # Configura\u00e7\u00e3o de planos de assinatura\n\u2502   \u251c\u2500\u2500 tenant.php                 # Configura\u00e7\u00e3o multi-tenant\n\u2502   \u2514\u2500\u2500 feature_limits.php         # Limites de recursos por plano\n\u2502\n\u251c\u2500\u2500 controllers/                   # Controladores\n\u2502   \u251c\u2500\u2500 AuthController.php         # Controlador de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 SubscriptionController.php # Controlador de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 PlansController.php    # Controlador de planos\n\u2502   \u2502   \u251c\u2500\u2500 BillingController.php  # Controlador de faturamento\n\u2502   \u2502   \u2514\u2500\u2500 FeatureController.php  # Controlador de recursos dispon\u00edveis\n\u2502   \u251c\u2500\u2500 TenantController.php       # Controlador multi-tenant\n\u2502   \u251c\u2500\u2500 OnboardingController.php   # Controlador de configura\u00e7\u00e3o inicial\n\u2502   \u251c\u2500\u2500 DashboardController.php    # Controlador do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteDashboardController.php  # Dashboard espec\u00edfico para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodDashboardController.php  # Dashboard espec\u00edfico para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaDashboardController.php  # Dashboard espec\u00edfico para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioDashboardController.php   # Dashboard espec\u00edfico para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 DeliveryDashboardController.php  # Dashboard espec\u00edfico para delivery\n\u2502   \u251c\u2500\u2500 TableController.php        # Controlador de mesas\n\u2502   \u251c\u2500\u2500 OrderController.php        # Controlador de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrderController.php    # Pedidos individuais\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrderController.php     # Pedidos em grupo\n\u2502   \u251c\u2500\u2500 MenuController.php         # Controlador do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuController.php   # Card\u00e1pio para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuController.php   # Card\u00e1pio para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaMenuController.php   # Card\u00e1pio para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioMenuController.php    # Card\u00e1pio para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 SelfServiceMenuController.php # Card\u00e1pio para self-service\n\u2502   \u251c\u2500\u2500 KitchenController.php      # Controlador da cozinha\n\u2502   \u251c\u2500\u2500 InventoryController.php    # Controlador de estoque\n\u2502   \u251c\u2500\u2500 PaymentController.php      # Controlador de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 BillSplitController.php      # Controlador de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ReportController.php       # Controlador de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 iFoodController.php        # Controlador de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 SupplierController.php     # Controlador de fornecedores\n\u2502   \u2502   \u2514\u2500\u2500 QuickOrderController.php     # Controlador de pedidos r\u00e1pidos\n\u2502   \u251c\u2500\u2500 StaffController.php        # Controlador de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 TimeClockController.php      # Controlador de ponto\n\u2502   \u251c\u2500\u2500 CustomerController.php     # Controlador de clientes\n\u2502   \u251c\u2500\u2500 QRCodeController.php       # Controlador de gera\u00e7\u00e3o e gest\u00e3o de QR Codes\n\u2502   \u251c\u2500\u2500 RestaurantTypeController.php # Controlador de tipo de restaurante\n\u2502   \u2514\u2500\u2500 SettingsController.php     # Controlador de configura\u00e7\u00f5es\n\u2502\n\u251c\u2500\u2500 models/                        # Modelos\n\u2502   \u251c\u2500\u2500 User.php                   # Modelo de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 Account.php                # Modelo de conta (assinatura)\n\u2502   \u2502   \u251c\u2500\u2500 Subscription.php       # Modelo de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 Plan.php               # Modelo de plano\n\u2502   \u2502   \u251c\u2500\u2500 Invoice.php            # Modelo de fatura\n\u2502   \u2502   \u2514\u2500\u2500 Usage.php              # Modelo de uso de recursos\n\u2502   \u251c\u2500\u2500 Tenant.php                 # Modelo de tenant (separa\u00e7\u00e3o de dados)\n\u2502   \u251c\u2500\u2500 Restaurant.php             # Modelo de restaurante com tipo e configura\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 RestaurantType.php         # Modelo de tipos de restaurante\n\u2502   \u251c\u2500\u2500 CashRegister.php           # Modelo de caixa\n\u2502   \u251c\u2500\u2500 Table.php                  # Modelo de mesa\n\u2502   \u251c\u2500\u2500 Order.php                  # Modelo de pedido\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrder.php        # Modelo de pedido individual\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrder.php         # Modelo de pedido em grupo\n\u2502   \u251c\u2500\u2500 OrderItem.php              # Modelo de item de pedido\n\u2502   \u251c\u2500\u2500 MenuItem.php               # Modelo de item do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuItem.php   # Extens\u00e3o para itens de \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuItem.php   # Extens\u00e3o para itens de fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzaMenuItem.php      # Extens\u00e3o para pizza (metades, bordas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 RodizioMenuItem.php    # Extens\u00e3o para rod\u00edzio\n\u2502   \u251c\u2500\u2500 Inventory.php              # Modelo de estoque\n\u2502   \u2502   \u2514\u2500\u2500 StockMovement.php      # Modelo de movimenta\u00e7\u00e3o de estoque\n\u2502   \u251c\u2500\u2500 Reservation.php            # Modelo de reserva\n\u2502   \u251c\u2500\u2500 Payment.php                # Modelo de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 BillSplit.php          # Modelo de divis\u00e3o de conta\n\u2502   \u251c\u2500\u2500 Staff.php                  # Modelo de funcion\u00e1rio\n\u2502   \u2502   \u2514\u2500\u2500 TimeClock.php          # Modelo de registro de ponto\n\u2502   \u251c\u2500\u2500 Supplier.php               # Modelo de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierContact.php    # Modelo de contato de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierOrder.php      # Modelo de pedido para fornecedor\n\u2502   \u2502   \u2514\u2500\u2500 SupplierRating.php     # Modelo de avalia\u00e7\u00e3o de fornecedor\n\u2502   \u251c\u2500\u2500 Customer.php               # Modelo de cliente\n\u2502   \u2502   \u2514\u2500\u2500 LoyaltyProgram.php     # Modelo de programa de fidelidade\n\u2502   \u251c\u2500\u2500 MarketingCampaign.php      # Modelo de campanha de marketing\n\u2502   \u251c\u2500\u2500 QRCode.php                 # Modelo de QR Code\n\u2502   \u251c\u2500\u2500 RestaurantConfiguration.php # Modelo de configura\u00e7\u00e3o do restaurante\n\u2502   \u2514\u2500\u2500 RestaurantInterface.php    # Modelo de interface do restaurante\n\u2502\n\u251c\u2500\u2500 views/                         # Visualiza\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 auth/                      # Telas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 login.php              # Tela de login\n\u2502   \u2502   \u251c\u2500\u2500 reset-password.php     # Redefini\u00e7\u00e3o de senha\n\u2502   \u2502   \u2514\u2500\u2500 register.php           # Cadastro inicial\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 subscription/              # Telas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # P\u00e1gina de planos dispon\u00edveis\n\u2502   \u2502   \u251c\u2500\u2500 checkout.php           # Checkout de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 success.php            # Confirma\u00e7\u00e3o de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 billing.php            # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 upgrade.php            # Upgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 downgrade.php          # Downgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 cancel.php             # Cancelamento de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 payment-methods.php    # Gest\u00e3o de m\u00e9todos de pagamento\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 onboarding/                # Telas de configura\u00e7\u00e3o inicial\n\u2502   \u2502   \u251c\u2500\u2500 welcome.php            # Boas-vindas e introdu\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-type.php    # Sele\u00e7\u00e3o de tipo de restaurante\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-comparison.php # Compara\u00e7\u00e3o entre tipos\n\u2502   \u2502   \u251c\u2500\u2500 basic-info.php         # Informa\u00e7\u00f5es b\u00e1sicas\n\u2502   \u2502   \u251c\u2500\u2500 menu-setup.php         # Configura\u00e7\u00e3o inicial do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 operating-hours.php    # Hor\u00e1rios de funcionamento\n\u2502   \u2502   \u251c\u2500\u2500 table-setup.php        # Configura\u00e7\u00e3o de mesas/layout\n\u2502   \u2502   \u251c\u2500\u2500 staff-roles.php        # Defini\u00e7\u00e3o de cargos\n\u2502   \u2502   \u251c\u2500\u2500 payment-options.php    # Op\u00e7\u00f5es de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 finalize.php           # Finaliza\u00e7\u00e3o e ativa\u00e7\u00e3o\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 dashboard/                 # Telas do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 index.php              # Dashboard principal (din\u00e2mico por tipo)\n\u2502   \u2502   \u251c\u2500\u2500 account-status.php     # Status da conta e assinatura\n\u2502   \u2502   \u251c\u2500\u2500 alacarte/              # Dashboards espec\u00edficos por tipo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal \u00e0 la carte\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tables.php         # Visualiza\u00e7\u00e3o de mesas \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood/              # Fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal fast food\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 queue.php          # Fila de pedidos fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria/              # Pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal pizzaria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pizza-builder.php  # Construtor de pizza\n\u2502   \u2502   \u251c\u2500\u2500 rodizio/               # Rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal rod\u00edzio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rounds.php         # Controle de passadas\n\u2502   \u2502   \u251c\u2500\u2500 selfservice/           # Self-service\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal self-service\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scales.php         # Controle de balan\u00e7as\n\u2502   \u2502   \u251c\u2500\u2500 delivery/              # Delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal delivery\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 routes.php         # Controle de rotas de entrega\n\u2502   \u2502   \u2514\u2500\u2500 multiunit/             # Rede de restaurantes\n\u2502   \u2502       \u251c\u2500\u2500 index.php          # Dashboard principal rede\n\u2502   \u2502       \u2514\u2500\u2500 units.php          # Controle de unidades\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tables/                    # Telas de mesas\n\u2502   \u2502   \u251c\u2500\u2500 map.php                # Mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 order.php              # Cria\u00e7\u00e3o de pedido\n\u2502   \u2502   \u2514\u2500\u2500 multi-user.php         # Gest\u00e3o de mesas com m\u00faltiplos usu\u00e1rios\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 menu/                      # Telas do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 admin.php              # Gerenciamento do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 editor.php             # Editor de itens do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 customer.php           # Card\u00e1pio para o cliente (QR Code)\n\u2502   \u2502   \u251c\u2500\u2500 category-manager.php   # Gerenciador de categorias\n\u2502   \u2502   \u251c\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es e card\u00e1pios especiais\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Card\u00e1pios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Layout para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Layout para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Layout para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Layout para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 selfservice.php    # Layout para self-service\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 kitchen/                   # Telas da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 panel.php              # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory-usage.php    # Uso de ingredientes\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Pain\u00e9is espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Painel para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Painel para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Painel para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 rodizio.php        # Painel para rod\u00edzio\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 inventory/                 # Telas de estoque\n\u2502   \u2502   \u251c\u2500\u2500 management.php         # Gerenciamento de estoque\n\u2502   \u2502   \u251c\u2500\u2500 movements.php          # Movimenta\u00e7\u00f5es de estoque\n\u2502   \u2502   \u2514\u2500\u2500 alerts.php             # Alertas de estoque\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 payments/                  # Telas de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 process.php            # Processamento de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 receipt.php            # Recibo\n\u2502   \u2502   \u251c\u2500\u2500 split-bill.php         # Divis\u00e3o de conta\n\u2502   \u2502   \u2514\u2500\u2500 group-payment.php      # Pagamento em grupo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 reports/                   # Telas de relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 sales.php              # Relat\u00f3rios de vendas\n\u2502   \u2502   \u251c\u2500\u2500 cash.php               # Fechamento de caixa\n\u2502   \u2502   \u251c\u2500\u2500 performance.php        # Desempenho de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 financial.php          # Relat\u00f3rios financeiros\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Relat\u00f3rios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Relat\u00f3rios para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Relat\u00f3rios para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Relat\u00f3rios para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Relat\u00f3rios para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 delivery.php       # Relat\u00f3rios para delivery\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 ifood/                     # Telas de integra\u00e7\u00e3o com iFood\n\u2502   \u2502   \u2514\u2500\u2500 orders.php             # Pedidos do iFood\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 suppliers/                 # Telas de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 quick-order.php        # Pedido r\u00e1pido\n\u2502   \u2502   \u251c\u2500\u2500 history.php            # Hist\u00f3rico de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 ratings.php            # Avalia\u00e7\u00e3o de fornecedores\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 staff/                     # Telas de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do funcion\u00e1rio\n\u2502   \u2502   \u251c\u2500\u2500 schedule.php           # Escala de trabalho\n\u2502   \u2502   \u2514\u2500\u2500 time-clock/            # Sistema de ponto\n\u2502   \u2502       \u251c\u2500\u2500 register.php       # Registro de ponto\n\u2502   \u2502       \u251c\u2500\u2500 management.php     # Gest\u00e3o de ponto\n\u2502   \u2502       \u2514\u2500\u2500 reports.php        # Relat\u00f3rios de ponto\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 customers/                 # Telas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de clientes\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do cliente\n\u2502   \u2502   \u2514\u2500\u2500 loyalty.php            # Programa de fidelidade\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 marketing/                 # Telas de marketing\n\u2502   \u2502   \u251c\u2500\u2500 campaigns.php          # Campanhas de marketing\n\u2502   \u2502   \u2514\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 qrcode/                    # Telas de gest\u00e3o de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 generator.php          # Gerador de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 manager.php            # Gestor de QR Codes\n\u2502   \u2502   \u2514\u2500\u2500 preview.php            # Pr\u00e9-visualiza\u00e7\u00e3o de QR Codes\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 admin/                     # \u00c1rea administrativa da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 accounts.php           # Gest\u00e3o de contas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # Configura\u00e7\u00e3o de planos\n\u2502   \u2502   \u251c\u2500\u2500 statistics.php         # Estat\u00edsticas da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 support.php            # Sistema de suporte\n\u2502   \u2502   \u2514\u2500\u2500 settings.php           # Configura\u00e7\u00f5es da plataforma\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 settings/                  # Telas de configura\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 general.php            # Configura\u00e7\u00f5es gerais\n\u2502       \u251c\u2500\u2500 restaurant-type.php    # Configura\u00e7\u00e3o de tipo de restaurante\n\u2502       \u251c\u2500\u2500 interfaces.php         # Configura\u00e7\u00e3o de interfaces\n\u2502       \u251c\u2500\u2500 qrcode.php             # Configura\u00e7\u00e3o de QR Code\n\u2502       \u251c\u2500\u2500 group-orders.php       # Configura\u00e7\u00e3o de pedidos em grupo\n\u2502       \u251c\u2500\u2500 time-clock.php         # Configura\u00e7\u00e3o de ponto\n\u2502       \u251c\u2500\u2500 integrations.php       # Integra\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 account.php            # Configura\u00e7\u00f5es da conta/assinatura\n\u2502       \u2514\u2500\u2500 backup.php             # Backup e seguran\u00e7a\n\u2502\n\u251c\u2500\u2500 includes/                      # Arquivos inclu\u00eddos\n\u2502   \u251c\u2500\u2500 functions.php              # Fun\u00e7\u00f5es auxiliares\n\u2502   \u251c\u2500\u2500 validation.php             # Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 session.php                # Gerenciamento de sess\u00e3o\n\u2502   \u251c\u2500\u2500 security.php               # Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 currency.php               # Formata\u00e7\u00e3o de moeda\n\u2502   \u251c\u2500\u2500 date.php                   # Fun\u00e7\u00f5es de data e hora\n\u2502   \u251c\u2500\u2500 notification.php           # Sistema de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 restaurant-type-helper.php # Fun\u00e7\u00f5es auxiliares para tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface-loader.php       # Carregador de interfaces espec\u00edficas\n\u2502   \u251c\u2500\u2500 tenant-resolver.php        # Resolu\u00e7\u00e3o de tenant\n\u2502   \u251c\u2500\u2500 feature-checker.php        # Verifica\u00e7\u00e3o de recursos dispon\u00edveis por plano\n\u2502   \u2514\u2500\u2500 subscription-helper.php    # Fun\u00e7\u00f5es auxiliares para assinaturas\n\u2502\n\u251c\u2500\u2500 api/                           # Endpoints da API\n\u2502   \u251c\u2500\u2500 auth.php                   # API de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 subscription.php           # API de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # API de planos\n\u2502   \u2502   \u251c\u2500\u2500 webhooks.php           # Webhooks do Stripe\n\u2502   \u2502   \u2514\u2500\u2500 billing.php            # API de faturamento\n\u2502   \u251c\u2500\u2500 tables.php                 # API de mesas\n\u2502   \u251c\u2500\u2500 orders.php                 # API de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 group-orders.php       # API de pedidos em grupo\n\u2502   \u251c\u2500\u2500 menu.php                   # API do card\u00e1pio\n\u2502   \u251c\u2500\u2500 payments.php               # API de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 bill-split.php         # API de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ifood.php                  # API de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 suppliers.php              # API de fornecedores\n\u2502   \u251c\u2500\u2500 staff.php                  # API de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 time-clock.php         # API de registro de ponto\n\u2502   \u251c\u2500\u2500 customers.php              # API de clientes\n\u2502   \u251c\u2500\u2500 reports.php                # API de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 qrcode.php                 # API de QR Codes\n\u2502   \u2514\u2500\u2500 restaurant-type.php        # API de tipo de restaurante\n\u2502\n\u251c\u2500\u2500 services/                      # Servi\u00e7os\n\u2502   \u251c\u2500\u2500 StripeService.php          # Servi\u00e7o de pagamento Stripe\n\u2502   \u251c\u2500\u2500 SubscriptionService.php    # Servi\u00e7o de gerenciamento de assinaturas\n\u2502   \u251c\u2500\u2500 BillingService.php         # Servi\u00e7o de gerenciamento de faturas\n\u2502   \u251c\u2500\u2500 TenantService.php          # Servi\u00e7o de gest\u00e3o multi-tenant\n\u2502   \u251c\u2500\u2500 FeatureLimitService.php    # Servi\u00e7o de controle de limites por plano\n\u2502   \u251c\u2500\u2500 QRCodeService.php          # Servi\u00e7o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 PDFService.php             # Servi\u00e7o de gera\u00e7\u00e3o de PDF\n\u2502   \u251c\u2500\u2500 iFoodService.php           # Servi\u00e7o de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 EmailService.php           # Servi\u00e7o de e-mail\n\u2502   \u251c\u2500\u2500 SMSService.php             # Servi\u00e7o de SMS\n\u2502   \u251c\u2500\u2500 NotificationService.php    # Servi\u00e7o de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 ChartService.php           # Servi\u00e7o de gera\u00e7\u00e3o de gr\u00e1ficos\n\u2502   \u251c\u2500\u2500 BackupService.php          # Servi\u00e7o de backup\n\u2502   \u251c\u2500\u2500 RestaurantTypeService.php  # Servi\u00e7o de tipo de restaurante\n\u2502   \u251c\u2500\u2500 InterfaceService.php       # Servi\u00e7o de interfaces\n\u2502   \u251c\u2500\u2500 ScaleService.php           # Servi\u00e7o de integra\u00e7\u00e3o com balan\u00e7as\n\u2502   \u251c\u2500\u2500 DeliveryTrackingService.php # Servi\u00e7o de rastreamento de entregas\n\u2502   \u2514\u2500\u2500 RodizioTrackingService.php # Servi\u00e7o de controle de rod\u00edzio\n\u2502\n\u251c\u2500\u2500 database/                      # Arquivos de banco de dados\n\u2502   \u251c\u2500\u2500 migrations/                # Migra\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 create_tenants_table.php     # Tabela de tenants\n\u2502   \u2502   \u251c\u2500\u2500 create_accounts_table.php    # Tabela de contas\n\u2502   \u2502   \u251c\u2500\u2500 create_subscriptions_table.php # Tabela de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 create_plans_table.php       # Tabela de planos\n\u2502   \u2502   \u251c\u2500\u2500 create_invoices_table.php    # Tabela de faturas\n\u2502   \u2502   \u251c\u2500\u2500 create_usage_logs_table.php  # Tabela de uso de recursos\n\u2502   \u2502   \u251c\u2500\u2500 create_users_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_types_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurants_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_configurations_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_tables_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_menu_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_order_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_inventory_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_customers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_staff_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_time_clock_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_suppliers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_contacts_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_payments_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_bill_splits_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_qrcodes_table.php\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 seeds/                     # Seeds\n\u2502       \u251c\u2500\u2500 plans_seeder.php       # Seed para planos de assinatura\n\u2502       \u251c\u2500\u2500 features_seeder.php    # Seed para recursos por plano\n\u2502       \u251c\u2500\u2500 users_seeder.php\n\u2502       \u251c\u2500\u2500 restaurant_types_seeder.php\n\u2502       \u251c\u2500\u2500 menu_items_seeder.php\n\u2502       \u251c\u2500\u2500 suppliers_seeder.php\n\u2502       \u251c\u2500\u2500 staff_seeder.php\n\u2502       \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 public/                        # Arquivos p\u00fablicos\n\u2502   \u251c\u2500\u2500 index.php                  # Ponto de entrada principal\n\u2502   \u251c\u2500\u2500 pricing.php                # P\u00e1gina p\u00fablica de pre\u00e7os\n\u2502   \u251c\u2500\u2500 register.php               # P\u00e1gina de registro\n\u2502   \u251c\u2500\u2500 customer-menu.php          # P\u00e1gina do card\u00e1pio digital\n\u2502   \u251c\u2500\u2500 group-order.php            # P\u00e1gina de pedido em grupo\n\u2502   \u251c\u2500\u2500 time-clock.php             # P\u00e1gina de registro de ponto\n\u2502   \u251c\u2500\u2500 webhook/                   # Endpoints de webhooks\n\u2502   \u2502   \u2514\u2500\u2500 stripe.php             # Webhook do Stripe\n\u2502   \u251c\u2500\u2500 qr/                        # QR Codes gerados\n\u2502   \u2502   \u2514\u2500\u2500 tables/                # QR Codes para mesas\n\u2502   \u251c\u2500\u2500 receipt/                   # Recibos gerados\n\u2502   \u2514\u2500\u2500 .htaccess                  # Configura\u00e7\u00e3o do Apache\n\u2502\n\u251c\u2500\u2500 mobile/                        # Arquivos de interface mobile\n\u2502   \u251c\u2500\u2500 index.php                  # Entrada principal mobile\n\u2502   \u251c\u2500\u2500 menu.php                   # Card\u00e1pio digital mobile\n\u2502   \u251c\u2500\u2500 order.php                  # Interface de pedido mobile\n\u2502   \u251c\u2500\u2500 group-order.php            # Interface de pedido em grupo\n\u2502   \u251c\u2500\u2500 payment.php                # Interface de pagamento mobile\n\u2502   \u251c\u2500\u2500 types/                     # Interfaces espec\u00edficas por tipo\n\u2502   \u2502   \u251c\u2500\u2500 alacarte.php           # Interface mobile para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood.php           # Interface mobile para fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria.php           # Interface mobile para pizzaria\n\u2502   \u2502   \u2514\u2500\u2500 rodizio.php            # Interface mobile para rod\u00edzio\n\u2502   \u2514\u2500\u2500 staff/                     # Interface para funcion\u00e1rios\n\u2502       \u2514\u2500\u2500 time-clock.php         # Registro de ponto mobile\n\u2502\n\u251c\u2500\u2500 docs/                          # Documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 setup.md                   # Instru\u00e7\u00f5es de instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 admin-guide.md             # Guia do administrador\n\u2502   \u251c\u2500\u2500 user-guide.md              # Guia do usu\u00e1rio\n\u2502   \u251c\u2500\u2500 api-docs.md                # Documenta\u00e7\u00e3o da API\n\u2502   \u251c\u2500\u2500 database-schema.md         # Esquema do banco de dados\n\u2502   \u251c\u2500\u2500 subscription.md            # Documenta\u00e7\u00e3o do sistema de assinaturas\n\u2502   \u2514\u2500\u2500 restaurant-types/          # Documenta\u00e7\u00e3o espec\u00edfica por tipo\n\u2502       \u251c\u2500\u2500 alacarte.md            # Documenta\u00e7\u00e3o para \u00e0 la carte\n\u2502       \u251c\u2500\u2500 fastfood.md            # Documenta\u00e7\u00e3o para fast food\n\u2502       \u251c\u2500\u2500 pizzaria.md            # Documenta\u00e7\u00e3o para pizzaria\n\u2502       \u2514\u2500\u2500 ...                    # Outros tipos\n\u2502\n\u251c\u2500\u2500 tests/                         # Testes automatizados\n\u2502   \u251c\u2500\u2500 unit/                      # Testes unit\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 subscription/          # Testes de assinatura\n\u2502   \u251c\u2500\u2500 integration/               # Testes de integra\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 acceptance/                # Testes de aceita\u00e7\u00e3o\n\u2502\n\u251c\u2500\u2500 vendor/                        # Depend\u00eancias (Composer)\n\u2502\n\u251c\u2500\u2500 .htaccess                      # Configura\u00e7\u00e3o do Apache\n\u251c\u2500\u2500 index.php                      # Arquivo inicial (redirecionamento)\n\u251c\u2500\u2500 composer.json                  # Configura\u00e7\u00e3o do Composer\n\u251c\u2500\u2500 package.json                   # Configura\u00e7\u00e3o do NPM\n\u251c\u2500\u2500 README.md                      # Documenta\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 LICENSE                        # Licen\u00e7a do software\n\u2514\u2500\u2500 .gitignore                     # Arquivos ignorados pelo Git\n```\n\n## Conclus\u00e3o\n\nO Sistema de Gest\u00e3o de Restaurantes SaaS representa uma solu\u00e7\u00e3o completa e flex\u00edvel, adaptada para diversos tipos de estabelecimentos. A implementa\u00e7\u00e3o como servi\u00e7o por assinatura permite escalabilidade e sustentabilidade do neg\u00f3cio, enquanto a personaliza\u00e7\u00e3o por tipo de restaurante garante que cada cliente tenha uma experi\u00eancia otimizada para seu modelo espec\u00edfico.\n\nA arquitetura multi-tenant, combinada com um modelo de planos em n\u00edveis, permite atender desde pequenos estabelecimentos at\u00e9 grandes redes, com um caminho claro de crescimento que acompanha a evolu\u00e7\u00e3o do neg\u00f3cio do cliente.\n\n\n\nA integra\u00e7\u00e3o com servi\u00e7os essenciais como Stripe para pagamentos, iFood para delivery, e um sistema robusto de QR Codes para pedidos digitais posiciona o sistema como uma solu\u00e7\u00e3o moderna e completa para o mercado de restaurantes, que cada vez mais demanda digitaliza\u00e7\u00e3o e efici\u00eancia operacional.\n\nO projeto apresentado n\u00e3o apenas resolve os desafios operacionais do dia a dia de um restaurante, mas tamb\u00e9m oferece insights valiosos baseados em dados que podem impulsionar o crescimento e a lucratividade do neg\u00f3cio.\n\n\n\n## Resumo \n\n\n# Checkpoint de Desenvolvimento do Sistema de Gest\u00e3o de Restaurantes SaaS\n\n\n\n### Componentes Implementados:\n\n1. **Banco de Dados MySQL (100%)**\n   - Esquema completo com todas as tabelas necess\u00e1rias\n   - Rela\u00e7\u00f5es e chaves estrangeiras\n   - \u00cdndices para otimiza\u00e7\u00e3o\n   - Estrutura para dados JSON\n   - Suporte completo para multi-tenant\n   -- Cria\u00e7\u00e3o do banco de dados\nCREATE DATABASE restaurante_saas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nUSE restaurante_saas;\n\n-- -----------------------------------------------------\n-- Tabelas do Sistema SaaS (Plataforma)\n-- -----------------------------------------------------\n\n-- Tabela de tenants (restaurantes)\nCREATE TABLE tenants (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) NOT NULL UNIQUE,\n    restaurant_type VARCHAR(20) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL,\n    logo VARCHAR(255) DEFAULT NULL,\n    theme_color VARCHAR(7) DEFAULT '#3498db',\n    domain VARCHAR(100) DEFAULT NULL,\n    \n    -- Campos para configura\u00e7\u00e3o de pagamentos\n    payment_gateway ENUM('stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede') DEFAULT 'stripe',\n    payment_gateway_key VARCHAR(255) DEFAULT NULL,\n    payment_gateway_token VARCHAR(255) DEFAULT NULL,\n    bank_name VARCHAR(100) DEFAULT NULL,\n    bank_agency VARCHAR(20) DEFAULT NULL,\n    bank_account VARCHAR(30) DEFAULT NULL,\n    pix_key VARCHAR(255) DEFAULT NULL,\n    payment_methods JSON DEFAULT '{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}',\n    payment_settings JSON DEFAULT '{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}',\n    \n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de planos de assinatura\nCREATE TABLE plans (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    code VARCHAR(20) NOT NULL UNIQUE,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    billing_cycle ENUM('monthly', 'quarterly', 'semiannual', 'annual') DEFAULT 'monthly',\n    features JSON NOT NULL,\n    limits JSON NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    stripe_product_id VARCHAR(100) DEFAULT NULL,\n    stripe_price_id VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de assinaturas\nCREATE TABLE subscriptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    plan_id INT UNSIGNED NOT NULL,\n    stripe_subscription_id VARCHAR(100) DEFAULT NULL,\n    stripe_customer_id VARCHAR(100) DEFAULT NULL,\n    status ENUM('trial', 'active', 'past_due', 'canceled', 'suspended') NOT NULL DEFAULT 'trial',\n    trial_ends_at TIMESTAMP NULL DEFAULT NULL,\n    ends_at TIMESTAMP NULL DEFAULT NULL,\n    next_billing_at TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (plan_id) REFERENCES plans(id)\n) ENGINE=InnoDB;\n\n-- Tabela de faturas\nCREATE TABLE invoices (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    subscription_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED NOT NULL,\n    stripe_invoice_id VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('draft', 'open', 'paid', 'uncollectible', 'void') NOT NULL DEFAULT 'draft',\n    due_date TIMESTAMP NULL DEFAULT NULL,\n    paid_at TIMESTAMP NULL DEFAULT NULL,\n    pdf_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de controle de uso de recursos\nCREATE TABLE resource_usage (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    resource_type VARCHAR(50) NOT NULL,\n    resource_count INT NOT NULL DEFAULT 1,\n    year INT NOT NULL,\n    month INT NOT NULL,\n    day INT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_resource_usage_per_day (tenant_id, resource_type, year, month, day),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Usu\u00e1rios e Acesso\n-- -----------------------------------------------------\n\n-- Tabela de usu\u00e1rios\nCREATE TABLE users (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NULL DEFAULT NULL,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin') NOT NULL,\n    phone VARCHAR(20) DEFAULT NULL,\n    profile_image VARCHAR(255) DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE,\n    last_login TIMESTAMP NULL DEFAULT NULL,\n    password_reset_token VARCHAR(100) DEFAULT NULL,\n    password_reset_expires TIMESTAMP NULL DEFAULT NULL,\n    remember_token VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_user_email (email),\n    UNIQUE KEY unique_user_username (username),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es\nCREATE TABLE permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es por papel\nCREATE TABLE role_permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer') NOT NULL,\n    permission_id INT UNSIGNED NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_role_permission (tenant_id, role, permission_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id)\n) ENGINE=InnoDB;\n\n-- Tabela de log de acesso\nCREATE TABLE access_logs (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    user_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED DEFAULT NULL,\n    ip_address VARCHAR(45) NOT NULL,\n    user_agent VARCHAR(255) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    details JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00e3o do Restaurante\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es do restaurante\nCREATE TABLE restaurant_configurations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    opening_hours JSON DEFAULT NULL,\n    operating_days JSON DEFAULT NULL,\n    delivery_radius INT DEFAULT 5,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    min_delivery_value DECIMAL(10, 2) DEFAULT 0.00,\n    allow_pickup BOOLEAN DEFAULT TRUE,\n    allow_delivery BOOLEAN DEFAULT TRUE,\n    allow_reservations BOOLEAN DEFAULT TRUE,\n    allow_qrcode_orders BOOLEAN DEFAULT TRUE,\n    allow_group_orders BOOLEAN DEFAULT TRUE,\n    default_order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    estimated_preparation_time INT DEFAULT 30,\n    default_table_capacity INT DEFAULT 4,\n    use_kitchen_display BOOLEAN DEFAULT TRUE,\n    taxes_included BOOLEAN DEFAULT TRUE,\n    tax_rate DECIMAL(5, 2) DEFAULT 0.00,\n    service_fee DECIMAL(5, 2) DEFAULT 0.00,\n    tip_options JSON DEFAULT NULL,\n    notification_settings JSON DEFAULT NULL,\n    printer_settings JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de \u00e1reas do restaurante\nCREATE TABLE restaurant_areas (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de caixas/terminais\nCREATE TABLE cash_registers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    location VARCHAR(100) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de aberturas e fechamentos de caixa\nCREATE TABLE cash_register_operations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    operation_type ENUM('opening', 'closing') NOT NULL,\n    initial_amount DECIMAL(10, 2) DEFAULT 0.00,\n    final_amount DECIMAL(10, 2) DEFAULT 0.00,\n    system_calculated_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_notes TEXT DEFAULT NULL,\n    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    closing_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de reservas\nCREATE TABLE reservations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    customer_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) NOT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    number_of_people INT NOT NULL,\n    reservation_date DATE NOT NULL,\n    reservation_time TIME NOT NULL,\n    arrival_time TIMESTAMP NULL DEFAULT NULL,\n    departure_time TIMESTAMP NULL DEFAULT NULL,\n    status ENUM('pending', 'confirmed', 'seated', 'completed', 'canceled', 'no_show') DEFAULT 'pending',\n    special_requests TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Mesas e QR Code\n-- -----------------------------------------------------\n\n-- Tabela de mesas\nCREATE TABLE tables (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    area_id INT UNSIGNED DEFAULT NULL,\n    number VARCHAR(10) NOT NULL,\n    name VARCHAR(50) DEFAULT NULL,\n    capacity INT UNSIGNED DEFAULT 4,\n    position_x INT DEFAULT 0,\n    position_y INT DEFAULT 0,\n    status ENUM('available', 'occupied', 'reserved', 'cleaning', 'inactive') DEFAULT 'available',\n    qr_code VARCHAR(255) DEFAULT NULL,\n    qr_code_hash VARCHAR(64) DEFAULT NULL,\n    occupied_since TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_table_number_per_tenant (tenant_id, number),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (area_id) REFERENCES restaurant_areas(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de QR Codes\nCREATE TABLE qr_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    code VARCHAR(100) NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    type ENUM('table', 'menu', 'payment', 'custom') NOT NULL DEFAULT 'table',\n    data JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    scan_count INT UNSIGNED DEFAULT 0,\n    last_scanned TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de ocupa\u00e7\u00e3o de mesas\nCREATE TABLE table_occupancy_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED NOT NULL,\n    start_time TIMESTAMP NOT NULL,\n    end_time TIMESTAMP NULL DEFAULT NULL,\n    number_of_customers INT UNSIGNED DEFAULT 1,\n    order_id INT UNSIGNED DEFAULT NULL,\n    total_spent DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Card\u00e1pio e Itens\n-- -----------------------------------------------------\n\n-- Tabela de categorias de menu\nCREATE TABLE menu_categories (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    image VARCHAR(255) DEFAULT NULL,\n    sort_order INT DEFAULT 0,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_category_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens do menu\nCREATE TABLE menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    category_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    cost DECIMAL(10, 2) DEFAULT 0.00,\n    image VARCHAR(255) DEFAULT NULL,\n    preparation_time INT DEFAULT 15,\n    ingredients TEXT DEFAULT NULL,\n    allergens TEXT DEFAULT NULL,\n    nutritional_info JSON DEFAULT NULL,\n    available BOOLEAN DEFAULT TRUE,\n    featured BOOLEAN DEFAULT FALSE,\n    sort_order INT DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    restaurant_type_specific BOOLEAN DEFAULT FALSE,\n    restaurant_type_config JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES menu_categories(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de op\u00e7\u00f5es e adicionais para itens do menu\nCREATE TABLE menu_item_options (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_selections INT DEFAULT 0,\n    max_selections INT DEFAULT 1,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de valores para op\u00e7\u00f5es de itens do menu\nCREATE TABLE menu_item_option_values (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    option_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    price_adjustment DECIMAL(10, 2) DEFAULT 0.00,\n    available BOOLEAN DEFAULT TRUE,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (option_id) REFERENCES menu_item_options(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de card\u00e1pios especiais/promo\u00e7\u00f5es\nCREATE TABLE special_menus (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    start_date DATE DEFAULT NULL,\n    end_date DATE DEFAULT NULL,\n    start_time TIME DEFAULT NULL,\n    end_time TIME DEFAULT NULL,\n    days_of_week JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens em card\u00e1pios especiais\nCREATE TABLE special_menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    special_menu_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    special_price DECIMAL(10, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (special_menu_id) REFERENCES special_menus(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pedidos\n-- -----------------------------------------------------\n\n-- Tabela de pedidos\nCREATE TABLE orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    staff_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) DEFAULT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    order_number VARCHAR(20) NOT NULL,\n    order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'new',\n    subtotal DECIMAL(10, 2) NOT NULL,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    scheduled_for TIMESTAMP NULL DEFAULT NULL,\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP NULL DEFAULT NULL,\n    cancelled_at TIMESTAMP NULL DEFAULT NULL,\n    cancellation_reason TEXT DEFAULT NULL,\n    is_group_order BOOLEAN DEFAULT FALSE,\n    group_order_code VARCHAR(20) DEFAULT NULL,\n    payment_status ENUM('pending', 'paid', 'partially_paid', 'refunded', 'failed') DEFAULT 'pending',\n    source ENUM('in_person', 'qrcode', 'website', 'app', 'ifood', 'phone') DEFAULT 'in_person',\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n    FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de itens do pedido\nCREATE TABLE order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    options JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',\n    preparation_started_at TIMESTAMP NULL DEFAULT NULL,\n    preparation_completed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de status do pedido\nCREATE TABLE order_status_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') NOT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de entregas\nCREATE TABLE deliveries (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    delivery_address VARCHAR(255) NOT NULL,\n    delivery_city VARCHAR(100) NOT NULL,\n    delivery_state VARCHAR(2) NOT NULL,\n    delivery_zip_code VARCHAR(10) NOT NULL,\n    delivery_instructions TEXT DEFAULT NULL,\n    delivery_person_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'assigned', 'in_transit', 'delivered', 'failed') DEFAULT 'pending',\n    estimated_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    actual_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    tracking_code VARCHAR(50) DEFAULT NULL,\n    tracking_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (delivery_person_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pagamentos\n-- -----------------------------------------------------\n\n-- Tabela de pagamentos\nCREATE TABLE payments (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') NOT NULL,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    installments TINYINT DEFAULT 1,\n    card_brand VARCHAR(50) DEFAULT NULL,\n    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',\n    transaction_id VARCHAR(100) DEFAULT NULL,\n    payment_data JSON DEFAULT NULL,\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de divis\u00e3o de contas\nCREATE TABLE bill_splits (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    split_type ENUM('equal', 'custom', 'percentage', 'item') NOT NULL DEFAULT 'equal',\n    payment_status ENUM('pending', 'paid') DEFAULT 'pending',\n    items JSON DEFAULT NULL,\n    payment_link VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de transa\u00e7\u00f5es no caixa\nCREATE TABLE cash_register_transactions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    cash_register_operation_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    transaction_type ENUM('sale', 'refund', 'expense', 'deposit', 'withdrawal') NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') DEFAULT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type ENUM('order', 'invoice', 'expense', 'other') DEFAULT NULL,\n    description TEXT DEFAULT NULL,\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (cash_register_operation_id) REFERENCES cash_register_operations(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de cupons e descontos\nCREATE TABLE coupons (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    code VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    discount_type ENUM('percentage', 'fixed', 'free_item') NOT NULL,\n    discount_value DECIMAL(10, 2) NOT NULL,\n    free_item_id INT UNSIGNED DEFAULT NULL,\n    min_order_value DECIMAL(10, 2) DEFAULT 0.00,\n    max_discount DECIMAL(10, 2) DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    max_uses INT UNSIGNED DEFAULT NULL,\n    uses_count INT UNSIGNED DEFAULT 0,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_coupon_code_per_tenant (tenant_id, code),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (free_item_id) REFERENCES menu_items(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Estoque e Ingredientes\n-- -----------------------------------------------------\n\n-- Tabela de ingredientes\nCREATE TABLE ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    cost_per_unit DECIMAL(10, 4) NOT NULL,\n    inventory_alert_threshold DECIMAL(10, 2) DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    barcode VARCHAR(50) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de ingredientes por item do menu\nCREATE TABLE menu_item_ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_item_ingredient (menu_item_id, ingredient_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de estoque\nCREATE TABLE inventory (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL DEFAULT 0,\n    location VARCHAR(50) DEFAULT 'main',\n    last_count_date TIMESTAMP NULL DEFAULT NULL,\n    last_count_by INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_location (tenant_id, ingredient_id, location),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (last_count_by) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de movimenta\u00e7\u00f5es de estoque\nCREATE TABLE inventory_movements (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    movement_type ENUM('purchase', 'order_usage', 'adjustment', 'transfer', 'waste', 'return') NOT NULL,\n    unit_cost DECIMAL(10, 4) DEFAULT NULL,\n    location VARCHAR(50) DEFAULT 'main',\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de contagem de estoque (invent\u00e1rio)\nCREATE TABLE inventory_counts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    count_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    user_id INT UNSIGNED NOT NULL,\n    status ENUM('in_progress', 'completed', 'cancelled') DEFAULT 'in_progress',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de detalhes da contagem de estoque\nCREATE TABLE inventory_count_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    inventory_count_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    expected_quantity DECIMAL(10, 2) NOT NULL,\n    actual_quantity DECIMAL(10, 2) NOT NULL,\n    discrepancy DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (inventory_count_id) REFERENCES inventory_counts(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Funcion\u00e1rios\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de funcion\u00e1rios\nCREATE TABLE staff_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    department VARCHAR(100) DEFAULT NULL,\n    hire_date DATE DEFAULT NULL,\n    salary DECIMAL(10, 2) DEFAULT NULL,\n    hourly_rate DECIMAL(10, 2) DEFAULT NULL,\n    commission_rate DECIMAL(5, 2) DEFAULT NULL,\n    working_hours JSON DEFAULT NULL,\n    employee_id VARCHAR(50) DEFAULT NULL,\n    emergency_contact_name VARCHAR(100) DEFAULT NULL,\n    emergency_contact_phone VARCHAR(20) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_staff_employee_id (tenant_id, employee_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de registro de ponto\nCREATE TABLE time_clock (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP NULL DEFAULT NULL,\n    break_start TIMESTAMP NULL DEFAULT NULL,\n    break_end TIMESTAMP NULL DEFAULT NULL,\n    total_hours DECIMAL(5, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de comiss\u00f5es de vendas\nCREATE TABLE sales_commissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    commission_amount DECIMAL(10, 2) NOT NULL,\n    commission_rate DECIMAL(5, 2) NOT NULL,\n    status ENUM('pending', 'approved', 'paid', 'rejected') DEFAULT 'pending',\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de escalas de trabalho\nCREATE TABLE staff_schedules (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    schedule_date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Clientes\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de clientes\nCREATE TABLE customer_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    birth_date DATE DEFAULT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    allergy_info TEXT DEFAULT NULL,\n    favorite_items JSON DEFAULT NULL,\n    marketing_preferences JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de programa de fidelidade\nCREATE TABLE loyalty_program (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_per_currency DECIMAL(10, 2) DEFAULT 1.00,\n    points_validity_days INT UNSIGNED DEFAULT 365,\n    min_points_to_redeem INT UNSIGNED DEFAULT 100,\n    currency_per_point DECIMAL(10, 4) DEFAULT 0.01,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de n\u00edveis de fidelidade\nCREATE TABLE loyalty_tiers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_points INT UNSIGNED NOT NULL,\n    multiplier DECIMAL(5, 2) DEFAULT 1.00,\n    benefits JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pontos de fidelidade\nCREATE TABLE loyalty_points (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    points INT NOT NULL,\n    source ENUM('purchase', 'reward', 'bonus', 'adjustment', 'redemption') NOT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    is_expired BOOLEAN DEFAULT FALSE,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de recompensas do programa de fidelidade\nCREATE TABLE loyalty_rewards (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_required INT UNSIGNED NOT NULL,\n    reward_type ENUM('discount', 'free_item', 'gift', 'coupon') NOT NULL,\n    reward_value JSON NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de resgates de recompensas\nCREATE TABLE loyalty_redemptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    loyalty_reward_id INT UNSIGNED NOT NULL,\n    points_used INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'approved', 'used', 'expired', 'cancelled') DEFAULT 'pending',\n    redemption_code VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    used_at TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_reward_id) REFERENCES loyalty_rewards(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Fornecedores\n-- -----------------------------------------------------\n\n-- Tabela de fornecedores\nCREATE TABLE suppliers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) DEFAULT NULL,\n    email VARCHAR(100) DEFAULT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    contact_name VARCHAR(100) DEFAULT NULL,\n    contact_phone VARCHAR(20) DEFAULT NULL,\n    contact_email VARCHAR(100) DEFAULT NULL,\n    category VARCHAR(50) DEFAULT NULL,\n    payment_terms VARCHAR(100) DEFAULT NULL,\n    delivery_time INT DEFAULT NULL,\n    minimum_order DECIMAL(10, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de produtos de fornecedores\nCREATE TABLE supplier_products (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    sku VARCHAR(50) DEFAULT NULL,\n    supplier_sku VARCHAR(50) DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    ingredient_id INT UNSIGNED DEFAULT NULL,\n    conversion_factor DECIMAL(10, 4) DEFAULT 1.0000,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos a fornecedores\nCREATE TABLE supplier_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_number VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expected_delivery_date DATE DEFAULT NULL,\n    delivery_date DATE DEFAULT NULL,\n    status ENUM('draft', 'sent', 'confirmed', 'partially_received', 'received', 'cancelled') DEFAULT 'draft',\n    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0.00,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    shipping DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    payment_status ENUM('pending', 'partial', 'paid', 'cancelled') DEFAULT 'pending',\n    payment_method VARCHAR(50) DEFAULT NULL,\n    payment_details JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de itens de pedidos a fornecedores\nCREATE TABLE supplier_order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED NOT NULL,\n    supplier_product_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    quantity_received DECIMAL(10, 2) DEFAULT 0.00,\n    status ENUM('pending', 'partial', 'complete', 'cancelled') DEFAULT 'pending',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_product_id) REFERENCES supplier_products(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de avalia\u00e7\u00e3o de fornecedores\nCREATE TABLE supplier_ratings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    quality_rating TINYINT UNSIGNED DEFAULT NULL,\n    service_rating TINYINT UNSIGNED DEFAULT NULL,\n    price_rating TINYINT UNSIGNED DEFAULT NULL,\n    delivery_rating TINYINT UNSIGNED DEFAULT NULL,\n    overall_rating TINYINT UNSIGNED NOT NULL,\n    comments TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Relat\u00f3rios e M\u00e9tricas\n-- -----------------------------------------------------\n\n-- Tabela de relat\u00f3rios salvos\nCREATE TABLE saved_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    report_type VARCHAR(50) NOT NULL,\n    parameters JSON NOT NULL,\n    public BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de relat\u00f3rios agendados\nCREATE TABLE scheduled_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    saved_report_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    frequency ENUM('daily', 'weekly', 'monthly', 'quarterly') NOT NULL,\n    day_of_week TINYINT UNSIGNED DEFAULT NULL,\n    day_of_month TINYINT UNSIGNED DEFAULT NULL,\n    time_of_day TIME NOT NULL,\n    recipients JSON NOT NULL,\n    last_sent TIMESTAMP NULL DEFAULT NULL,\n    next_scheduled TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (saved_report_id) REFERENCES saved_reports(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de m\u00e9tricas di\u00e1rias\nCREATE TABLE daily_metrics (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    metric_date DATE NOT NULL,\n    sales DECIMAL(10, 2) DEFAULT 0.00,\n    orders INT UNSIGNED DEFAULT 0,\n    customers INT UNSIGNED DEFAULT 0,\n    average_ticket DECIMAL(10, 2) DEFAULT 0.00,\n    tables_served INT UNSIGNED DEFAULT 0,\n    average_table_time INT UNSIGNED DEFAULT 0,\n    staff_count INT UNSIGNED DEFAULT 0,\n    labor_cost DECIMAL(10, 2) DEFAULT 0.00,\n    cogs DECIMAL(10, 2) DEFAULT 0.00,\n    profit_margin DECIMAL(5, 2) DEFAULT 0.00,\n    item_metrics JSON DEFAULT NULL,\n    payment_methods JSON DEFAULT NULL,\n    source_metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_tenant_date (tenant_id, metric_date),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Integra\u00e7\u00f5es Externas\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es de integra\u00e7\u00e3o com iFood\nCREATE TABLE ifood_integration (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    merchant_id VARCHAR(100) NOT NULL,\n    api_key VARCHAR(255) NOT NULL,\n    merchant_token VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT FALSE,\n    auto_accept_orders BOOLEAN DEFAULT FALSE,\n    default_preparation_time INT UNSIGNED DEFAULT 30,\n    sync_menu BOOLEAN DEFAULT TRUE,\n    sync_status BOOLEAN DEFAULT TRUE,\n    menu_last_sync TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos do iFood\nCREATE TABLE ifood_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    ifood_order_id VARCHAR(100) NOT NULL,\n    ifood_status VARCHAR(50) NOT NULL,\n    status_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    order_json JSON NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ifood_order (tenant_id, ifood_order_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de mapeamento de itens do card\u00e1pio com iFood\nCREATE TABLE ifood_menu_mapping (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ifood_item_id VARCHAR(100) NOT NULL,\n    ifood_category_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_mapping (tenant_id, menu_item_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de webhooks recebidos\nCREATE TABLE webhooks (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    source VARCHAR(50) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    webhook_id VARCHAR(100) NOT NULL,\n    payload JSON NOT NULL,\n    processed BOOLEAN DEFAULT FALSE,\n    error_message TEXT DEFAULT NULL,\n    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Marketing e Comunica\u00e7\u00e3o\n-- -----------------------------------------------------\n\n-- Tabela de campanhas de marketing\nCREATE TABLE marketing_campaigns (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    campaign_type ENUM('email', 'sms', 'push', 'in_app', 'multi_channel') NOT NULL,\n    target_audience JSON DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    content JSON NOT NULL,\n    metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de mensagens enviadas\nCREATE TABLE sent_messages (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    campaign_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    message_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    recipient VARCHAR(100) NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('sent', 'delivered', 'opened', 'clicked', 'bounced', 'failed') DEFAULT 'sent',\n    status_updated_at TIMESTAMP NULL DEFAULT NULL,\n    tracking_data JSON DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (campaign_id) REFERENCES marketing_campaigns(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de modelos de comunica\u00e7\u00e3o\nCREATE TABLE message_templates (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    template_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    variables JSON DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00f5es Fiscais\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es fiscais\nCREATE TABLE fiscal_settings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    company_tax_regime VARCHAR(50) DEFAULT NULL,\n    tax_id VARCHAR(50) DEFAULT NULL,\n    state_tax_id VARCHAR(50) DEFAULT NULL,\n    municipal_tax_id VARCHAR(50) DEFAULT NULL,\n    tax_rates JSON DEFAULT NULL,\n    fiscal_printer_model VARCHAR(100) DEFAULT NULL,\n    fiscal_printer_serial VARCHAR(100) DEFAULT NULL,\n    nfce_token VARCHAR(255) DEFAULT NULL,\n    nfce_certificate VARCHAR(255) DEFAULT NULL,\n    nfce_environment ENUM('production', 'sandbox') DEFAULT 'sandbox',\n    nfce_series INT UNSIGNED DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de notas fiscais\nCREATE TABLE fiscal_receipts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    receipt_type ENUM('nfce', 'nfe', 'sat', 'nfse') NOT NULL,\n    receipt_number VARCHAR(50) NOT NULL,\n    receipt_series VARCHAR(10) DEFAULT NULL,\n    receipt_key VARCHAR(100) DEFAULT NULL,\n    status ENUM('pending', 'issued', 'cancelled', 'error') DEFAULT 'pending',\n    issue_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_reason TEXT DEFAULT NULL,\n    receipt_url VARCHAR(255) DEFAULT NULL,\n    receipt_data JSON DEFAULT NULL,\n    qr_code TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de c\u00f3digo de produtos fiscais\nCREATE TABLE fiscal_item_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ncm VARCHAR(20) DEFAULT NULL,\n    cest VARCHAR(20) DEFAULT NULL,\n    cfop VARCHAR(10) DEFAULT NULL,\n    icms_rate DECIMAL(5, 2) DEFAULT NULL,\n    pis_rate DECIMAL(5, 2) DEFAULT NULL,\n    cofins_rate DECIMAL(5, 2) DEFAULT NULL,\n    iss_rate DECIMAL(5, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Dados iniciais\n-- -----------------------------------------------------\n\n-- Inserir planos de assinatura\nINSERT INTO plans (name, code, description, price, billing_cycle, features, limits, active) VALUES\n('Plano B\u00e1sico', 'basic', 'Ideal para pequenos estabelecimentos com funcionalidades essenciais', 99.90, 'monthly', \n '[\"qrcode_basic\", \"basic_reports\"]', \n '{\"max_tables\": 10, \"max_users\": 5, \"max_menu_items\": 50, \"max_monthly_orders\": 500}', \n true),\n('Plano Padr\u00e3o', 'standard', 'Perfeito para restaurantes de m\u00e9dio porte com recursos completos', 199.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\"]', \n '{\"max_tables\": 25, \"max_users\": 15, \"max_menu_items\": 150, \"max_monthly_orders\": 2000}', \n true),\n('Plano Premium', 'premium', 'Solu\u00e7\u00e3o completa para grandes estabelecimentos com funcionalidades avan\u00e7adas', 349.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\"]', \n '{\"max_tables\": 50, \"max_users\": 30, \"max_menu_items\": 300, \"max_monthly_orders\": 5000}', \n true),\n('Plano Enterprise', 'enterprise', 'Solu\u00e7\u00e3o personalizada para redes de restaurantes e franquias', 599.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\", \"api_access\", \"custom_integrations\"]', \n '{\"max_tables\": -1, \"max_users\": -1, \"max_menu_items\": -1, \"max_monthly_orders\": -1}', \n true);\n\n-- Inserir usu\u00e1rio admin para testes (senha: admin123)\nINSERT INTO users (username, email, password, name, role, active, email_verified) VALUES\n('admin', 'admin@restaurantesaas.com.br', '$2y$12$WxkpKAQQ1RBoOaNUvDH4R.UJYPzMvEVDkn5P3nCWfxmYUQQeMLOsW', 'Administrador', 'platform_admin', true, true);\n\n-- Inserir permiss\u00f5es b\u00e1sicas\nINSERT INTO permissions (name, description) VALUES\n('view_dashboard', 'Visualizar dashboard'),\n('manage_menu', 'Gerenciar card\u00e1pio'),\n('manage_orders', 'Gerenciar pedidos'),\n('manage_tables', 'Gerenciar mesas'),\n('manage_inventory', 'Gerenciar estoque'),\n('manage_staff', 'Gerenciar funcion\u00e1rios'),\n('manage_customers', 'Gerenciar clientes'),\n('manage_payments', 'Gerenciar pagamentos'),\n('view_reports', 'Visualizar relat\u00f3rios'),\n('manage_settings', 'Gerenciar configura\u00e7\u00f5es'),\n('manage_integrations', 'Gerenciar integra\u00e7\u00f5es'),\n('admin_access', 'Acesso administrativo completo');\n\n2. **Estrutura de Diret\u00f3rios (100%)**\n\n#!/bin/bash\n\n# Criar diret\u00f3rio raiz\nmkdir -p restaurante-sistema\n\n# Criar estrutura de assets\nmkdir -p restaurante-sistema/assets/css/restaurant-types\nmkdir -p restaurante-sistema/assets/js/restaurant-types\nmkdir -p restaurante-sistema/assets/images/logo\nmkdir -p restaurante-sistema/assets/images/icons/{menu,status,actions,payment,subscription}\nmkdir -p restaurante-sistema/assets/images/menu\nmkdir -p restaurante-sistema/assets/images/ui\nmkdir -p restaurante-sistema/assets/images/plans\nmkdir -p restaurante-sistema/assets/images/restaurant-types/{alacarte,fastfood,pizzaria}\nmkdir -p restaurante-sistema/assets/fonts\n\n# Criar arquivos CSS\ntouch restaurante-sistema/assets/css/main.css\ntouch restaurante-sistema/assets/css/login.css\ntouch restaurante-sistema/assets/css/dashboard.css\ntouch restaurante-sistema/assets/css/tables.css\ntouch restaurante-sistema/assets/css/menu.css\ntouch restaurante-sistema/assets/css/kitchen.css\ntouch restaurante-sistema/assets/css/reports.css\ntouch restaurante-sistema/assets/css/ponto.css\ntouch restaurante-sistema/assets/css/fornecedores.css\ntouch restaurante-sistema/assets/css/customer-mobile.css\ntouch restaurante-sistema/assets/css/subscription.css\ntouch restaurante-sistema/assets/css/pricing.css\ntouch restaurante-sistema/assets/css/billing.css\ntouch restaurante-sistema/assets/css/onboarding.css\n\n# Criar arquivos CSS espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/css/restaurant-types/alacarte.css\ntouch restaurante-sistema/assets/css/restaurant-types/fastfood.css\ntouch restaurante-sistema/assets/css/restaurant-types/pizzaria.css\ntouch restaurante-sistema/assets/css/restaurant-types/rodizio.css\ntouch restaurante-sistema/assets/css/restaurant-types/selfservice.css\ntouch restaurante-sistema/assets/css/restaurant-types/delivery.css\ntouch restaurante-sistema/assets/css/restaurant-types/foodtruck.css\ntouch restaurante-sistema/assets/css/restaurant-types/bar.css\ntouch restaurante-sistema/assets/css/restaurant-types/cafeteria.css\ntouch restaurante-sistema/assets/css/restaurant-types/multiunit.css\n\n# Criar arquivos JavaScript\ntouch restaurante-sistema/assets/js/main.js\ntouch restaurante-sistema/assets/js/login.js\ntouch restaurante-sistema/assets/js/dashboard.js\ntouch restaurante-sistema/assets/js/tables.js\ntouch restaurante-sistema/assets/js/orders.js\ntouch restaurante-sistema/assets/js/menu.js\ntouch restaurante-sistema/assets/js/kitchen.js\ntouch restaurante-sistema/assets/js/inventory.js\ntouch restaurante-sistema/assets/js/payments.js\ntouch restaurante-sistema/assets/js/stripe-integration.js\ntouch restaurante-sistema/assets/js/subscription.js\ntouch restaurante-sistema/assets/js/pricing-calculator.js\ntouch restaurante-sistema/assets/js/billing-portal.js\ntouch restaurante-sistema/assets/js/charts.js\ntouch restaurante-sistema/assets/js/ponto.js\ntouch restaurante-sistema/assets/js/supplier-manager.js\ntouch restaurante-sistema/assets/js/group-orders.js\ntouch restaurante-sistema/assets/js/bill-splitter.js\ntouch restaurante-sistema/assets/js/onboarding.js\n\n# Criar arquivos JavaScript espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/js/restaurant-types/alacarte.js\ntouch restaurante-sistema/assets/js/restaurant-types/fastfood.js\ntouch restaurante-sistema/assets/js/restaurant-types/pizzaria.js\ntouch restaurante-sistema/assets/js/restaurant-types/rodizio.js\ntouch restaurante-sistema/assets/js/restaurant-types/selfservice.js\ntouch restaurante-sistema/assets/js/restaurant-types/delivery.js\ntouch restaurante-sistema/assets/js/restaurant-types/multiunit.js\n\n# Criar estrutura de config\nmkdir -p restaurante-sistema/config\ntouch restaurante-sistema/config/database.php\ntouch restaurante-sistema/config/constants.php\ntouch restaurante-sistema/config/stripe.php\ntouch restaurante-sistema/config/email.php\ntouch restaurante-sistema/config/sms.php\ntouch restaurante-sistema/config/qrcode.php\ntouch restaurante-sistema/config/ifood.php\ntouch restaurante-sistema/config/restaurant_types.php\ntouch restaurante-sistema/config/interface_settings.php\ntouch restaurante-sistema/config/order_methods.php\ntouch restaurante-sistema/config/subscription_plans.php\ntouch restaurante-sistema/config/tenant.php\ntouch restaurante-sistema/config/feature_limits.php\n\n# Criar estrutura de controllers\nmkdir -p restaurante-sistema/controllers/subscription\nmkdir -p restaurante-sistema/controllers/DashboardController/{AlacarteDashboardController.php,FastFoodDashboardController.php,PizzariaDashboardController.php,RodizioDashboardController.php,DeliveryDashboardController.php}\nmkdir -p restaurante-sistema/controllers/OrderController\nmkdir -p restaurante-sistema/controllers/MenuController\nmkdir -p restaurante-sistema/controllers/PaymentController\nmkdir -p restaurante-sistema/controllers/SupplierController\nmkdir -p restaurante-sistema/controllers/StaffController\n\ntouch restaurante-sistema/controllers/AuthController.php\ntouch restaurante-sistema/controllers/SubscriptionController.php\ntouch restaurante-sistema/controllers/subscription/PlansController.php\ntouch restaurante-sistema/controllers/subscription/BillingController.php\ntouch restaurante-sistema/controllers/subscription/FeatureController.php\ntouch restaurante-sistema/controllers/TenantController.php\ntouch restaurante-sistema/controllers/OnboardingController.php\ntouch restaurante-sistema/controllers/DashboardController.php\ntouch restaurante-sistema/controllers/TableController.php\ntouch restaurante-sistema/controllers/OrderController.php\ntouch restaurante-sistema/controllers/OrderController/SingleOrderController.php\ntouch restaurante-sistema/controllers/OrderController/GroupOrderController.php\ntouch restaurante-sistema/controllers/MenuController.php\ntouch restaurante-sistema/controllers/MenuController/AlacarteMenuController.php\ntouch restaurante-sistema/controllers/MenuController/FastFoodMenuController.php\ntouch restaurante-sistema/controllers/MenuController/PizzariaMenuController.php\ntouch restaurante-sistema/controllers/MenuController/RodizioMenuController.php\ntouch restaurante-sistema/controllers/MenuController/SelfServiceMenuController.php\ntouch restaurante-sistema/controllers/KitchenController.php\ntouch restaurante-sistema/controllers/InventoryController.php\ntouch restaurante-sistema/controllers/PaymentController.php\ntouch restaurante-sistema/controllers/PaymentController/BillSplitController.php\ntouch restaurante-sistema/controllers/ReportController.php\ntouch restaurante-sistema/controllers/iFoodController.php\ntouch restaurante-sistema/controllers/SupplierController.php\ntouch restaurante-sistema/controllers/SupplierController/QuickOrderController.php\ntouch restaurante-sistema/controllers/StaffController.php\ntouch restaurante-sistema/controllers/StaffController/TimeClockController.php\ntouch restaurante-sistema/controllers/CustomerController.php\ntouch restaurante-sistema/controllers/QRCodeController.php\ntouch restaurante-sistema/controllers/RestaurantTypeController.php\ntouch restaurante-sistema/controllers/SettingsController.php\n\n# Criar estrutura de models\nmkdir -p restaurante-sistema/models/Account\nmkdir -p restaurante-sistema/models/Order\nmkdir -p restaurante-sistema/models/MenuItem\nmkdir -p restaurante-sistema/models/Inventory\nmkdir -p restaurante-sistema/models/Payment\nmkdir -p restaurante-sistema/models/Staff\nmkdir -p restaurante-sistema/models/Supplier\nmkdir -p restaurante-sistema/models/Customer\n\ntouch restaurante-sistema/models/User.php\ntouch restaurante-sistema/models/Account.php\ntouch restaurante-sistema/models/Account/Subscription.php\ntouch restaurante-sistema/models/Account/Plan.php\ntouch restaurante-sistema/models/Account/Invoice.php\ntouch restaurante-sistema/models/Account/Usage.php\ntouch restaurante-sistema/models/Tenant.php\ntouch restaurante-sistema/models/Restaurant.php\ntouch restaurante-sistema/models/RestaurantType.php\ntouch restaurante-sistema/models/CashRegister.php\ntouch restaurante-sistema/models/Table.php\ntouch restaurante-sistema/models/Order.php\ntouch restaurante-sistema/models/Order/SingleOrder.php\ntouch restaurante-sistema/models/Order/GroupOrder.php\ntouch restaurante-sistema/models/OrderItem.php\ntouch restaurante-sistema/models/MenuItem.php\ntouch restaurante-sistema/models/MenuItem/AlacarteMenuItem.php\ntouch restaurante-sistema/models/MenuItem/FastFoodMenuItem.php\ntouch restaurante-sistema/models/MenuItem/PizzaMenuItem.php\ntouch restaurante-sistema/models/MenuItem/RodizioMenuItem.php\ntouch restaurante-sistema/models/Inventory.php\ntouch restaurante-sistema/models/Inventory/StockMovement.php\ntouch restaurante-sistema/models/Reservation.php\ntouch restaurante-sistema/models/Payment.php\ntouch restaurante-sistema/models/Payment/BillSplit.php\ntouch restaurante-sistema/models/Staff.php\ntouch restaurante-sistema/models/Staff/TimeClock.php\ntouch restaurante-sistema/models/Supplier.php\ntouch restaurante-sistema/models/Supplier/SupplierContact.php\ntouch restaurante-sistema/models/Supplier/SupplierOrder.php\ntouch restaurante-sistema/models/Supplier/SupplierRating.php\ntouch restaurante-sistema/models/Customer.php\ntouch restaurante-sistema/models/Customer/LoyaltyProgram.php\ntouch restaurante-sistema/models/MarketingCampaign.php\ntouch restaurante-sistema/models/QRCode.php\ntouch restaurante-sistema/models/RestaurantConfiguration.php\ntouch restaurante-sistema/models/RestaurantInterface.php\n\n# Criar estrutura de views\nmkdir -p restaurante-sistema/views/auth\nmkdir -p restaurante-sistema/views/subscription\nmkdir -p restaurante-sistema/views/onboarding\nmkdir -p restaurante-sistema/views/dashboard/{alacarte,fastfood,pizzaria,rodizio,selfservice,delivery,multiunit}\nmkdir -p restaurante-sistema/views/tables\nmkdir -p restaurante-sistema/views/menu/types\nmkdir -p restaurante-sistema/views/kitchen/types\nmkdir -p restaurante-sistema/views/inventory\nmkdir -p restaurante-sistema/views/payments\nmkdir -p restaurante-sistema/views/reports/types\nmkdir -p restaurante-sistema/views/ifood\nmkdir -p restaurante-sistema/views/suppliers\nmkdir -p restaurante-sistema/views/staff/time-clock\nmkdir -p restaurante-sistema/views/customers\nmkdir -p restaurante-sistema/views/marketing\nmkdir -p restaurante-sistema/views/qrcode\nmkdir -p restaurante-sistema/views/admin\nmkdir -p restaurante-sistema/views/settings\n\n# Criar arquivos de views de autentica\u00e7\u00e3o\ntouch restaurante-sistema/views/auth/login.php\ntouch restaurante-sistema/views/auth/reset-password.php\ntouch restaurante-sistema/views/auth/register.php\n\n# Criar arquivos de views de assinatura\ntouch restaurante-sistema/views/subscription/plans.php\ntouch restaurante-sistema/views/subscription/checkout.php\ntouch restaurante-sistema/views/subscription/success.php\ntouch restaurante-sistema/views/subscription/billing.php\ntouch restaurante-sistema/views/subscription/upgrade.php\ntouch restaurante-sistema/views/subscription/downgrade.php\ntouch restaurante-sistema/views/subscription/cancel.php\ntouch restaurante-sistema/views/subscription/payment-methods.php\n\n# Criar arquivos de views de onboarding\ntouch restaurante-sistema/views/onboarding/welcome.php\ntouch restaurante-sistema/views/onboarding/restaurant-type.php\ntouch restaurante-sistema/views/onboarding/restaurant-comparison.php\ntouch restaurante-sistema/views/onboarding/basic-info.php\ntouch restaurante-sistema/views/onboarding/menu-setup.php\ntouch restaurante-sistema/views/onboarding/operating-hours.php\ntouch restaurante-sistema/views/onboarding/table-setup.php\ntouch restaurante-sistema/views/onboarding/staff-roles.php\ntouch restaurante-sistema/views/onboarding/payment-options.php\ntouch restaurante-sistema/views/onboarding/finalize.php\n\n# Criar arquivos de views de dashboard\ntouch restaurante-sistema/views/dashboard/index.php\ntouch restaurante-sistema/views/dashboard/account-status.php\ntouch restaurante-sistema/views/dashboard/alacarte/index.php\ntouch restaurante-sistema/views/dashboard/alacarte/tables.php\ntouch restaurante-sistema/views/dashboard/fastfood/index.php\ntouch restaurante-sistema/views/dashboard/fastfood/queue.php\ntouch restaurante-sistema/views/dashboard/pizzaria/index.php\ntouch restaurante-sistema/views/dashboard/pizzaria/pizza-builder.php\ntouch restaurante-sistema/views/dashboard/rodizio/index.php\ntouch restaurante-sistema/views/dashboard/rodizio/rounds.php\ntouch restaurante-sistema/views/dashboard/selfservice/index.php\ntouch restaurante-sistema/views/dashboard/selfservice/scales.php\ntouch restaurante-sistema/views/dashboard/delivery/index.php\ntouch restaurante-sistema/views/dashboard/delivery/routes.php\ntouch restaurante-sistema/views/dashboard/multiunit/index.php\ntouch restaurante-sistema/views/dashboard/multiunit/units.php\n\n# Criar mais arquivos de views (continua\u00e7\u00e3o)\ntouch restaurante-sistema/views/tables/map.php\ntouch restaurante-sistema/views/tables/order.php\ntouch restaurante-sistema/views/tables/multi-user.php\n\ntouch restaurante-sistema/views/menu/admin.php\ntouch restaurante-sistema/views/menu/editor.php\ntouch restaurante-sistema/views/menu/customer.php\ntouch restaurante-sistema/views/menu/category-manager.php\ntouch restaurante-sistema/views/menu/promotions.php\ntouch restaurante-sistema/views/menu/types/alacarte.php\ntouch restaurante-sistema/views/menu/types/fastfood.php\ntouch restaurante-sistema/views/menu/types/pizzaria.php\ntouch restaurante-sistema/views/menu/types/rodizio.php\ntouch restaurante-sistema/views/menu/types/selfservice.php\n\ntouch restaurante-sistema/views/kitchen/panel.php\ntouch restaurante-sistema/views/kitchen/inventory-usage.php\ntouch restaurante-sistema/views/kitchen/types/alacarte.php\ntouch restaurante-sistema/views/kitchen/types/fastfood.php\ntouch restaurante-sistema/views/kitchen/types/pizzaria.php\ntouch restaurante-sistema/views/kitchen/types/rodizio.php\n\ntouch restaurante-sistema/views/inventory/management.php\ntouch restaurante-sistema/views/inventory/movements.php\ntouch restaurante-sistema/views/inventory/alerts.php\n\ntouch restaurante-sistema/views/payments/process.php\ntouch restaurante-sistema/views/payments/receipt.php\ntouch restaurante-sistema/views/payments/split-bill.php\ntouch restaurante-sistema/views/payments/group-payment.php\n\ntouch restaurante-sistema/views/reports/sales.php\ntouch restaurante-sistema/views/reports/cash.php\ntouch restaurante-sistema/views/reports/performance.php\ntouch restaurante-sistema/views/reports/financial.php\ntouch restaurante-sistema/views/reports/types/alacarte.php\ntouch restaurante-sistema/views/reports/types/fastfood.php\ntouch restaurante-sistema/views/reports/types/pizzaria.php\ntouch restaurante-sistema/views/reports/types/rodizio.php\ntouch restaurante-sistema/views/reports/types/delivery.php\n\ntouch restaurante-sistema/views/ifood/orders.php\n\ntouch restaurante-sistema/views/suppliers/list.php\ntouch restaurante-sistema/views/suppliers/details.php\ntouch restaurante-sistema/views/suppliers/quick-order.php\ntouch restaurante-sistema/views/suppliers/history.php\ntouch restaurante-sistema/views/suppliers/ratings.php\n\ntouch restaurante-sistema/views/staff/list.php\ntouch restaurante-sistema/views/staff/details.php\ntouch restaurante-sistema/views/staff/schedule.php\ntouch restaurante-sistema/views/staff/time-clock/register.php\ntouch restaurante-sistema/views/staff/time-clock/management.php\ntouch restaurante-sistema/views/staff/time-clock/reports.php\n\ntouch restaurante-sistema/views/customers/list.php\ntouch restaurante-sistema/views/customers/details.php\ntouch restaurante-sistema/views/customers/loyalty.php\n\ntouch restaurante-sistema/views/marketing/campaigns.php\ntouch restaurante-sistema/views/marketing/promotions.php\n\ntouch restaurante-sistema/views/qrcode/generator.php\ntouch restaurante-sistema/views/qrcode/manager.php\ntouch restaurante-sistema/views/qrcode/preview.php\n\ntouch restaurante-sistema/views/admin/accounts.php\ntouch restaurante-sistema/views/admin/plans.php\ntouch restaurante-sistema/views/admin/statistics.php\ntouch restaurante-sistema/views/admin/support.php\ntouch restaurante-sistema/views/admin/settings.php\n\ntouch restaurante-sistema/views/settings/general.php\ntouch restaurante-sistema/views/settings/restaurant-type.php\ntouch restaurante-sistema/views/settings/interfaces.php\ntouch restaurante-sistema/views/settings/qrcode.php\ntouch restaurante-sistema/views/settings/group-orders.php\ntouch restaurante-sistema/views/settings/time-clock.php\ntouch restaurante-sistema/views/settings/integrations.php\ntouch restaurante-sistema/views/settings/account.php\ntouch restaurante-sistema/views/settings/backup.php\n\n# Criar estrutura de includes\nmkdir -p restaurante-sistema/includes\ntouch restaurante-sistema/includes/functions.php\ntouch restaurante-sistema/includes/validation.php\ntouch restaurante-sistema/includes/session.php\ntouch restaurante-sistema/includes/security.php\ntouch restaurante-sistema/includes/currency.php\ntouch restaurante-sistema/includes/date.php\ntouch restaurante-sistema/includes/notification.php\ntouch restaurante-sistema/includes/restaurant-type-helper.php\ntouch restaurante-sistema/includes/interface-loader.php\ntouch restaurante-sistema/includes/tenant-resolver.php\ntouch restaurante-sistema/includes/feature-checker.php\ntouch restaurante-sistema/includes/subscription-helper.php\n\n# Criar estrutura de API\nmkdir -p restaurante-sistema/api/subscription\nmkdir -p restaurante-sistema/api/orders\nmkdir -p restaurante-sistema/api/payments\nmkdir -p restaurante-sistema/api/staff\n\ntouch restaurante-sistema/api/auth.php\ntouch restaurante-sistema/api/subscription.php\ntouch restaurante-sistema/api/subscription/plans.php\ntouch restaurante-sistema/api/subscription/webhooks.php\ntouch restaurante-sistema/api/subscription/billing.php\ntouch restaurante-sistema/api/tables.php\ntouch restaurante-sistema/api/orders.php\ntouch restaurante-sistema/api/orders/group-orders.php\ntouch restaurante-sistema/api/menu.php\ntouch restaurante-sistema/api/payments.php\ntouch restaurante-sistema/api/payments/bill-split.php\ntouch restaurante-sistema/api/ifood.php\ntouch restaurante-sistema/api/suppliers.php\ntouch restaurante-sistema/api/staff.php\ntouch restaurante-sistema/api/staff/time-clock.php\ntouch restaurante-sistema/api/customers.php\ntouch restaurante-sistema/api/reports.php\ntouch restaurante-sistema/api/qrcode.php\ntouch restaurante-sistema/api/restaurant-type.php\n\n# Criar estrutura de services\nmkdir -p restaurante-sistema/services\ntouch restaurante-sistema/services/StripeService.php\ntouch restaurante-sistema/services/SubscriptionService.php\ntouch restaurante-sistema/services/BillingService.php\ntouch restaurante-sistema/services/TenantService.php\ntouch restaurante-sistema/services/FeatureLimitService.php\ntouch restaurante-sistema/services/QRCodeService.php\ntouch restaurante-sistema/services/PDFService.php\ntouch restaurante-sistema/services/iFoodService.php\ntouch restaurante-sistema/services/EmailService.php\ntouch restaurante-sistema/services/SMSService.php\ntouch restaurante-sistema/services/NotificationService.php\ntouch restaurante-sistema/services/ChartService.php\ntouch restaurante-sistema/services/BackupService.php\ntouch restaurante-sistema/services/RestaurantTypeService.php\ntouch restaurante-sistema/services/InterfaceService.php\ntouch restaurante-sistema/services/ScaleService.php\ntouch restaurante-sistema/services/DeliveryTrackingService.php\ntouch restaurante-sistema/services/RodizioTrackingService.php\n\n# Criar estrutura de database\nmkdir -p restaurante-sistema/database/migrations\nmkdir -p restaurante-sistema/database/seeds\n\ntouch restaurante-sistema/database/migrations/create_tenants_table.php\ntouch restaurante-sistema/database/migrations/create_accounts_table.php\ntouch restaurante-sistema/database/migrations/create_subscriptions_table.php\ntouch restaurante-sistema/database/migrations/create_plans_table.php\ntouch restaurante-sistema/database/migrations/create_invoices_table.php\ntouch restaurante-sistema/database/migrations/create_usage_logs_table.php\ntouch restaurante-sistema/database/migrations/create_users_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_types_table.php\ntouch restaurante-sistema/database/migrations/create_restaurants_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_configurations_table.php\ntouch restaurante-sistema/database/migrations/create_tables_table.php\ntouch restaurante-sistema/database/migrations/create_menu_items_table.php\ntouch restaurante-sistema/database/migrations/create_orders_table.php\ntouch restaurante-sistema/database/migrations/create_order_items_table.php\ntouch restaurante-sistema/database/migrations/create_inventory_table.php\ntouch restaurante-sistema/database/migrations/create_customers_table.php\ntouch restaurante-sistema/database/migrations/create_staff_table.php\ntouch restaurante-sistema/database/migrations/create_time_clock_table.php\ntouch restaurante-sistema/database/migrations/create_suppliers_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_orders_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_contacts_table.php\ntouch restaurante-sistema/database/migrations/create_payments_table.php\ntouch restaurante-sistema/database/migrations/create_bill_splits_table.php\ntouch restaurante-sistema/database/migrations/create_qrcodes_table.php\n\ntouch restaurante-sistema/database/seeds/plans_seeder.php\ntouch restaurante-sistema/database/seeds/features_seeder.php\ntouch restaurante-sistema/database/seeds/users_seeder.php\ntouch restaurante-sistema/database/seeds/restaurant_types_seeder.php\ntouch restaurante-sistema/database/seeds/menu_items_seeder.php\ntouch restaurante-sistema/database/seeds/suppliers_seeder.php\ntouch restaurante-sistema/database/seeds/staff_seeder.php\n\n# Criar estrutura de public\nmkdir -p restaurante-sistema/public/webhook\nmkdir -p restaurante-sistema/public/qr/tables\nmkdir -p restaurante-sistema/public/receipt\n\ntouch restaurante-sistema/public/index.php\ntouch restaurante-sistema/public/pricing.php\ntouch restaurante-sistema/public/register.php\ntouch restaurante-sistema/public/customer-menu.php\ntouch restaurante-sistema/public/group-order.php\ntouch restaurante-sistema/public/time-clock.php\ntouch restaurante-sistema/public/webhook/stripe.php\ntouch restaurante-sistema/public/.htaccess\n\n# Criar estrutura de mobile\nmkdir -p restaurante-sistema/mobile/types\nmkdir -p restaurante-sistema/mobile/staff\n\ntouch restaurante-sistema/mobile/index.php\ntouch restaurante-sistema/mobile/menu.php\ntouch restaurante-sistema/mobile/order.php\ntouch restaurante-sistema/mobile/group-order.php\ntouch restaurante-sistema/mobile/payment.php\ntouch restaurante-sistema/mobile/types/alacarte.php\ntouch restaurante-sistema/mobile/types/fastfood.php\ntouch restaurante-sistema/mobile/types/pizzaria.php\ntouch restaurante-sistema/mobile/types/rodizio.php\ntouch restaurante-sistema/mobile/staff/time-clock.php\n\n# Criar estrutura de docs\nmkdir -p restaurante-sistema/docs/restaurant-types\n\ntouch restaurante-sistema/docs/setup.md\ntouch restaurante-sistema/docs/admin-guide.md\ntouch restaurante-sistema/docs/user-guide.md\ntouch restaurante-sistema/docs/api-docs.md\ntouch restaurante-sistema/docs/database-schema.md\ntouch restaurante-sistema/docs/subscription.md\ntouch restaurante-sistema/docs/restaurant-types/alacarte.md\ntouch restaurante-sistema/docs/restaurant-types/fastfood.md\ntouch restaurante-sistema/docs/restaurant-types/pizzaria.md\n\n# Criar estrutura de tests\nmkdir -p restaurante-sistema/tests/unit/subscription\nmkdir -p restaurante-sistema/tests/integration\nmkdir -p restaurante-sistema/tests/acceptance\n\n# Criar estrutura de vendor (diret\u00f3rio vazio para Composer)\nmkdir -p restaurante-sistema/vendor\n\n# Criar arquivos raiz\ntouch restaurante-sistema/.htaccess\ntouch restaurante-sistema/index.php\ntouch restaurante-sistema/composer.json\ntouch restaurante-sistema/package.json\ntouch restaurante-sistema/README.md\ntouch restaurante-sistema/LICENSE\ntouch restaurante-sistema/.gitignore\n\n\ntudo acima meno o banco de dados precisar ser criado, incluindo o diret\u00f3rio\n\n# CHECKPOINT DE DESENVOLVIMENTO - SISTEMA DE GEST\u00c3O DE RESTAURANTES SAAS\n\n## PROGRESSO ATUAL: 0% CONCLU\u00cdDO\n\n\nEste checkpoint resume o progresso atual e define claramente os pr\u00f3ximos passos para o desenvolvimento. Em sua pr\u00f3xima conversa, voc\u00ea pode continuar a partir deste ponto, concentrando-se na implementa\u00e7\u00e3o dos m\u00f3dulos listados acima.\n\n\n\n\n\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\n- /core/config/app.php\n- restaurante-sistema/core/Router.php\n- restaurante-sistema/core/Controller.php\n- restaurante-sistema/core/View.php\n- restaurante-sistema/core/Response.php\n- restaurante-sistema/core/ErrorHandler.php\n- restaurante-sistema/restaurante-sistema/core/Database/MigrationManager.php\n- restaurante-sistema/restaurante-sistema/core/Database/Migration.php\n- restaurante-sistema/restaurante-sistema/migrate.php\n- restaurante-sistema/restaurante-sistema/database/migrations/001_create_tenants_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/002_create_users_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/003_create_roles_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/004_create_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/006_create_access_logs_table.php\n- restaurante-sistema/restaurante-sistema/models/User.php\n- restaurante-sistema/restaurante-sistema/controllers/AuthController.php\n- restaurante-sistema/Migration Manager\n- restaurante-sistema/Base Migration Class\n- restaurante-sistema/CLI Migration Runner\n- restaurante-sistema/Actual Migration Files\n- restaurante-sistema/Modelo de Usu\u00e1rio\n- restaurante-sistema/Controlador de Autentica\u00e7\u00e3o\n- restaurante-sistema/core/Database/MigrationManager.php\n- restaurante-sistema/core/Database/Migration.php\n- restaurante-sistema/migrate.php\n- restaurante-sistema/database/migrations/001_create_tenants_table.php\n- restaurante-sistema/database/migrations/002_create_users_table.php\n- restaurante-sistema/database/migrations/003_create_roles_table.php\n- restaurante-sistema/database/migrations/004_create_permissions_table.php\n- restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n- restaurante-sistema/database/migrations/006_create_access_logs_table.php\n\n## Requisitos para o Pr\u00f3ximo Passo\n# Desenvolvimento do Sistema SaaS de Restaurantes - Pr\u00f3ximos 10%\n\nAvan\u00e7amos com o m\u00f3dulo core e o sistema de migrations, agora precisamos implementar componentes funcionais do sistema que permitam o cadastro de restaurantes, configura\u00e7\u00e3o de perfis e in\u00edcio da experi\u00eancia do usu\u00e1rio. Vamos focar nos pr\u00f3ximos 10% do projeto.\n\n## REQUISITOS PARA ESTA FASE\n\n### 1. Sistema de Onboarding de Restaurantes\n\n#### 1.1 Fluxo de Registro de Novos Restaurantes\n- Implementar o processo completo de registro, desde o formul\u00e1rio inicial at\u00e9 a confirma\u00e7\u00e3o\n- Criar p\u00e1ginas de sele\u00e7\u00e3o de tipo de restaurante (\u00e0 la carte, fast food, pizzaria, rod\u00edzio)\n- Desenvolver sistema de verifica\u00e7\u00e3o de dom\u00ednio/subdom\u00ednio\n- Implementar gera\u00e7\u00e3o autom\u00e1tica de subdom\u00ednios baseados no nome do restaurante\n\n#### 1.2 Configura\u00e7\u00e3o do Restaurante\n- Criar assistente de configura\u00e7\u00e3o inicial (wizard)\n- Implementar p\u00e1ginas para configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas (nome, endere\u00e7o, logo, etc.)\n- Desenvolver configura\u00e7\u00e3o de hor\u00e1rio de funcionamento\n- Criar m\u00f3dulo para upload e gerenciamento de imagens do restaurante\n\n### 2. Sistema de Perfis e Configura\u00e7\u00f5es\n\n#### 2.1 Perfis de Restaurante\n- Implementar modelo e controlador para configura\u00e7\u00f5es espec\u00edficas por tipo de restaurante\n- Criar interfaces adapt\u00e1veis para diferentes tipos de estabelecimentos\n- Desenvolver sistema de features ativadas de acordo com tipo de restaurante\n- Implementar temas e estilos visuais por tipo de estabelecimento\n\n#### 2.2 Gerenciamento de Fun\u00e7\u00f5es e Permiss\u00f5es\n- Completar o CRUD de fun\u00e7\u00f5es (roles) para o restaurante\n- Implementar interface para atribui\u00e7\u00e3o de permiss\u00f5es\n- Criar fun\u00e7\u00f5es padr\u00e3o (admin, gerente, gar\u00e7om, cozinheiro, caixa, etc.)\n- Desenvolver middleware para verifica\u00e7\u00e3o de permiss\u00f5es nas rotas\n\n### 3. Interface de Administra\u00e7\u00e3o\n\n#### 3.1 Dashboard Administrativo\n- Implementar dashboard personalizado por tipo de restaurante\n- Criar blocos de informa\u00e7\u00f5es r\u00e1pidas (cards) para m\u00e9tricas principais\n- Desenvolver gr\u00e1ficos b\u00e1sicos para visualiza\u00e7\u00e3o de desempenho\n- Implementar menu de navega\u00e7\u00e3o principal do sistema\n\n#### 3.2 Pain\u00e9is de Configura\u00e7\u00e3o\n- Criar painel de configura\u00e7\u00f5es gerais do sistema\n- Implementar p\u00e1ginas de gerenciamento de usu\u00e1rios do restaurante\n- Desenvolver p\u00e1ginas de configura\u00e7\u00e3o de notifica\u00e7\u00f5es\n- Criar \u00e1rea para personaliza\u00e7\u00e3o de apar\u00eancia (logo, cores, etc.)\n\n### 4. QR Code B\u00e1sico\n\n#### 4.1 Gera\u00e7\u00e3o de QR Codes\n- Implementar servi\u00e7o para gera\u00e7\u00e3o de QR codes\n- Criar controle de vers\u00e3o para QR codes (para evitar c\u00f3digos antigos)\n- Desenvolver sistema de QR codes para mesas e \u00e1reas\n- Implementar visualiza\u00e7\u00e3o e impress\u00e3o de QR codes\n\n#### 4.2 Landing Page para QR Code\n- Criar p\u00e1gina de destino b\u00e1sica quando o QR code \u00e9 escaneado\n- Implementar detec\u00e7\u00e3o de dispositivo (mobile/desktop)\n- Desenvolver sistema para identifica\u00e7\u00e3o do restaurante e mesa pelo QR code\n- Criar p\u00e1gina de boas-vindas personalizada por restaurante\n\n## DIRETRIZES DE IMPLEMENTA\u00c7\u00c3O\n\n1. Seguir o padr\u00e3o MVC estritamente\n2. Utilizar namespace `RestauranteSaas\\[Module]\\[Component]`\n3. Garantir responsividade para todas as interfaces\n4. Implementar valida\u00e7\u00e3o de dados em todos os formul\u00e1rios\n5. Aplicar filtro de tenant em todas as consultas\n6. Documentar todas as classes e m\u00e9todos\n7. Tratar erros e exibir mensagens amig\u00e1veis ao usu\u00e1rio\n8. Implementar logging de a\u00e7\u00f5es importantes\n\n## FORMATO DE C\u00d3DIGO\n\nPara garantir a extra\u00e7\u00e3o correta dos arquivos, utilize exatamente este formato para cada arquivo:\n\n```php\n// File: caminho/do/arquivo.php\n// C\u00f3digo completo aqui\n```\n\n## ENTREG\u00c1VEIS ESPERADOS\n\n1. Sistema completo de registro e onboarding de restaurantes\n2. Interface administrativa b\u00e1sica funcionando\n3. Gerenciamento de perfis por tipo de restaurante\n4. Sistema de gera\u00e7\u00e3o e gerenciamento de QR codes\n5. P\u00e1ginas iniciais para acesso via QR code\n\nAten\u00e7\u00e3o \u00e0s camadas de abstra\u00e7\u00e3o adequadas para que o sistema possa atender diferentes tipos de restaurantes mantendo o c\u00f3digo coeso e de f\u00e1cil manuten\u00e7\u00e3o. Prepare o sistema pensando na escalabilidade \u00e0 medida que mais m\u00f3dulos forem adicionados nas pr\u00f3ximas fases.\n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# An\u00e1lise do Sistema de Gest\u00e3o de Restaurantes SaaS\n\nVejo que voc\u00ea est\u00e1 desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP e atualmente est\u00e1 trabalhando no m\u00f3dulo core do sistema. Analisando o checkpoint, voc\u00ea tem progresso de 0% e j\u00e1 criou v\u00e1rios arquivos importantes como Router, Controller, View, Response, ErrorHandler, MigrationManager, Migration e algumas migra\u00e7\u00f5es iniciais para tabelas essenciais.\n\nPara avan\u00e7ar com os 10% seguintes, precisamos implementar os componentes funcionais que permitir\u00e3o o cadastro de restaurantes, configura\u00e7\u00e3o de perfis e in\u00edcio da experi\u00eancia do usu\u00e1rio. Vamos come\u00e7ar com os arquivos do m\u00f3dulo core que ainda precisam ser implementados.\n\n## Implementa\u00e7\u00e3o do Sistema Core\n\n### Arquivo: core/App.php\n\n```php\n// File: core/App.php\n<?php\n\nnamespace RestauranteSaas\\Core;\n\nuse RestauranteSaas\\Core\\Database\\DatabaseConnection;\nuse RestauranteSaas\\Core\\Exceptions\\AppException;\n\n/**\n * Classe principal da aplica\u00e7\u00e3o\n * Respons\u00e1vel por inicializar todos os componentes e gerenciar o ciclo de vida da aplica\u00e7\u00e3o\n */\nclass App\n{\n    /**\n     * @var App Inst\u00e2ncia \u00fanica da aplica\u00e7\u00e3o\n     */\n    private static $instance = null;\n    \n    /**\n     * @var Router Roteador da aplica\u00e7\u00e3o\n     */\n    private $router;\n    \n    /**\n     * @var DatabaseConnection Conex\u00e3o com o banco de dados\n     */\n    private $db;\n    \n    /**\n     * @var array Configura\u00e7\u00f5es da aplica\u00e7\u00e3o\n     */\n    private $config;\n    \n    /**\n     * @var string Tenant atual (restaurante)\n     */\n    private $currentTenant = null;\n    \n    /**\n     * Construtor privado para Singleton\n     */\n    private function __construct()\n    {\n        // Carregar configura\u00e7\u00f5es\n        $this->loadConfig();\n        \n        // Inicializar componentes\n        $this->initializeComponents();\n        \n        // Configurar tratamento de erros\n        $this->setupErrorHandling();\n    }\n    \n    /**\n     * Obt\u00e9m a inst\u00e2ncia \u00fanica da aplica\u00e7\u00e3o\n     * \n     * @return App\n     */\n    public static function getInstance(): App\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n        \n        return self::$instance;\n    }\n    \n    /**\n     * Carrega as configura\u00e7\u00f5es da aplica\u00e7\u00e3o\n     */\n    private function loadConfig(): void\n    {\n        $configPath = __DIR__ . '/../config/app.php';\n        \n        if (!file_exists($configPath)) {\n            throw new AppException(\"Arquivo de configura\u00e7\u00e3o n\u00e3o encontrado: {$configPath}\");\n        }\n        \n        $this->config = require $configPath;\n    }\n    \n    /**\n     * Inicializa os componentes principais da aplica\u00e7\u00e3o\n     */\n    private function initializeComponents(): void\n    {\n        // Inicializar conex\u00e3o com o banco de dados\n        $this->db = new DatabaseConnection(\n            $this->config['database']['host'],\n            $this->config['database']['name'],\n            $this->config['database']['user'],\n            $this->config['database']['password']\n        );\n        \n        // Inicializar router\n        $this->router = new Router();\n    }\n    \n    /**\n     * Configura o tratamento de erros e exce\u00e7\u00f5es\n     */\n    private function setupErrorHandling(): void\n    {\n        $errorHandler = new ErrorHandler($this->config['debug'] ?? false);\n        $errorHandler->register();\n    }\n    \n    /**\n     * Inicia a aplica\u00e7\u00e3o, processa a requisi\u00e7\u00e3o atual e retorna a resposta\n     */\n    public function run(): void\n    {\n        // Iniciar sess\u00e3o\n        if (session_status() === PHP_SESSION_NONE) {\n            session_start();\n        }\n        \n        // Resolver tenant atual (para aplica\u00e7\u00f5es multi-tenant)\n        $this->resolveTenant();\n        \n        // Executar middleware global\n        $this->runGlobalMiddleware();\n        \n        // Processa a requisi\u00e7\u00e3o atrav\u00e9s do router\n        $response = $this->router->dispatch();\n        \n        // Enviar a resposta ao cliente\n        $response->send();\n    }\n    \n    /**\n     * Resolve o tenant atual com base no dom\u00ednio/subdom\u00ednio\n     */\n    private function resolveTenant(): void\n    {\n        if (!$this->config['multi_tenant']) {\n            return;\n        }\n        \n        $host = $_SERVER['HTTP_HOST'] ?? '';\n        \n        // Verifica se estamos em um subdom\u00ednio\n        if ($this->config['tenant_mode'] === 'subdomain') {\n            $parts = explode('.', $host);\n            \n            // Se tivermos mais de 2 partes, estamos em um subdom\u00ednio\n            if (count($parts) > 2) {\n                $subdomain = $parts[0];\n                \n                // Ignorar subdom\u00ednios especiais como 'www'\n                if ($subdomain !== 'www') {\n                    $this->currentTenant = $subdomain;\n                }\n            }\n        }\n        // Modo de pasta (tenant.com/restaurant-slug)\n        else if ($this->config['tenant_mode'] === 'path') {\n            $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n            $segments = explode('/', trim($path, '/'));\n            \n            if (!empty($segments[0]) && $segments[0] !== 'admin') {\n                $this->currentTenant = $segments[0];\n            }\n        }\n        \n        // Carregar informa\u00e7\u00f5es do tenant no banco de dados\n        if ($this->currentTenant) {\n            $this->loadTenantInfo();\n        }\n    }\n    \n    /**\n     * Carrega informa\u00e7\u00f5es do tenant do banco de dados\n     */\n    private function loadTenantInfo(): void\n    {\n        $stmt = $this->db->prepare(\"\n            SELECT * FROM tenants \n            WHERE slug = ? AND active = 1\n            LIMIT 1\n        \");\n        \n        $stmt->execute([$this->currentTenant]);\n        $tenant = $stmt->fetch(\\PDO::FETCH_ASSOC);\n        \n        if (!$tenant) {\n            // Tenant n\u00e3o encontrado ou inativo\n            header('Location: ' . $this->config['base_url']);\n            exit;\n        }\n        \n        // Disponibilizar informa\u00e7\u00f5es do tenant globalmente\n        define('TENANT_ID', $tenant['id']);\n        define('TENANT_SLUG', $tenant['slug']);\n        define('TENANT_NAME', $tenant['name']);\n        define('TENANT_RESTAURANT_TYPE', $tenant['restaurant_type']);\n    }\n    \n    /**\n     * Executa middlewares globais\n     */\n    private function runGlobalMiddleware(): void\n    {\n        // Middleware para verifica\u00e7\u00e3o de autentica\u00e7\u00e3o\n        if (isset($_SESSION['user_id'])) {\n            // Carregar usu\u00e1rio da sess\u00e3o\n            $stmt = $this->db->prepare(\"\n                SELECT * FROM users \n                WHERE id = ? AND active = 1\n                LIMIT 1\n            \");\n            \n            $stmt->execute([$_SESSION['user_id']]);\n            $user = $stmt->fetch(\\PDO::FETCH_ASSOC);\n            \n            if ($user) {\n                // Disponibilizar usu\u00e1rio globalmente\n                define('CURRENT_USER', $user);\n                define('IS_LOGGED_IN', true);\n            } else {\n                // Usu\u00e1rio n\u00e3o encontrado ou inativo, destruir sess\u00e3o\n                session_destroy();\n                define('IS_LOGGED_IN', false);\n            }\n        } else {\n            define('IS_LOGGED_IN', false);\n        }\n    }\n    \n    /**\n     * Retorna a configura\u00e7\u00e3o da aplica\u00e7\u00e3o\n     * \n     * @param string|null $key Chave da configura\u00e7\u00e3o (null para retornar todas)\n     * @param mixed $default Valor padr\u00e3o caso a configura\u00e7\u00e3o n\u00e3o exista\n     * @return mixed\n     */\n    public function config(?string $key = null, $default = null)\n    {\n        if ($key === null) {\n            return $this->config;\n        }\n        \n        // Suporte para nota\u00e7\u00e3o com pontos (database.host)\n        if (strpos($key, '.') !== false) {\n            $parts = explode('.', $key);\n            $value = $this->config;\n            \n            foreach ($parts as $part) {\n                if (!isset($value[$part])) {\n                    return $default;\n                }\n                \n                $value = $value[$part];\n            }\n            \n            return $value;\n        }\n        \n        return $this->config[$key] ?? $default;\n    }\n    \n    /**\n     * Retorna a inst\u00e2ncia do banco de dados\n     * \n     * @return DatabaseConnection\n     */\n    public function db(): DatabaseConnection\n    {\n        return $this->db;\n    }\n    \n    /**\n     * Retorna o router da aplica\u00e7\u00e3o\n     * \n     * @return Router\n     */\n    public function router(): Router\n    {\n        return $this->router;\n    }\n    \n    /**\n     * Retorna o tenant atual\n     * \n     * @return string|null\n     */\n    public function tenant(): ?string\n    {\n        return $this->currentTenant;\n    }\n}\n```\n\n### Arquivo: core/Database/DatabaseConnection.php\n\n```php\n// File: core/Database/DatabaseConnection.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Database;\n\nuse PDO;\nuse PDOException;\nuse RestauranteSaas\\Core\\Exceptions\\DatabaseException;\n\n/**\n * Classe para gerenciar a conex\u00e3o com o banco de dados\n */\nclass DatabaseConnection\n{\n    /**\n     * @var PDO Inst\u00e2ncia do PDO para conex\u00e3o com o banco de dados\n     */\n    private $pdo;\n    \n    /**\n     * @var int ID do tenant atual para filtrar consultas (multi-tenant)\n     */\n    private $tenantId = null;\n    \n    /**\n     * Construtor\n     * \n     * @param string $host Host do banco de dados\n     * @param string $dbname Nome do banco de dados\n     * @param string $username Usu\u00e1rio do banco de dados\n     * @param string $password Senha do banco de dados\n     * @param array $options Op\u00e7\u00f5es adicionais do PDO\n     * \n     * @throws DatabaseException\n     */\n    public function __construct(string $host, string $dbname, string $username, string $password, array $options = [])\n    {\n        try {\n            $defaultOptions = [\n                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n                PDO::ATTR_EMULATE_PREPARES => false,\n                PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci\"\n            ];\n            \n            $this->pdo = new PDO(\n                \"mysql:host={$host};dbname={$dbname};charset=utf8mb4\",\n                $username,\n                $password,\n                array_merge($defaultOptions, $options)\n            );\n        } catch (PDOException $e) {\n            throw new DatabaseException(\"Erro de conex\u00e3o com o banco de dados: \" . $e->getMessage());\n        }\n    }\n    \n    /**\n     * Define o ID do tenant a ser usado em consultas\n     * \n     * @param int|null $tenantId ID do tenant ou null para remover o filtro\n     * @return self\n     */\n    public function setTenantId(?int $tenantId): self\n    {\n        $this->tenantId = $tenantId;\n        return $this;\n    }\n    \n    /**\n     * Prepara uma consulta SQL\n     * \n     * @param string $query Consulta SQL\n     * @return \\PDOStatement\n     */\n    public function prepare(string $query): \\PDOStatement\n    {\n        return $this->pdo->prepare($query);\n    }\n    \n    /**\n     * Executa uma consulta SQL e retorna o statement\n     * \n     * @param string $query Consulta SQL\n     * @param array $params Par\u00e2metros para a consulta\n     * @return \\PDOStatement\n     */\n    public function query(string $query, array $params = []): \\PDOStatement\n    {\n        $stmt = $this->pdo->prepare($query);\n        $stmt->execute($params);\n        return $stmt;\n    }\n    \n    /**\n     * Executa uma consulta SQL e retorna todas as linhas\n     * \n     * @param string $query Consulta SQL\n     * @param array $params Par\u00e2metros para a consulta\n     * @return array\n     */\n    public function fetchAll(string $query, array $params = []): array\n    {\n        return $this->query($query, $params)->fetchAll();\n    }\n    \n    /**\n     * Executa uma consulta SQL e retorna a primeira linha\n     * \n     * @param string $query Consulta SQL\n     * @param array $params Par\u00e2metros para a consulta\n     * @return array|false Array com os dados ou false se n\u00e3o encontrar\n     */\n    public function fetch(string $query, array $params = [])\n    {\n        return $this->query($query, $params)->fetch();\n    }\n    \n    /**\n     * Executa uma consulta SQL e retorna um \u00fanico valor\n     * \n     * @param string $query Consulta SQL\n     * @param array $params Par\u00e2metros para a consulta\n     * @return mixed\n     */\n    public function fetchOne(string $query, array $params = [])\n    {\n        return $this->query($query, $params)->fetchColumn();\n    }\n    \n    /**\n     * Insere dados em uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param array $data Dados a serem inseridos (coluna => valor)\n     * @return int ID do registro inserido\n     */\n    public function insert(string $table, array $data): int\n    {\n        // Adicionar tenant_id automaticamente se estiver definido\n        if ($this->tenantId !== null && array_key_exists('tenant_id', $data) === false) {\n            $data['tenant_id'] = $this->tenantId;\n        }\n        \n        $columns = implode(', ', array_keys($data));\n        $placeholders = implode(', ', array_fill(0, count($data), '?'));\n        \n        $query = \"INSERT INTO {$table} ({$columns}) VALUES ({$placeholders})\";\n        \n        $this->query($query, array_values($data));\n        \n        return (int) $this->pdo->lastInsertId();\n    }\n    \n    /**\n     * Atualiza dados em uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param array $data Dados a serem atualizados (coluna => valor)\n     * @param array $where Condi\u00e7\u00f5es para atualiza\u00e7\u00e3o (coluna => valor)\n     * @return int N\u00famero de linhas afetadas\n     */\n    public function update(string $table, array $data, array $where): int\n    {\n        $setParts = [];\n        $params = [];\n        \n        foreach ($data as $column => $value) {\n            $setParts[] = \"{$column} = ?\";\n            $params[] = $value;\n        }\n        \n        $whereParts = [];\n        foreach ($where as $column => $value) {\n            $whereParts[] = \"{$column} = ?\";\n            $params[] = $value;\n        }\n        \n        // Adicionar condi\u00e7\u00e3o de tenant automaticamente\n        if ($this->tenantId !== null && !isset($where['tenant_id'])) {\n            $whereParts[] = \"tenant_id = ?\";\n            $params[] = $this->tenantId;\n        }\n        \n        $setClause = implode(', ', $setParts);\n        $whereClause = implode(' AND ', $whereParts);\n        \n        $query = \"UPDATE {$table} SET {$setClause} WHERE {$whereClause}\";\n        \n        $stmt = $this->query($query, $params);\n        return $stmt->rowCount();\n    }\n    \n    /**\n     * Exclui dados de uma tabela\n     * \n     * @param string $table Nome da tabela\n     * @param array $where Condi\u00e7\u00f5es para exclus\u00e3o (coluna => valor)\n     * @return int N\u00famero de linhas afetadas\n     */\n    public function delete(string $table, array $where): int\n    {\n        $whereParts = [];\n        $params = [];\n        \n        foreach ($where as $column => $value) {\n            $whereParts[] = \"{$column} = ?\";\n            $params[] = $value;\n        }\n        \n        // Adicionar condi\u00e7\u00e3o de tenant automaticamente\n        if ($this->tenantId !== null && !isset($where['tenant_id'])) {\n            $whereParts[] = \"tenant_id = ?\";\n            $params[] = $this->tenantId;\n        }\n        \n        $whereClause = implode(' AND ', $whereParts);\n        \n        $query = \"DELETE FROM {$table} WHERE {$whereClause}\";\n        \n        $stmt = $this->query($query, $params);\n        return $stmt->rowCount();\n    }\n    \n    /**\n     * Inicia uma transa\u00e7\u00e3o\n     */\n    public function beginTransaction(): void\n    {\n        $this->pdo->beginTransaction();\n    }\n    \n    /**\n     * Confirma uma transa\u00e7\u00e3o\n     */\n    public function commit(): void\n    {\n        $this->pdo->commit();\n    }\n    \n    /**\n     * Reverte uma transa\u00e7\u00e3o\n     */\n    public function rollBack(): void\n    {\n        $this->pdo->rollBack();\n    }\n    \n    /**\n     * Retorna o ID do \u00faltimo registro inserido\n     * \n     * @return string\n     */\n    public function lastInsertId(): string\n    {\n        return $this->pdo->lastInsertId();\n    }\n    \n    /**\n     * Retorna a inst\u00e2ncia do PDO\n     * \n     * @return PDO\n     */\n    public function getPDO(): PDO\n    {\n        return $this->pdo;\n    }\n}\n```\n\n### Arquivo: core/Model.php\n\n```php\n// File: core/Model.php\n<?php\n\nnamespace RestauranteSaas\\Core;\n\nuse RestauranteSaas\\Core\\Database\\DatabaseConnection;\nuse RestauranteSaas\\Core\\Exceptions\\ModelException;\n\n/**\n * Classe base para todos os modelos da aplica\u00e7\u00e3o\n */\nabstract class Model\n{\n    /**\n     * @var DatabaseConnection Conex\u00e3o com o banco de dados\n     */\n    protected $db;\n    \n    /**\n     * @var string Nome da tabela no banco de dados\n     */\n    protected $table;\n    \n    /**\n     * @var string Chave prim\u00e1ria da tabela\n     */\n    protected $primaryKey = 'id';\n    \n    /**\n     * @var array Campos preench\u00edveis do modelo\n     */\n    protected $fillable = [];\n    \n    /**\n     * @var array Campos protegidos do modelo (n\u00e3o preench\u00edveis)\n     */\n    protected $protected = ['id', 'created_at', 'updated_at'];\n    \n    /**\n     * @var array Dados do modelo\n     */\n    protected $data = [];\n    \n    /**\n     * @var bool Indica se o modelo existe no banco de dados\n     */\n    protected $exists = false;\n    \n    /**\n     * @var bool Indica se o modelo \u00e9 multi-tenant\n     */\n    protected $multiTenant = true;\n    \n    /**\n     * Construtor\n     * \n     * @param array $data Dados iniciais do modelo\n     */\n    public function __construct(array $data = [])\n    {\n        $this->db = App::getInstance()->db();\n        \n        // Se o tenant ID estiver definido e o modelo for multi-tenant\n        if ($this->multiTenant && defined('TENANT_ID')) {\n            $this->db->setTenantId(TENANT_ID);\n        }\n        \n        $this->fill($data);\n    }\n    \n    /**\n     * Preenche o modelo com dados\n     * \n     * @param array $data Dados para preencher o modelo\n     * @return self\n     */\n    public function fill(array $data): self\n    {\n        foreach ($data as $key => $value) {\n            // Verificar se o campo \u00e9 preench\u00edvel\n            if (\n                !in_array($key, $this->protected) && \n                (empty($this->fillable) || in_array($key, $this->fillable))\n            ) {\n                $this->data[$key] = $value;\n            }\n        }\n        \n        return $this;\n    }\n    \n    /**\n     * Define o valor de um atributo\n     * \n     * @param string $key Nome do atributo\n     * @param mixed $value Valor do atributo\n     */\n    public function __set(string $key, $value)\n    {\n        // Verificar se o campo \u00e9 preench\u00edvel\n        if (\n            !in_array($key, $this->protected) && \n            (empty($this->fillable) || in_array($key, $this->fillable))\n        ) {\n            $this->data[$key] = $value;\n        }\n    }\n    \n    /**\n     * Obt\u00e9m o valor de um atributo\n     * \n     * @param string $key Nome do atributo\n     * @return mixed\n     */\n    public function __get(string $key)\n    {\n        return $this->data[$key] ?? null;\n    }\n    \n    /**\n     * Verifica se um atributo existe\n     * \n     * @param string $key Nome do atributo\n     * @return bool\n     */\n    public function __isset(string $key): bool\n    {\n        return isset($this->data[$key]);\n    }\n    \n    /**\n     * Busca um registro pelo ID\n     * \n     * @param int $id ID do registro\n     * @return static|null\n     */\n    public static function find(int $id)\n    {\n        $instance = new static();\n        \n        $query = \"SELECT * FROM {$instance->table} WHERE {$instance->primaryKey} = ?\";\n        $params = [$id];\n        \n        // Adicionar condi\u00e7\u00e3o de tenant se necess\u00e1rio\n        if ($instance->multiTenant && defined('TENANT_ID')) {\n            $query .= \" AND tenant_id = ?\";\n            $params[] = TENANT_ID;\n        }\n        \n        $query .= \" LIMIT 1\";\n        \n        $result = $instance->db->fetch($query, $params);\n        \n        if (!$result) {\n            return null;\n        }\n        \n        $instance->data = $result;\n        $instance->exists = true;\n        \n        return $instance;\n    }\n    \n    /**\n     * Busca um registro por um crit\u00e9rio espec\u00edfico\n     * \n     * @param array $criteria Crit\u00e9rios de busca\n     * @return static|null\n     */\n    public static function findBy(array $criteria)\n    {\n        $instance = new static();\n        \n        $whereParts = [];\n        $params = [];\n        \n        foreach ($criteria as $column => $value) {\n            $whereParts[] = \"{$column} = ?\";\n            $params[] = $value;\n        }\n        \n        // Adicionar condi\u00e7\u00e3o de tenant se necess\u00e1rio\n        if ($instance->multiTenant && defined('TENANT_ID') && !isset($criteria['tenant_id'])) {\n            $whereParts[] = \"tenant_id = ?\";\n            $params[] = TENANT_ID;\n        }\n        \n        $whereClause = implode(' AND ', $whereParts);\n        \n        $query = \"SELECT * FROM {$instance->table} WHERE {$whereClause} LIMIT 1\";\n        $result = $instance->db->fetch($query, $params);\n        \n        if (!$result) {\n            return null;\n        }\n        \n        $instance->data = $result;\n        $instance->exists = true;\n        \n        return $instance;\n    }\n    \n    /**\n     * Busca todos os registros de acordo com crit\u00e9rios\n     * \n     * @param array $criteria Crit\u00e9rios de busca\n     * @param string|null $orderBy Campo para ordena\u00e7\u00e3o\n     * @param string $direction Dire\u00e7\u00e3o da ordena\u00e7\u00e3o (ASC ou DESC)\n     * @param int|null $limit Limite de registros\n     * @param int|null $offset Offset para pagina\u00e7\u00e3o\n     * @return array\n     */\n    public static function findAll(\n        array $criteria = [], \n        ?string $orderBy = null, \n        string $direction = 'ASC', \n        ?int $limit = null, \n        ?int $offset = null\n    ): array {\n        $instance = new static();\n        \n        $query = \"SELECT * FROM {$instance->table}\";\n        $params = [];\n        \n        // Adicionar WHERE se houver crit\u00e9rios\n        if (!empty($criteria) || ($instance->multiTenant && defined('TENANT_ID'))) {\n            $query .= \" WHERE \";\n            $whereParts = [];\n            \n            foreach ($criteria as $column => $value) {\n                $whereParts[] = \"{$column} = ?\";\n                $params[] = $value;\n            }\n            \n            // Adicionar condi\u00e7\u00e3o de tenant se necess\u00e1rio\n            if ($instance->multiTenant && defined('TENANT_ID') && !isset($criteria['tenant_id'])) {\n                $whereParts[] = \"tenant_id = ?\";\n                $params[] = TENANT_ID;\n            }\n            \n            $query .= implode(' AND ', $whereParts);\n        }\n        \n        // Adicionar ORDER BY se definido\n        if ($orderBy) {\n            $query .= \" ORDER BY {$orderBy} {$direction}\";\n        }\n        \n        // Adicionar LIMIT e OFFSET se definidos\n        if ($limit) {\n            $query .= \" LIMIT {$limit}\";\n            \n            if ($offset) {\n                $query .= \" OFFSET {$offset}\";\n            }\n        }\n        \n        $results = $instance->db->fetchAll($query, $params);\n        $models = [];\n        \n        foreach ($results as $result) {\n            $model = new static();\n            $model->data = $result;\n            $model->exists = true;\n            $models[] = $model;\n        }\n        \n        return $models;\n    }\n    \n    /**\n     * Salva o modelo no banco de dados (insert ou update)\n     * \n     * @return bool\n     */\n    public function save(): bool\n    {\n        // Adicionar tenant_id se necess\u00e1rio\n        if ($this->multiTenant && defined('TENANT_ID') && !isset($this->data['tenant_id'])) {\n            $this->data['tenant_id'] = TENANT_ID;\n        }\n        \n        // Atualizar timestamps\n        $now = date('Y-m-d H:i:s');\n        \n        if (!$this->exists) {\n            // Insert\n            if (!isset($this->data['created_at']) && $this->hasColumn('created_at')) {\n                $this->data['created_at'] = $now;\n            }\n            \n            if (!isset($this->data['updated_at']) && $this->hasColumn('updated_at')) {\n                $this->data['updated_at'] = $now;\n            }\n            \n            $id = $this->db->insert($this->table, $this->data);\n            \n            if ($id) {\n                $this->data[$this->primaryKey] = $id;\n                $this->exists = true;\n                return true;\n            }\n            \n            return false;\n        } else {\n            // Update\n            if ($this->hasColumn('updated_at')) {\n                $this->data['updated_at'] = $now;\n            }\n            \n            $id = $this->data[$this->primaryKey];\n            $where = [$this->primaryKey => $id];\n            \n            // Remover a chave prim\u00e1ria dos dados a serem atualizados\n            $updateData = $this->data;\n            unset($updateData[$this->primaryKey]);\n            \n            $affected = $this->db->update($this->table, $updateData, $where);\n            \n            return $affected > 0;\n        }\n    }\n    \n    /**\n     * Exclui o modelo do banco de dados\n     * \n     * @return bool\n     */\n    public function delete(): bool\n    {\n        if (!$this->exists) {\n            return false;\n        }\n        \n        $id = $this->data[$this->primaryKey];\n        $where = [$this->primaryKey => $id];\n        \n        // Adicionar tenant_id se necess\u00e1rio\n        if ($this->multiTenant && defined('TENANT_ID')) {\n            $where['tenant_id'] = TENANT_ID;\n        }\n        \n        $affected = $this->db->delete($this->table, $where);\n        \n        if ($affected > 0) {\n            $this->exists = false;\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Verifica se uma coluna existe na tabela\n     * \n     * @param string $column Nome da coluna\n     * @return bool\n     */\n    protected function hasColumn(string $column): bool\n    {\n        static $columns = [];\n        \n        if (!isset($columns[$this->table])) {\n            $query = \"SHOW COLUMNS FROM {$this->table}\";\n            $result = $this->db->fetchAll($query);\n            \n            $columns[$this->table] = array_map(function($row) {\n                return $row['Field'];\n            }, $result);\n        }\n        \n        return in_array($column, $columns[$this->table]);\n    }\n    \n    /**\n     * Retorna todos os dados do modelo como array\n     * \n     * @return array\n     */\n    public function toArray(): array\n    {\n        return $this->data;\n    }\n    \n    /**\n     * Cria uma nova inst\u00e2ncia do modelo a partir de um array\n     * \n     * @param array $data Dados para o modelo\n     * @return static\n     */\n    public static function create(array $data)\n    {\n        $instance = new static($data);\n        $instance->save();\n        \n        return $instance;\n    }\n    \n    /**\n     * Atualiza um modelo existente a partir de um array\n     * \n     * @param int $id ID do modelo\n     * @param array $data Dados para atualiza\u00e7\u00e3o\n     * @return static|null\n     */\n    public static function update(int $id, array $data)\n    {\n        $instance = static::find($id);\n        \n        if (!$instance) {\n            return null;\n        }\n        \n        $instance->fill($data);\n        $instance->save();\n        \n        return $instance;\n    }\n}\n```\n\n### Arquivo: core/Exceptions/AppException.php\n\n```php\n// File: core/Exceptions/AppException.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Exceptions;\n\n/**\n * Exce\u00e7\u00e3o base para a aplica\u00e7\u00e3o\n */\nclass AppException extends \\Exception\n{\n    /**\n     * @var array Dados adicionais da exce\u00e7\u00e3o\n     */\n    protected $data = [];\n    \n    /**\n     * Construtor\n     * \n     * @param string $message Mensagem da exce\u00e7\u00e3o\n     * @param int $code C\u00f3digo da exce\u00e7\u00e3o\n     * @param \\Throwable|null $previous Exce\u00e7\u00e3o anterior\n     * @param array $data Dados adicionais\n     */\n    public function __construct(string $message = \"\", int $code = 0, \\Throwable $previous = null, array $data = [])\n    {\n        parent::__construct($message, $code, $previous);\n        $this->data = $data;\n    }\n    \n    /**\n     * Obt\u00e9m os dados adicionais da exce\u00e7\u00e3o\n     * \n     * @return array\n     */\n    public function getData(): array\n    {\n        return $this->data;\n    }\n}\n```\n\n### Arquivo: core/Exceptions/DatabaseException.php\n\n```php\n// File: core/Exceptions/DatabaseException.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Exceptions;\n\n/**\n * Exce\u00e7\u00e3o para erros de banco de dados\n */\nclass DatabaseException extends AppException\n{\n    /**\n     * Construtor\n     * \n     * @param string $message Mensagem da exce\u00e7\u00e3o\n     * @param int $code C\u00f3digo da exce\u00e7\u00e3o\n     * @param \\Throwable|null $previous Exce\u00e7\u00e3o anterior\n     * @param array $data Dados adicionais\n     */\n    public function __construct(string $message = \"Erro de banco de dados\", int $code = 500, \\Throwable $previous = null, array $data = [])\n    {\n        parent::__construct($message, $code, $previous, $data);\n    }\n}\n```\n\n### Arquivo: core/Exceptions/ModelException.php\n\n```php\n// File: core/Exceptions/ModelException.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Exceptions;\n\n/**\n * Exce\u00e7\u00e3o para erros de modelo\n */\nclass ModelException extends AppException\n{\n    /**\n     * Construtor\n     * \n     * @param string $message Mensagem da exce\u00e7\u00e3o\n     * @param int $code C\u00f3digo da exce\u00e7\u00e3o\n     * @param \\Throwable|null $previous Exce\u00e7\u00e3o anterior\n     * @param array $data Dados adicionais\n     */\n    public function __construct(string $message = \"Erro de modelo\", int $code = 500, \\Throwable $previous = null, array $data = [])\n    {\n        parent::__construct($message, $code, $previous, $data);\n    }\n}\n```\n\n### Arquivo: core/Exceptions/ValidationException.php\n\n```php\n// File: core/Exceptions/ValidationException.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Exceptions;\n\n/**\n * Exce\u00e7\u00e3o para erros de valida\u00e7\u00e3o\n */\nclass ValidationException extends AppException\n{\n    /**\n     * Construtor\n     * \n     * @param string $message Mensagem da exce\u00e7\u00e3o\n     * @param array $errors Erros de valida\u00e7\u00e3o\n     * @param int $code C\u00f3digo da exce\u00e7\u00e3o\n     * @param \\Throwable|null $previous Exce\u00e7\u00e3o anterior\n     */\n    public function __construct(string $message = \"Erro de valida\u00e7\u00e3o\", array $errors = [], int $code = 422, \\Throwable $previous = null)\n    {\n        parent::__construct($message, $code, $previous, ['errors' => $errors]);\n    }\n    \n    /**\n     * Obt\u00e9m os erros de valida\u00e7\u00e3o\n     * \n     * @return array\n     */\n    public function getErrors(): array\n    {\n        return $this->data['errors'] ?? [];\n    }\n}\n```\n\n### Arquivo: core/Validation/Validator.php\n\n```php\n// File: core/Validation/Validator.php\n<?php\n\nnamespace RestauranteSaas\\Core\\Validation;\n\nuse RestauranteSaas\\Core\\Exceptions\\ValidationException;\n\n/**\n * Classe para valida\u00e7\u00e3o de dados\n */\nclass Validator\n{\n    /**\n     * @var array Regras de valida\u00e7\u00e3o\n     */\n    protected $rules = [];\n    \n    /**\n     * @var array Mensagens de erro personalizadas\n     */\n    protected $messages = [];\n    \n    /**\n     * @var array Erros de valida\u00e7\u00e3o\n     */\n    protected $errors = [];\n    \n    /**\n     * @var array Dados sendo validados\n     */\n    protected $data = [];\n    \n    /**\n     * Construtor\n     * \n     * @param array $rules Regras de valida\u00e7\u00e3o\n     * @param array $messages Mensagens de erro personalizadas\n     */\n    public function __construct(array $rules = [], array $messages = [])\n    {\n        $this->rules = $rules;\n        $this->messages = $messages;\n    }\n    \n    /**\n     * Define as regras de valida\u00e7\u00e3o\n     * \n     * @param array $rules Regras de valida\u00e7\u00e3o\n     * @return self\n     */\n    public function setRules(array $rules): self\n    {\n        $this->rules = $rules;\n        return $this;\n    }\n    \n    /**\n     * Define as mensagens de erro personalizadas\n     * \n     * @param array $messages Mensagens de erro personalizadas\n     * @return self\n     */\n    public function setMessages(array $messages): self\n    {\n        $this->messages = $messages;\n        return $this;\n    }\n    \n    /**\n     * Valida os dados\n     * \n     * @param array $data Dados a serem validados\n     * @param bool $throwException Se deve lan\u00e7ar uma exce\u00e7\u00e3o em caso de falha\n     * @return bool\n     * \n     * @throws ValidationException\n     */\n    public function validate(array $data, bool $throwException = true): bool\n    {\n        $this->data = $data;\n        $this->errors = [];\n        \n        foreach ($this->rules as $field => $fieldRules) {\n            // Se o campo n\u00e3o existir nos dados e n\u00e3o for obrigat\u00f3rio, pular\n            if (!isset($data[$field]) && !$this->isFieldRequired($fieldRules)) {\n                continue;\n            }\n            \n            // Converter string de regras em array\n            if (is_string($fieldRules)) {\n                $fieldRules = explode('|', $fieldRules);\n            }\n            \n            // Obter valor do campo (ou null se n\u00e3o existir)\n            $value = $data[$field] ?? null;\n            \n            // Validar cada regra\n            foreach ($fieldRules as $rule) {\n                $this->validateRule($field, $value, $rule);\n            }\n        }\n        \n        $isValid = empty($this->errors);\n        \n        if (!$isValid && $throwException) {\n            throw new ValidationException(\"Dados inv\u00e1lidos\", $this->errors);\n        }\n        \n        return $isValid;\n    }\n    \n    /**\n     * Valida uma regra espec\u00edfica\n     * \n     * @param string $field Nome do campo\n     * @param mixed $value Valor do campo\n     * @param string $rule Regra de valida\u00e7\u00e3o\n     */\n    protected function validateRule(string $field, $value, string $rule): void\n    {\n        // Separar nome da regra e par\u00e2metros\n        $parts = explode(':', $rule);\n        $ruleName = $parts[0];\n        $params = isset($parts[1]) ? explode(',', $parts[1]) : [];\n        \n        // Validar de acordo com a regra\n        switch ($ruleName) {\n            case 'required':\n                if ($value === null || $value === '') {\n                    $this->addError($field, 'required');\n                }\n                break;\n                \n            case 'email':\n                if ($value && !filter_var($value, FILTER_VALIDATE_EMAIL)) {\n                    $this->addError($field, 'email');\n                }\n                break;\n                \n            case 'min':\n                $min = (int",
                "tokens_used": 51530,
                "response_time": 117.02
            },
            {
                "id": "24464d01e2ddb798395024a5ee2b1f89",
                "timestamp": "2025-03-18T03:38:25.988512",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\n\n\n# Projeto Completo - Sistema de Gest\u00e3o de Restaurantes SaaS\n\n## 1. Tecnologias que devem ser usadas\n\nHTML,CSS,Javascript,PHP, mysql essa aplica\u00e7ao dever ser feita em web apenas\n\n## 1. Vis\u00e3o Geral do Projeto\n\n### 1.1 Descri\u00e7\u00e3o do Projeto\n\nO projeto consiste em um sistema de gest\u00e3o de restaurantes oferecido como servi\u00e7o por assinatura (SaaS - Software as a Service). O sistema atende a diversos tipos de estabelecimentos (\u00e0 la carte, fast food, pizzaria, rod\u00edzio, etc.) com funcionalidades adaptadas para cada modelo de neg\u00f3cio, permitindo opera\u00e7\u00f5es atrav\u00e9s de QR Code ou atendimento tradicional com gar\u00e7ons.\n\n### 1.2 Objetivos Principais\n\n1. Oferecer um sistema completo e personaliz\u00e1vel para gest\u00e3o de restaurantes\n2. Permitir flexibilidade para diferentes modelos de neg\u00f3cio\n3. Implementar uma estrutura escal\u00e1vel baseada em assinaturas\n4. Garantir uma experi\u00eancia otimizada tanto para restaurantes quanto para clientes finais\n5. Proporcionar integra\u00e7\u00e3o com servi\u00e7os externos (Stripe, iFood, etc.)\n\n### 1.3 P\u00fablico-Alvo\n\n- Restaurantes tradicionais \u00e0 la carte\n- Fast-foods e lanchonetes\n- Pizzarias e delivery\n- Rod\u00edzios e buf\u00eas\n- Bares e pubs\n- Food trucks\n- Redes de restaurantes\n\n### 1.4 Proposta de Valor\n\n- Redu\u00e7\u00e3o de custos operacionais\n- Aumento da efici\u00eancia no atendimento\n- Melhoria da experi\u00eancia do cliente\n- Maior controle financeiro e operacional\n- Insights de neg\u00f3cio baseados em dados\n- Flexibilidade para diferentes modelos e tamanhos de opera\u00e7\u00e3o\n\n## 2. Arquitetura do Sistema\n\n### 2.1 Vis\u00e3o Geral da Arquitetura\n\nO sistema utiliza uma arquitetura de tr\u00eas camadas:\n\n1. **Camada de Apresenta\u00e7\u00e3o**: Interfaces web e mobile para diferentes perfis de usu\u00e1rio\n2. **Camada de Aplica\u00e7\u00e3o**: L\u00f3gica de neg\u00f3cio, processamento e servi\u00e7os\n3. **Camada de Dados**: Persist\u00eancia e gerenciamento de dados\n\n### 2.2 Modelo Multi-Tenant\n\nO sistema \u00e9 constru\u00eddo com arquitetura multi-tenant, onde m\u00faltiplos restaurantes (tenants) compartilham a mesma infraestrutura, mas com dados completamente isolados:\n\n- Cada tenant possui um identificador \u00fanico\n- Todas as opera\u00e7\u00f5es de banco de dados incluem filtro por tenant\n- Recursos s\u00e3o alocados conforme o plano de assinatura\n- Backups s\u00e3o individualizados por tenant\n\n### 2.3 Infraestrutura de Nuvem\n\nA plataforma ser\u00e1 hospedada em infraestrutura de nuvem para garantir:\n\n- Alta disponibilidade (99.9+%)\n- Escalabilidade horizontal e vertical\n- Balanceamento de carga\n- Backups automatizados\n- Recupera\u00e7\u00e3o de desastres\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n\n### 2.4 Integra\u00e7\u00f5es Externas\n\nO sistema se integrar\u00e1 com diversos servi\u00e7os externos:\n\n- Stripe para processamento de pagamentos e assinaturas\n- iFood e outras plataformas de delivery\n- Sistemas fiscais e emiss\u00e3o de notas\n- Servi\u00e7os de email e SMS\n- Gateways de pagamento para opera\u00e7\u00f5es do restaurante\n\n## 3. Implementa\u00e7\u00e3o da Plataforma SaaS\n\n### 3.1 Sistema de Assinaturas\n\n#### 3.1.1 Estrutura de Planos\n\nImplementa\u00e7\u00e3o de diferentes n\u00edveis de planos:\n\n- **Plano B\u00e1sico**: Funcionalidades essenciais para pequenos estabelecimentos\n- **Plano Padr\u00e3o**: Recursos intermedi\u00e1rios para m\u00e9dios restaurantes\n- **Plano Premium**: Funcionalidades completas para grandes opera\u00e7\u00f5es\n- **Plano Enterprise**: Solu\u00e7\u00f5es personalizadas para redes e franquias\n\n#### 3.1.2 Gerenciamento de Assinaturas\n\nDesenvolvimento do fluxo completo de gest\u00e3o de assinaturas:\n\n- Cadastro e onboarding\n- Per\u00edodo de teste gratuito\n- Convers\u00e3o para assinatura paga\n- Gest\u00e3o de m\u00e9todos de pagamento\n- Renova\u00e7\u00f5es autom\u00e1ticas\n- Upgrades e downgrades de plano\n- Cancelamentos e reten\u00e7\u00e3o\n\n#### 3.1.3 Integra\u00e7\u00e3o com Stripe\n\nImplementa\u00e7\u00e3o da integra\u00e7\u00e3o completa com a API do Stripe:\n\n- Cria\u00e7\u00e3o de produtos e planos no Stripe\n- Processamento de pagamentos recorrentes\n- Gest\u00e3o de cart\u00f5es e m\u00e9todos de pagamento\n- Webhooks para eventos de pagamento\n- Tratamento de falhas e disputas\n- Gera\u00e7\u00e3o de faturas e recibos\n\n#### 3.1.4 Controle de Limites e Recursos\n\nDesenvolvimento de mecanismos para controlar a utiliza\u00e7\u00e3o conforme o plano:\n\n- Verifica\u00e7\u00e3o de limites (mesas, usu\u00e1rios, etc.)\n- Monitoramento de uso de recursos\n- Notifica\u00e7\u00f5es de limite pr\u00f3ximo\n- Op\u00e7\u00f5es de upgrade quando necess\u00e1rio\n- Controle de acesso a m\u00f3dulos premium\n\n### 3.2 Portal Administrativo\n\n#### 3.2.1 Gest\u00e3o de Clientes\n\nCria\u00e7\u00e3o de interfaces para administradores da plataforma:\n\n- Dashboard de clientes ativos\n- Detalhes de conta e consumo\n- Hist\u00f3rico de pagamentos\n- Ferramentas de suporte\n- A\u00e7\u00f5es administrativas (suspender, cancelar, etc.)\n\n#### 3.2.2 Relat\u00f3rios e Analytics\n\nImplementa\u00e7\u00e3o de ferramentas de an\u00e1lise para a opera\u00e7\u00e3o SaaS:\n\n- M\u00e9tricas de aquisi\u00e7\u00e3o de clientes\n- Taxas de convers\u00e3o e reten\u00e7\u00e3o\n- Receita recorrente mensal (MRR)\n- Valor do tempo de vida do cliente (LTV)\n- Custos de aquisi\u00e7\u00e3o de cliente (CAC)\n- Churn e renova\u00e7\u00f5es\n\n#### 3.2.3 Sistema de Suporte\n\nDesenvolvimento de ferramentas para atendimento ao cliente:\n\n- Sistema de tickets\n- Base de conhecimento\n- Chat ao vivo\n- Suporte por email\n- Escalamento para diferentes n\u00edveis\n- M\u00e9tricas de satisfa\u00e7\u00e3o e tempo de resposta\n\n## 4. Implementa\u00e7\u00e3o do Sistema de Gest\u00e3o de Restaurantes\n\n### 4.1 Personaliza\u00e7\u00e3o por Tipo de Restaurante\n\n#### 4.1.1 Onboarding e Configura\u00e7\u00e3o\n\nCria\u00e7\u00e3o do processo de configura\u00e7\u00e3o inicial:\n\n- Sele\u00e7\u00e3o do tipo de restaurante\n- Compara\u00e7\u00e3o entre tipos\n- Configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas\n- Setup inicial de mesas e ambiente\n- Cadastro de card\u00e1pio inicial\n- Configura\u00e7\u00e3o de funcion\u00e1rios e acessos\n\n#### 4.1.2 Interfaces Espec\u00edficas\n\nDesenvolvimento de interfaces adaptadas para cada tipo:\n\n- \u00c0 la carte: Foco em mesas e reservas\n- Fast Food: Foco em fila de pedidos e agilidade\n- Pizzaria: Construtor de pizza meio a meio\n- Rod\u00edzio: Controle de passadas e tempos\n- Delivery: Rastreamento e rotas\n- Self-service: Integra\u00e7\u00e3o com balan\u00e7as\n- Food Truck: Interface simplificada e mobile-first\n\n#### 4.1.3 Fluxos de Trabalho Personalizados\n\nImplementa\u00e7\u00e3o de fluxos adaptados para cada modelo:\n\n- L\u00f3gica de neg\u00f3cio espec\u00edfica por tipo\n- Regras de prioriza\u00e7\u00e3o de pedidos\n- Controles especializados (forno, passadas, pesagem)\n- Relat\u00f3rios e m\u00e9tricas relevantes para cada modelo\n\n### 4.2 M\u00f3dulo de Comandas e Pedidos\n\n#### 4.2.1 Gest\u00e3o de Mesas\n\nDesenvolvimento do sistema de controle de mesas:\n\n- Mapa visual de mesas\n- Status em tempo real\n- Controle de ocupa\u00e7\u00e3o\n- Timer de perman\u00eancia\n- Hist\u00f3rico de uso\n\n#### 4.2.2 Sistema de Pedidos\n\nImplementa\u00e7\u00e3o do fluxo completo de pedidos:\n\n- Registro de pedidos (via QR Code e gar\u00e7om)\n- Modifica\u00e7\u00f5es e adi\u00e7\u00f5es\n- Encaminhamento para cozinha\n- Notifica\u00e7\u00f5es de status\n- Fechamento e pagamento\n\n#### 4.2.3 QR Code para Clientes\n\nDesenvolvimento da experi\u00eancia de pedido via QR Code:\n\n- Gera\u00e7\u00e3o de QR Codes para mesas\n- Interface adaptada para mobile\n- Registro de dados do cliente\n- Card\u00e1pio digital interativo\n- Carrinho de pedidos\n- Solicita\u00e7\u00e3o de atendimento\n- Pagamento pelo smartphone\n\n#### 4.2.4 Divis\u00e3o de Contas\n\nImplementa\u00e7\u00e3o de mecanismos para divis\u00e3o de contas:\n\n- Divis\u00e3o por item\n- Divis\u00e3o igual entre participantes\n- Divis\u00e3o percentual\n- M\u00faltiplos pagamentos\n- Contas parciais\n\n### 4.3 M\u00f3dulo de Cozinha\n\n#### 4.3.1 Painel de Produ\u00e7\u00e3o\n\nDesenvolvimento da interface para cozinha:\n\n- Fila de pedidos em tempo real\n- Classifica\u00e7\u00e3o por prioridade\n- Temporizadores de preparo\n- Status visual por pedido\n- Alertas para pedidos atrasados\n\n#### 4.3.2 Gest\u00e3o de Estoque\n\nImplementa\u00e7\u00e3o do controle de estoque integrado:\n\n- Cadastro de ingredientes e insumos\n- Abate autom\u00e1tico do estoque\n- Alertas de estoque baixo\n- Previs\u00e3o de necessidade\n- Pedidos autom\u00e1ticos\n\n#### 4.3.3 Controles Espec\u00edficos\n\nCria\u00e7\u00e3o de funcionalidades especializadas:\n\n- Temporizadores para forno\n- Controle de passadas para rod\u00edzio\n- Separa\u00e7\u00e3o de delivery e local\n- Alertas para al\u00e9rgenos\n\n### 4.4 M\u00f3dulo de Pagamentos\n\n#### 4.4.1 Processamento de Pagamentos\n\nImplementa\u00e7\u00e3o dos fluxos de pagamento:\n\n- Integra\u00e7\u00e3o com Stripe para pagamentos\n- Suporte a cart\u00f5es de cr\u00e9dito/d\u00e9bito\n- Pagamentos via PIX\n- Dinheiro e outras formas locais\n- Concilia\u00e7\u00e3o financeira\n\n#### 4.4.2 Fechamento de Caixa\n\nDesenvolvimento do processo de fechamento:\n\n- Abertura e fechamento de caixa\n- Registro de entradas e sa\u00eddas\n- Contagem f\u00edsica\n- Detec\u00e7\u00e3o de diferen\u00e7as\n- Relat\u00f3rio de fechamento\n\n#### 4.4.3 Emiss\u00e3o de Comprovantes\n\nImplementa\u00e7\u00e3o da gera\u00e7\u00e3o de documentos:\n\n- Recibos digitais\n- Envio por email ou WhatsApp\n- Integra\u00e7\u00e3o com sistemas fiscais\n- Armazenamento de comprovantes\n\n### 4.5 M\u00f3dulo de Funcion\u00e1rios\n\n#### 4.5.1 Controle de Acesso\n\nDesenvolvimento do sistema de acesso:\n\n- Cadastro de funcion\u00e1rios\n- Perfis de permiss\u00e3o\n- Autentica\u00e7\u00e3o segura\n- Registro de atividades\n- Pol\u00edticas de seguran\u00e7a\n\n#### 4.5.2 Registro de Ponto\n\nImplementa\u00e7\u00e3o do controle de ponto:\n\n- Registro de entrada e sa\u00edda\n- Valida\u00e7\u00e3o por localiza\u00e7\u00e3o\n- C\u00e1lculo de horas trabalhadas\n- Controle de intervalos\n- Exporta\u00e7\u00e3o para folha de pagamento\n\n#### 4.5.3 Desempenho e Comiss\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para gest\u00e3o de desempenho:\n\n- M\u00e9tricas por funcion\u00e1rio\n- C\u00e1lculo de comiss\u00f5es\n- Avalia\u00e7\u00e3o de desempenho\n- Classifica\u00e7\u00e3o por objetivos\n- Feedback e desenvolvimento\n\n### 4.6 M\u00f3dulo de Fornecedores\n\n#### 4.6.1 Cadastro e Gest\u00e3o\n\nImplementa\u00e7\u00e3o do gerenciamento de fornecedores:\n\n- Cadastro detalhado de fornecedores\n- Categoriza\u00e7\u00e3o por tipo de produto\n- Condi\u00e7\u00f5es comerciais\n- Contatos de emerg\u00eancia\n- Avalia\u00e7\u00e3o de desempenho\n\n#### 4.6.2 Pedidos e Reposi\u00e7\u00e3o\n\nDesenvolvimento do fluxo de compras:\n\n- Pedidos r\u00e1pidos\n- Sugest\u00e3o autom\u00e1tica de reposi\u00e7\u00e3o\n- Aprova\u00e7\u00e3o de pedidos\n- Acompanhamento de entrega\n- Recebimento e confer\u00eancia\n\n#### 4.6.3 Hist\u00f3rico e Avalia\u00e7\u00e3o\n\nCria\u00e7\u00e3o de ferramentas para an\u00e1lise de fornecedores:\n\n- Hist\u00f3rico de pedidos\n- Cumprimento de prazos\n- Qualidade de produtos\n- Competitividade de pre\u00e7os\n- Ranking de fornecedores\n\n### 4.7 M\u00f3dulo de Relat\u00f3rios\n\n#### 4.7.1 Relat\u00f3rios Operacionais\n\nImplementa\u00e7\u00e3o de relat\u00f3rios para a opera\u00e7\u00e3o di\u00e1ria:\n\n- Vendas por per\u00edodo\n- Ocupa\u00e7\u00e3o de mesas\n- Tempo m\u00e9dio de atendimento\n- Itens mais vendidos\n- Cancelamentos e devolu\u00e7\u00f5es\n\n#### 4.7.2 Relat\u00f3rios Financeiros\n\nDesenvolvimento de an\u00e1lises financeiras:\n\n- Faturamento por per\u00edodo\n- Custos e despesas\n- Lucratividade por produto\n- Fluxo de caixa\n- Proje\u00e7\u00f5es e comparativos\n\n#### 4.7.3 Dashboards e Analytics\n\nCria\u00e7\u00e3o de pain\u00e9is visuais e an\u00e1lises:\n\n- Dashboard executivo\n- Gr\u00e1ficos e visualiza\u00e7\u00f5es\n- Tend\u00eancias e sazonalidade\n- An\u00e1lise de dados em tempo real\n- Exporta\u00e7\u00e3o para Excel/PDF\n\n### 4.8 M\u00f3dulo de Marketing e CRM\n\n#### 4.8.1 Cadastro de Clientes\n\nImplementa\u00e7\u00e3o do gerenciamento de clientes:\n\n- Captura de dados via QR Code\n- Hist\u00f3rico de pedidos\n- Prefer\u00eancias e restri\u00e7\u00f5es\n- Segmenta\u00e7\u00e3o de clientes\n- Privacidade e LGPD\n\n#### 4.8.2 Programa de Fidelidade\n\nDesenvolvimento de sistema de fideliza\u00e7\u00e3o:\n\n- Ac\u00famulo de pontos por compra\n- N\u00edveis de fidelidade\n- Recompensas e benef\u00edcios\n- Promo\u00e7\u00f5es personalizadas\n- An\u00e1lise de engajamento\n\n#### 4.8.3 Campanhas e Promo\u00e7\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para a\u00e7\u00f5es de marketing:\n\n- Cria\u00e7\u00e3o de campanhas\n- Descontos e ofertas especiais\n- Comunica\u00e7\u00e3o por email e SMS\n- Aniversariantes do m\u00eas\n- Mensura\u00e7\u00e3o de resultados\n\n## 5. Integra\u00e7\u00f5es com Servi\u00e7os Externos\n\n### 5.1 Integra\u00e7\u00e3o com Plataformas de Delivery\n\n#### 5.1.1 iFood e Outras Plataformas\n\nImplementa\u00e7\u00e3o de conex\u00e3o com marketplaces:\n\n- Recebimento de pedidos em tempo real\n- Aceita\u00e7\u00e3o/rejei\u00e7\u00e3o autom\u00e1tica\n- Atualiza\u00e7\u00e3o de status\n- Sincroniza\u00e7\u00e3o de card\u00e1pio\n- Concilia\u00e7\u00e3o financeira\n\n#### 5.1.2 Delivery Pr\u00f3prio\n\nDesenvolvimento de sistema pr\u00f3prio de delivery:\n\n- Cadastro de entregadores\n- Roteiriza\u00e7\u00e3o de entregas\n- Rastreamento em tempo real\n- \u00c1reas e taxas de entrega\n- Gest\u00e3o de frota\n\n### 5.2 Integra\u00e7\u00e3o com Sistemas Fiscais\n\n#### 5.2.1 Emiss\u00e3o de Notas Fiscais\n\nImplementa\u00e7\u00e3o de processos fiscais:\n\n- Emiss\u00e3o de NFC-e, NF-e\n- Valida\u00e7\u00e3o com WebServices da SEFAZ\n- Armazenamento e envio de documentos\n- Tratamento de conting\u00eancia\n- Relat\u00f3rios fiscais\n\n#### 5.2.2 Concilia\u00e7\u00e3o Cont\u00e1bil\n\nDesenvolvimento de ferramentas para contabilidade:\n\n- Exporta\u00e7\u00e3o para sistemas cont\u00e1beis\n- Plano de contas configur\u00e1vel\n- Relat\u00f3rios para DRE\n- Apura\u00e7\u00e3o de impostos\n- Fechamento mensal\n\n### 5.3 Integra\u00e7\u00e3o com Balan\u00e7as\n\n#### 5.3.1 Para Self-Service\n\nImplementa\u00e7\u00e3o de conex\u00e3o com balan\u00e7as:\n\n- Leitura de peso em tempo real\n- C\u00e1lculo autom\u00e1tico de valor\n- Calibra\u00e7\u00e3o e configura\u00e7\u00e3o\n- Modo offline para conting\u00eancia\n- Registro de pesagens\n\n#### 5.3.2 Para Controle de Estoque\n\nDesenvolvimento de pesagem para estoque:\n\n- Pesagem de insumos\n- Convers\u00e3o de unidades\n- Controle de quebra e perdas\n- Rastreabilidade\n- Invent\u00e1rio f\u00edsico\n\n### 5.4 Integra\u00e7\u00e3o com Equipamentos\n\n#### 5.4.1 Impressoras e Comandas\n\nImplementa\u00e7\u00e3o de sistema de impress\u00e3o:\n\n- Impress\u00e3o de comandas para cozinha\n- Impress\u00e3o de contas e recibos\n- Suporte a diversas marcas de impressoras\n- Configura\u00e7\u00e3o de layouts\n- Tratamento de falhas\n\n#### 5.4.2 Displays de Cozinha\n\nDesenvolvimento de integra\u00e7\u00e3o com displays:\n\n- Exibi\u00e7\u00e3o de pedidos em andamento\n- Alertas visuais e sonoros\n- Temporizadores\n- Confirma\u00e7\u00e3o por toque\n- Sincroniza\u00e7\u00e3o em tempo real\n\n## 6. Infraestrutura e Hospedagem\n\n### 6.1 Ambiente de Produ\u00e7\u00e3o\n\n#### 6.1.1 Servidores Web\n\nConfigura\u00e7\u00e3o da infraestrutura web:\n\n- Servidores web redundantes\n- Balanceadores de carga\n- Certificados SSL/TLS\n- Cache e otimiza\u00e7\u00e3o\n- Monitoramento 24/7\n\n#### 6.1.2 Banco de Dados\n\nImplementa\u00e7\u00e3o da camada de dados:\n\n- Cluster de banco de dados MySQL\n- Replica\u00e7\u00e3o e alta disponibilidade\n- Backups automatizados\n- Particionamento por tenant\n- Otimiza\u00e7\u00e3o de performance\n\n#### 6.1.3 Armazenamento\n\nConfigura\u00e7\u00e3o de sistemas de armazenamento:\n\n- Sistema de arquivos distribu\u00eddo\n- Armazenamento para backups\n- CDN para assets est\u00e1ticos\n- Pol\u00edticas de reten\u00e7\u00e3o\n- Compress\u00e3o e otimiza\u00e7\u00e3o\n\n### 6.2 Escalabilidade\n\n#### 6.2.1 Horizontal\n\nImplementa\u00e7\u00e3o de mecanismos de crescimento:\n\n- Auto-scaling de servidores\n- Gerenciamento de capacidade\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n- Load balancing avan\u00e7ado\n- Cont\u00eaineres e orquestra\u00e7\u00e3o\n\n#### 6.2.2 Vertical\n\nPlanejamento para crescimento de recursos:\n\n- Upgrades de hardware\n- Otimiza\u00e7\u00e3o de software\n- Benchmarking e performance\n- Ajuste de recursos por demanda\n- Monitoramento de gargalos\n\n### 6.3 Monitoramento e Logging\n\n#### 6.3.1 Monitoramento de Sistema\n\nImplementa\u00e7\u00e3o de sistemas de observabilidade:\n\n- Monitoramento em tempo real\n- Alertas autom\u00e1ticos\n- Dashboards operacionais\n- An\u00e1lise de tend\u00eancias\n- Detec\u00e7\u00e3o de anomalias\n\n#### 6.3.2 Logging e Auditoria\n\nDesenvolvimento de registro de eventos:\n\n- Centraliza\u00e7\u00e3o de logs\n- Reten\u00e7\u00e3o configur\u00e1vel\n- Busca e an\u00e1lise\n- Trilhas de auditoria\n- Exporta\u00e7\u00e3o e conformidade\n\n### 6.4 Continuidade de Neg\u00f3cio\n\n#### 6.4.1 Backups\n\nImplementa\u00e7\u00e3o de estrat\u00e9gia de backups:\n\n- Backups di\u00e1rios automatizados\n- Backups incrementais\n- Verifica\u00e7\u00e3o de integridade\n- Restaura\u00e7\u00e3o testada\n- Armazenamento offsite\n\n#### 6.4.2 Disaster Recovery\n\nDesenvolvimento de plano de recupera\u00e7\u00e3o:\n\n- Site alternativo\n- Procedimentos documentados\n- Tempo de recupera\u00e7\u00e3o definido\n- Testes regulares\n- Comunica\u00e7\u00e3o de incidentes\n\n#### 6.4.3 Modo Offline\n\nImplementa\u00e7\u00e3o de funcionamento offline:\n\n- Opera\u00e7\u00f5es b\u00e1sicas sem internet\n- Sincroniza\u00e7\u00e3o autom\u00e1tica\n- Buffer local de transa\u00e7\u00f5es\n- Reconcilia\u00e7\u00e3o ap\u00f3s reconex\u00e3o\n- Notifica\u00e7\u00f5es de status\n\n## 7. Testes e Garantia de Qualidade\n\n### 7.1 Estrat\u00e9gia de Testes\n\n#### 7.1.1 Testes Unit\u00e1rios\n\nImplementa\u00e7\u00e3o de testes de componentes:\n\n- Cobertura de c\u00f3digo\n- Testes automatizados\n- Mock de depend\u00eancias\n- Valida\u00e7\u00e3o de regras de neg\u00f3cio\n- Integra\u00e7\u00e3o com CI/CD\n\n#### 7.1.2 Testes de Integra\u00e7\u00e3o\n\nDesenvolvimento de valida\u00e7\u00e3o de integra\u00e7\u00f5es:\n\n- Teste de APIs\n- Simula\u00e7\u00f5es de servi\u00e7os externos\n- Valida\u00e7\u00e3o de fluxos completos\n- Ambientes de teste isolados\n- Automa\u00e7\u00e3o de casos de teste\n\n#### 7.1.3 Testes de Aceita\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de valida\u00e7\u00e3o do usu\u00e1rio:\n\n- Testes de usabilidade\n- Cen\u00e1rios de uso real\n- Valida\u00e7\u00e3o com stakeholders\n- Feedback documentado\n- Aprova\u00e7\u00e3o formal\n\n### 7.2 Garantia de Qualidade\n\n#### 7.2.1 Revis\u00e3o de C\u00f3digo\n\nEstabelecimento de processos de revis\u00e3o:\n\n- Padr\u00f5es de codifica\u00e7\u00e3o\n- Pull/merge requests\n- Code reviews\n- An\u00e1lise est\u00e1tica\n- M\u00e9tricas de qualidade\n\n#### 7.2.2 Controle de Vers\u00e3o\n\nImplementa\u00e7\u00e3o de gerenciamento de vers\u00f5es:\n\n- Git flow ou similar\n- Ambientes separados (DEV/STG/PROD)\n- Tagging de vers\u00f5es\n- Gest\u00e3o de releases\n- Changelogs e documenta\u00e7\u00e3o\n\n#### 7.2.3 Testes de Performance\n\nDesenvolvimento de valida\u00e7\u00e3o de desempenho:\n\n- Testes de carga\n- Benchmarking\n- Otimiza\u00e7\u00e3o de recursos\n- Monitoramento de impacto\n- Simula\u00e7\u00e3o de multi-tenancy\n\n## 8. Seguran\u00e7a e Conformidade\n\n### 8.1 Seguran\u00e7a de Aplica\u00e7\u00e3o\n\n#### 8.1.1 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de controle de acesso:\n\n- Autentica\u00e7\u00e3o forte (2FA)\n- Gerenciamento de sess\u00f5es\n- Controle de acesso baseado em perfil\n- Pol\u00edticas de senha\n- Prote\u00e7\u00e3o contra for\u00e7a bruta\n\n#### 8.1.2 Prote\u00e7\u00e3o de Dados\n\nDesenvolvimento de mecanismos de prote\u00e7\u00e3o:\n\n- Criptografia em tr\u00e2nsito (TLS)\n- Criptografia em repouso\n- Tokeniza\u00e7\u00e3o de dados sens\u00edveis\n- Mascaramento de informa\u00e7\u00f5es\n- Acesso baseado em necessidade\n\n#### 8.1.3 Seguran\u00e7a de API\n\nImplementa\u00e7\u00e3o de prote\u00e7\u00e3o de endpoints:\n\n- Autentica\u00e7\u00e3o por token (JWT)\n- Rate limiting\n- Valida\u00e7\u00e3o de entrada\n- CORS configurado\n- Prote\u00e7\u00e3o contra ataques comuns\n\n### 8.2 Conformidade\n\n#### 8.2.1 LGPD/GDPR\n\nAdequa\u00e7\u00e3o \u00e0 legisla\u00e7\u00e3o de privacidade:\n\n- Invent\u00e1rio de dados pessoais\n- Termos de uso e privacidade\n- Mecanismos de consentimento\n- Direitos do titular (acesso, exclus\u00e3o)\n- Relat\u00f3rios de impacto\n\n#### 8.2.2 PCI DSS\n\nConformidade para processamento de pagamentos:\n\n- Seguran\u00e7a de dados de cart\u00e3o\n- Tokeniza\u00e7\u00e3o via Stripe\n- Escopo reduzido de PCI\n- Varreduras de seguran\u00e7a\n- Treinamento e conscientiza\u00e7\u00e3o\n\n#### 8.2.3 Auditoria e Compliance\n\nImplementa\u00e7\u00e3o de pr\u00e1ticas de conformidade:\n\n- Trilhas de auditoria\n- Logs imut\u00e1veis\n- Evid\u00eancias de controle\n- Relat\u00f3rios de compliance\n- Revis\u00f5es peri\u00f3dicas\n\n## 9. Lan\u00e7amento e Opera\u00e7\u00f5es\n\n### 9.1 Estrat\u00e9gia de Lan\u00e7amento\n\n#### 9.1.1 MVP e Roadmap\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Defini\u00e7\u00e3o do MVP inicial\n- Prioriza\u00e7\u00e3o de funcionalidades\n- Roadmap de m\u00e9dio prazo\n- Feedback loops planejados\n- Marcos e m\u00e9tricas de sucesso\n\n#### 9.1.2 Beta e Early Adopters\n\nImplementa\u00e7\u00e3o de programa inicial:\n\n- Sele\u00e7\u00e3o de clientes beta\n- Incentivos para early adopters\n- Coleta estruturada de feedback\n- Ciclos r\u00e1pidos de itera\u00e7\u00e3o\n- Estrat\u00e9gia de expans\u00e3o\n\n#### 9.1.3 Go-to-Market\n\nDesenvolvimento de estrat\u00e9gia comercial:\n\n- Posicionamento de mercado\n- Estrat\u00e9gia de pre\u00e7os\n- Canais de aquisi\u00e7\u00e3o\n- Materiais de marketing\n- Plano de vendas\n\n### 9.2 Opera\u00e7\u00f5es Cont\u00ednuas\n\n#### 9.2.1 Suporte ao Cliente\n\nImplementa\u00e7\u00e3o de estrutura de atendimento:\n\n- Equipe de suporte escalonada\n- Base de conhecimento\n- Procedimentos documentados\n- M\u00e9tricas de atendimento\n- Feedback e melhoria cont\u00ednua\n\n#### 9.2.2 Monitoramento de Uso\n\nDesenvolvimento de an\u00e1lise de utiliza\u00e7\u00e3o:\n\n- Telemetria de uso\n- Detec\u00e7\u00e3o de problemas\n- M\u00e9tricas de engajamento\n- An\u00e1lise de churn\n- Oportunidades de upsell\n\n#### 9.2.3 SLA e Garantias\n\nEstabelecimento de acordos de n\u00edvel de servi\u00e7o:\n\n- Disponibilidade garantida\n- Tempo de resposta para suporte\n- Resolu\u00e7\u00e3o de incidentes\n- Compensa\u00e7\u00f5es por falhas\n- Comunica\u00e7\u00e3o proativa\n\n## 10. Manuten\u00e7\u00e3o e Evolu\u00e7\u00e3o\n\n### 10.1 Desenvolvimento Cont\u00ednuo\n\n#### 10.1.1 Novas Funcionalidades\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Processo de coleta de requisitos\n- Prioriza\u00e7\u00e3o baseada em valor\n- Desenvolvimento \u00e1gil\n- Testes de conceito\n- Valida\u00e7\u00e3o com usu\u00e1rios\n\n#### 10.1.2 Corre\u00e7\u00f5es e Melhorias\n\nImplementa\u00e7\u00e3o de processo de manuten\u00e7\u00e3o:\n\n- Triagem de bugs e issues\n- Prioriza\u00e7\u00e3o por impacto\n- Janelas de manuten\u00e7\u00e3o\n- Hotfixes para problemas cr\u00edticos\n- Refatora\u00e7\u00e3o planejada\n\n#### 10.1.3 Atualiza\u00e7\u00f5es de Tecnologia\n\nPlano para evolu\u00e7\u00e3o tecnol\u00f3gica:\n\n- Atualiza\u00e7\u00f5es de seguran\u00e7a\n- Atualiza\u00e7\u00e3o de frameworks\n- Migra\u00e7\u00e3o planejada\n- Testes de compatibilidade\n- Comunica\u00e7\u00e3o de mudan\u00e7as\n\n### 10.2 An\u00e1lise e Otimiza\u00e7\u00e3o\n\n#### 10.2.1 Performance\n\nMonitoramento e melhoria cont\u00ednua:\n\n- An\u00e1lise de gargalos\n- Otimiza\u00e7\u00e3o de consultas\n- Refinamento de caching\n- Monitoramento de uso de recursos\n- Benchmarking peri\u00f3dico\n\n#### 10.2.2 Custo-Benef\u00edcio\n\nAvalia\u00e7\u00e3o financeira constante:\n\n- An\u00e1lise de custos operacionais\n- Otimiza\u00e7\u00e3o de recursos\n- Renegocia\u00e7\u00e3o com fornecedores\n- Efici\u00eancia energ\u00e9tica\n- Automa\u00e7\u00e3o de processos\n\n#### 10.2.3 Experi\u00eancia do Usu\u00e1rio\n\nMelhoria cont\u00ednua da UX:\n\n- Testes de usabilidade\n- An\u00e1lise de caminhos e convers\u00e3o\n- Feedback estruturado\n- A/B testing\n- Pesquisas de satisfa\u00e7\u00e3o\n\n## 11. Diret\u00f3rio Completo do Projeto\n\n```\nrestaurante-sistema/\n\u2502\n\u251c\u2500\u2500 assets/                        # Arquivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 css/                       # Estilos CSS\n\u2502   \u2502   \u251c\u2500\u2500 main.css               # Estilo principal\n\u2502   \u2502   \u251c\u2500\u2500 login.css              # Estilos da p\u00e1gina de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.css          # Estilos do painel principal\n\u2502   \u2502   \u251c\u2500\u2500 tables.css             # Estilos do mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 menu.css               # Estilos do card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.css            # Estilos do painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 reports.css            # Estilos dos relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 ponto.css              # Estilos para o sistema de ponto\n\u2502   \u2502   \u251c\u2500\u2500 fornecedores.css       # Estilos para gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 customer-mobile.css    # Estilos para interface mobile do cliente\n\u2502   \u2502   \u251c\u2500\u2500 subscription.css       # Estilos para p\u00e1ginas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 pricing.css            # Estilos para p\u00e1gina de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing.css            # Estilos para gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Estilos espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.css       # Estilo para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.css       # Estilo para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.css       # Estilo para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.css        # Estilo para rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.css    # Estilo para self-service/buf\u00ea\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.css       # Estilo para delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foodtruck.css      # Estilo para food truck\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bar.css            # Estilo para bar/pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cafeteria.css      # Estilo para cafeteria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.css      # Estilo para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.css         # Estilos para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 js/                        # Arquivos JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # JavaScript principal\n\u2502   \u2502   \u251c\u2500\u2500 login.js               # L\u00f3gica de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js           # Funcionalidades do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 tables.js              # Gerenciamento de mesas\n\u2502   \u2502   \u251c\u2500\u2500 orders.js              # Processamento de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 menu.js                # Card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.js             # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory.js           # Controle de estoque\n\u2502   \u2502   \u251c\u2500\u2500 payments.js            # Processamento de pagamentos\n\u2502   \u2502   \u251c\u2500\u2500 stripe-integration.js  # Integra\u00e7\u00e3o com Stripe\n\u2502   \u2502   \u251c\u2500\u2500 subscription.js        # L\u00f3gica de gerenciamento de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 pricing-calculator.js  # Calculadora de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing-portal.js      # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 charts.js              # L\u00f3gica para gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 ponto.js               # L\u00f3gica de registro de ponto\n\u2502   \u2502   \u251c\u2500\u2500 supplier-manager.js    # Gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 group-orders.js        # L\u00f3gica de pedidos em grupo\n\u2502   \u2502   \u251c\u2500\u2500 bill-splitter.js       # Divis\u00e3o de contas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Scripts espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.js        # L\u00f3gica para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.js        # L\u00f3gica para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.js        # L\u00f3gica para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.js         # L\u00f3gica para rod\u00edzio (controle de passadas)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.js     # L\u00f3gica para self-service (integra\u00e7\u00e3o com balan\u00e7as)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.js        # L\u00f3gica para delivery (rastreamento)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.js       # L\u00f3gica para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.js          # L\u00f3gica para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 images/                    # Imagens\n\u2502   \u2502   \u251c\u2500\u2500 logo/                  # Logotipos\n\u2502   \u2502   \u251c\u2500\u2500 icons/                 # \u00cdcones\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 menu/              # \u00cdcones para categorias do menu\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status/            # \u00cdcones de status\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 actions/           # \u00cdcones para a\u00e7\u00f5es\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 payment/           # \u00cdcones para m\u00e9todos de pagamento\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 subscription/      # \u00cdcones para planos de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 menu/                  # Imagens dos pratos\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Elementos da interface\n\u2502   \u2502   \u251c\u2500\u2500 plans/                 # Imagens para os planos de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 restaurant-types/      # Imagens espec\u00edficas por tipo de restaurante\n\u2502   \u2502       \u251c\u2500\u2500 alacarte/          # Imagens para restaurante \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood/          # Imagens para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria/          # Imagens para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 ...                # Outros tipos\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fonts/                     # Fontes\n\u2502\n\u251c\u2500\u2500 config/                        # Arquivos de configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 database.php               # Configura\u00e7\u00e3o da conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 constants.php              # Constantes da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 stripe.php                 # Configura\u00e7\u00e3o da API do Stripe\n\u2502   \u251c\u2500\u2500 email.php                  # Configura\u00e7\u00e3o de emails\n\u2502   \u251c\u2500\u2500 sms.php                    # Configura\u00e7\u00e3o de SMS\n\u2502   \u251c\u2500\u2500 qrcode.php                 # Configura\u00e7\u00e3o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 ifood.php                  # Configura\u00e7\u00e3o da API do iFood\n\u2502   \u251c\u2500\u2500 restaurant_types.php       # Configura\u00e7\u00e3o de tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface_settings.php     # Configura\u00e7\u00f5es de interface por tipo\n\u2502   \u251c\u2500\u2500 order_methods.php          # Configura\u00e7\u00f5es de m\u00e9todos de pedido\n\u2502   \u251c\u2500\u2500 subscription_plans.php     # Configura\u00e7\u00e3o de planos de assinatura\n\u2502   \u251c\u2500\u2500 tenant.php                 # Configura\u00e7\u00e3o multi-tenant\n\u2502   \u2514\u2500\u2500 feature_limits.php         # Limites de recursos por plano\n\u2502\n\u251c\u2500\u2500 controllers/                   # Controladores\n\u2502   \u251c\u2500\u2500 AuthController.php         # Controlador de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 SubscriptionController.php # Controlador de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 PlansController.php    # Controlador de planos\n\u2502   \u2502   \u251c\u2500\u2500 BillingController.php  # Controlador de faturamento\n\u2502   \u2502   \u2514\u2500\u2500 FeatureController.php  # Controlador de recursos dispon\u00edveis\n\u2502   \u251c\u2500\u2500 TenantController.php       # Controlador multi-tenant\n\u2502   \u251c\u2500\u2500 OnboardingController.php   # Controlador de configura\u00e7\u00e3o inicial\n\u2502   \u251c\u2500\u2500 DashboardController.php    # Controlador do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteDashboardController.php  # Dashboard espec\u00edfico para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodDashboardController.php  # Dashboard espec\u00edfico para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaDashboardController.php  # Dashboard espec\u00edfico para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioDashboardController.php   # Dashboard espec\u00edfico para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 DeliveryDashboardController.php  # Dashboard espec\u00edfico para delivery\n\u2502   \u251c\u2500\u2500 TableController.php        # Controlador de mesas\n\u2502   \u251c\u2500\u2500 OrderController.php        # Controlador de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrderController.php    # Pedidos individuais\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrderController.php     # Pedidos em grupo\n\u2502   \u251c\u2500\u2500 MenuController.php         # Controlador do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuController.php   # Card\u00e1pio para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuController.php   # Card\u00e1pio para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaMenuController.php   # Card\u00e1pio para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioMenuController.php    # Card\u00e1pio para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 SelfServiceMenuController.php # Card\u00e1pio para self-service\n\u2502   \u251c\u2500\u2500 KitchenController.php      # Controlador da cozinha\n\u2502   \u251c\u2500\u2500 InventoryController.php    # Controlador de estoque\n\u2502   \u251c\u2500\u2500 PaymentController.php      # Controlador de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 BillSplitController.php      # Controlador de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ReportController.php       # Controlador de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 iFoodController.php        # Controlador de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 SupplierController.php     # Controlador de fornecedores\n\u2502   \u2502   \u2514\u2500\u2500 QuickOrderController.php     # Controlador de pedidos r\u00e1pidos\n\u2502   \u251c\u2500\u2500 StaffController.php        # Controlador de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 TimeClockController.php      # Controlador de ponto\n\u2502   \u251c\u2500\u2500 CustomerController.php     # Controlador de clientes\n\u2502   \u251c\u2500\u2500 QRCodeController.php       # Controlador de gera\u00e7\u00e3o e gest\u00e3o de QR Codes\n\u2502   \u251c\u2500\u2500 RestaurantTypeController.php # Controlador de tipo de restaurante\n\u2502   \u2514\u2500\u2500 SettingsController.php     # Controlador de configura\u00e7\u00f5es\n\u2502\n\u251c\u2500\u2500 models/                        # Modelos\n\u2502   \u251c\u2500\u2500 User.php                   # Modelo de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 Account.php                # Modelo de conta (assinatura)\n\u2502   \u2502   \u251c\u2500\u2500 Subscription.php       # Modelo de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 Plan.php               # Modelo de plano\n\u2502   \u2502   \u251c\u2500\u2500 Invoice.php            # Modelo de fatura\n\u2502   \u2502   \u2514\u2500\u2500 Usage.php              # Modelo de uso de recursos\n\u2502   \u251c\u2500\u2500 Tenant.php                 # Modelo de tenant (separa\u00e7\u00e3o de dados)\n\u2502   \u251c\u2500\u2500 Restaurant.php             # Modelo de restaurante com tipo e configura\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 RestaurantType.php         # Modelo de tipos de restaurante\n\u2502   \u251c\u2500\u2500 CashRegister.php           # Modelo de caixa\n\u2502   \u251c\u2500\u2500 Table.php                  # Modelo de mesa\n\u2502   \u251c\u2500\u2500 Order.php                  # Modelo de pedido\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrder.php        # Modelo de pedido individual\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrder.php         # Modelo de pedido em grupo\n\u2502   \u251c\u2500\u2500 OrderItem.php              # Modelo de item de pedido\n\u2502   \u251c\u2500\u2500 MenuItem.php               # Modelo de item do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuItem.php   # Extens\u00e3o para itens de \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuItem.php   # Extens\u00e3o para itens de fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzaMenuItem.php      # Extens\u00e3o para pizza (metades, bordas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 RodizioMenuItem.php    # Extens\u00e3o para rod\u00edzio\n\u2502   \u251c\u2500\u2500 Inventory.php              # Modelo de estoque\n\u2502   \u2502   \u2514\u2500\u2500 StockMovement.php      # Modelo de movimenta\u00e7\u00e3o de estoque\n\u2502   \u251c\u2500\u2500 Reservation.php            # Modelo de reserva\n\u2502   \u251c\u2500\u2500 Payment.php                # Modelo de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 BillSplit.php          # Modelo de divis\u00e3o de conta\n\u2502   \u251c\u2500\u2500 Staff.php                  # Modelo de funcion\u00e1rio\n\u2502   \u2502   \u2514\u2500\u2500 TimeClock.php          # Modelo de registro de ponto\n\u2502   \u251c\u2500\u2500 Supplier.php               # Modelo de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierContact.php    # Modelo de contato de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierOrder.php      # Modelo de pedido para fornecedor\n\u2502   \u2502   \u2514\u2500\u2500 SupplierRating.php     # Modelo de avalia\u00e7\u00e3o de fornecedor\n\u2502   \u251c\u2500\u2500 Customer.php               # Modelo de cliente\n\u2502   \u2502   \u2514\u2500\u2500 LoyaltyProgram.php     # Modelo de programa de fidelidade\n\u2502   \u251c\u2500\u2500 MarketingCampaign.php      # Modelo de campanha de marketing\n\u2502   \u251c\u2500\u2500 QRCode.php                 # Modelo de QR Code\n\u2502   \u251c\u2500\u2500 RestaurantConfiguration.php # Modelo de configura\u00e7\u00e3o do restaurante\n\u2502   \u2514\u2500\u2500 RestaurantInterface.php    # Modelo de interface do restaurante\n\u2502\n\u251c\u2500\u2500 views/                         # Visualiza\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 auth/                      # Telas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 login.php              # Tela de login\n\u2502   \u2502   \u251c\u2500\u2500 reset-password.php     # Redefini\u00e7\u00e3o de senha\n\u2502   \u2502   \u2514\u2500\u2500 register.php           # Cadastro inicial\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 subscription/              # Telas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # P\u00e1gina de planos dispon\u00edveis\n\u2502   \u2502   \u251c\u2500\u2500 checkout.php           # Checkout de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 success.php            # Confirma\u00e7\u00e3o de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 billing.php            # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 upgrade.php            # Upgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 downgrade.php          # Downgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 cancel.php             # Cancelamento de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 payment-methods.php    # Gest\u00e3o de m\u00e9todos de pagamento\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 onboarding/                # Telas de configura\u00e7\u00e3o inicial\n\u2502   \u2502   \u251c\u2500\u2500 welcome.php            # Boas-vindas e introdu\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-type.php    # Sele\u00e7\u00e3o de tipo de restaurante\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-comparison.php # Compara\u00e7\u00e3o entre tipos\n\u2502   \u2502   \u251c\u2500\u2500 basic-info.php         # Informa\u00e7\u00f5es b\u00e1sicas\n\u2502   \u2502   \u251c\u2500\u2500 menu-setup.php         # Configura\u00e7\u00e3o inicial do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 operating-hours.php    # Hor\u00e1rios de funcionamento\n\u2502   \u2502   \u251c\u2500\u2500 table-setup.php        # Configura\u00e7\u00e3o de mesas/layout\n\u2502   \u2502   \u251c\u2500\u2500 staff-roles.php        # Defini\u00e7\u00e3o de cargos\n\u2502   \u2502   \u251c\u2500\u2500 payment-options.php    # Op\u00e7\u00f5es de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 finalize.php           # Finaliza\u00e7\u00e3o e ativa\u00e7\u00e3o\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 dashboard/                 # Telas do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 index.php              # Dashboard principal (din\u00e2mico por tipo)\n\u2502   \u2502   \u251c\u2500\u2500 account-status.php     # Status da conta e assinatura\n\u2502   \u2502   \u251c\u2500\u2500 alacarte/              # Dashboards espec\u00edficos por tipo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal \u00e0 la carte\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tables.php         # Visualiza\u00e7\u00e3o de mesas \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood/              # Fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal fast food\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 queue.php          # Fila de pedidos fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria/              # Pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal pizzaria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pizza-builder.php  # Construtor de pizza\n\u2502   \u2502   \u251c\u2500\u2500 rodizio/               # Rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal rod\u00edzio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rounds.php         # Controle de passadas\n\u2502   \u2502   \u251c\u2500\u2500 selfservice/           # Self-service\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal self-service\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scales.php         # Controle de balan\u00e7as\n\u2502   \u2502   \u251c\u2500\u2500 delivery/              # Delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal delivery\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 routes.php         # Controle de rotas de entrega\n\u2502   \u2502   \u2514\u2500\u2500 multiunit/             # Rede de restaurantes\n\u2502   \u2502       \u251c\u2500\u2500 index.php          # Dashboard principal rede\n\u2502   \u2502       \u2514\u2500\u2500 units.php          # Controle de unidades\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tables/                    # Telas de mesas\n\u2502   \u2502   \u251c\u2500\u2500 map.php                # Mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 order.php              # Cria\u00e7\u00e3o de pedido\n\u2502   \u2502   \u2514\u2500\u2500 multi-user.php         # Gest\u00e3o de mesas com m\u00faltiplos usu\u00e1rios\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 menu/                      # Telas do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 admin.php              # Gerenciamento do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 editor.php             # Editor de itens do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 customer.php           # Card\u00e1pio para o cliente (QR Code)\n\u2502   \u2502   \u251c\u2500\u2500 category-manager.php   # Gerenciador de categorias\n\u2502   \u2502   \u251c\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es e card\u00e1pios especiais\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Card\u00e1pios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Layout para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Layout para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Layout para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Layout para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 selfservice.php    # Layout para self-service\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 kitchen/                   # Telas da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 panel.php              # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory-usage.php    # Uso de ingredientes\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Pain\u00e9is espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Painel para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Painel para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Painel para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 rodizio.php        # Painel para rod\u00edzio\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 inventory/                 # Telas de estoque\n\u2502   \u2502   \u251c\u2500\u2500 management.php         # Gerenciamento de estoque\n\u2502   \u2502   \u251c\u2500\u2500 movements.php          # Movimenta\u00e7\u00f5es de estoque\n\u2502   \u2502   \u2514\u2500\u2500 alerts.php             # Alertas de estoque\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 payments/                  # Telas de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 process.php            # Processamento de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 receipt.php            # Recibo\n\u2502   \u2502   \u251c\u2500\u2500 split-bill.php         # Divis\u00e3o de conta\n\u2502   \u2502   \u2514\u2500\u2500 group-payment.php      # Pagamento em grupo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 reports/                   # Telas de relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 sales.php              # Relat\u00f3rios de vendas\n\u2502   \u2502   \u251c\u2500\u2500 cash.php               # Fechamento de caixa\n\u2502   \u2502   \u251c\u2500\u2500 performance.php        # Desempenho de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 financial.php          # Relat\u00f3rios financeiros\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Relat\u00f3rios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Relat\u00f3rios para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Relat\u00f3rios para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Relat\u00f3rios para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Relat\u00f3rios para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 delivery.php       # Relat\u00f3rios para delivery\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 ifood/                     # Telas de integra\u00e7\u00e3o com iFood\n\u2502   \u2502   \u2514\u2500\u2500 orders.php             # Pedidos do iFood\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 suppliers/                 # Telas de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 quick-order.php        # Pedido r\u00e1pido\n\u2502   \u2502   \u251c\u2500\u2500 history.php            # Hist\u00f3rico de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 ratings.php            # Avalia\u00e7\u00e3o de fornecedores\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 staff/                     # Telas de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do funcion\u00e1rio\n\u2502   \u2502   \u251c\u2500\u2500 schedule.php           # Escala de trabalho\n\u2502   \u2502   \u2514\u2500\u2500 time-clock/            # Sistema de ponto\n\u2502   \u2502       \u251c\u2500\u2500 register.php       # Registro de ponto\n\u2502   \u2502       \u251c\u2500\u2500 management.php     # Gest\u00e3o de ponto\n\u2502   \u2502       \u2514\u2500\u2500 reports.php        # Relat\u00f3rios de ponto\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 customers/                 # Telas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de clientes\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do cliente\n\u2502   \u2502   \u2514\u2500\u2500 loyalty.php            # Programa de fidelidade\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 marketing/                 # Telas de marketing\n\u2502   \u2502   \u251c\u2500\u2500 campaigns.php          # Campanhas de marketing\n\u2502   \u2502   \u2514\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 qrcode/                    # Telas de gest\u00e3o de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 generator.php          # Gerador de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 manager.php            # Gestor de QR Codes\n\u2502   \u2502   \u2514\u2500\u2500 preview.php            # Pr\u00e9-visualiza\u00e7\u00e3o de QR Codes\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 admin/                     # \u00c1rea administrativa da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 accounts.php           # Gest\u00e3o de contas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # Configura\u00e7\u00e3o de planos\n\u2502   \u2502   \u251c\u2500\u2500 statistics.php         # Estat\u00edsticas da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 support.php            # Sistema de suporte\n\u2502   \u2502   \u2514\u2500\u2500 settings.php           # Configura\u00e7\u00f5es da plataforma\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 settings/                  # Telas de configura\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 general.php            # Configura\u00e7\u00f5es gerais\n\u2502       \u251c\u2500\u2500 restaurant-type.php    # Configura\u00e7\u00e3o de tipo de restaurante\n\u2502       \u251c\u2500\u2500 interfaces.php         # Configura\u00e7\u00e3o de interfaces\n\u2502       \u251c\u2500\u2500 qrcode.php             # Configura\u00e7\u00e3o de QR Code\n\u2502       \u251c\u2500\u2500 group-orders.php       # Configura\u00e7\u00e3o de pedidos em grupo\n\u2502       \u251c\u2500\u2500 time-clock.php         # Configura\u00e7\u00e3o de ponto\n\u2502       \u251c\u2500\u2500 integrations.php       # Integra\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 account.php            # Configura\u00e7\u00f5es da conta/assinatura\n\u2502       \u2514\u2500\u2500 backup.php             # Backup e seguran\u00e7a\n\u2502\n\u251c\u2500\u2500 includes/                      # Arquivos inclu\u00eddos\n\u2502   \u251c\u2500\u2500 functions.php              # Fun\u00e7\u00f5es auxiliares\n\u2502   \u251c\u2500\u2500 validation.php             # Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 session.php                # Gerenciamento de sess\u00e3o\n\u2502   \u251c\u2500\u2500 security.php               # Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 currency.php               # Formata\u00e7\u00e3o de moeda\n\u2502   \u251c\u2500\u2500 date.php                   # Fun\u00e7\u00f5es de data e hora\n\u2502   \u251c\u2500\u2500 notification.php           # Sistema de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 restaurant-type-helper.php # Fun\u00e7\u00f5es auxiliares para tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface-loader.php       # Carregador de interfaces espec\u00edficas\n\u2502   \u251c\u2500\u2500 tenant-resolver.php        # Resolu\u00e7\u00e3o de tenant\n\u2502   \u251c\u2500\u2500 feature-checker.php        # Verifica\u00e7\u00e3o de recursos dispon\u00edveis por plano\n\u2502   \u2514\u2500\u2500 subscription-helper.php    # Fun\u00e7\u00f5es auxiliares para assinaturas\n\u2502\n\u251c\u2500\u2500 api/                           # Endpoints da API\n\u2502   \u251c\u2500\u2500 auth.php                   # API de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 subscription.php           # API de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # API de planos\n\u2502   \u2502   \u251c\u2500\u2500 webhooks.php           # Webhooks do Stripe\n\u2502   \u2502   \u2514\u2500\u2500 billing.php            # API de faturamento\n\u2502   \u251c\u2500\u2500 tables.php                 # API de mesas\n\u2502   \u251c\u2500\u2500 orders.php                 # API de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 group-orders.php       # API de pedidos em grupo\n\u2502   \u251c\u2500\u2500 menu.php                   # API do card\u00e1pio\n\u2502   \u251c\u2500\u2500 payments.php               # API de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 bill-split.php         # API de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ifood.php                  # API de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 suppliers.php              # API de fornecedores\n\u2502   \u251c\u2500\u2500 staff.php                  # API de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 time-clock.php         # API de registro de ponto\n\u2502   \u251c\u2500\u2500 customers.php              # API de clientes\n\u2502   \u251c\u2500\u2500 reports.php                # API de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 qrcode.php                 # API de QR Codes\n\u2502   \u2514\u2500\u2500 restaurant-type.php        # API de tipo de restaurante\n\u2502\n\u251c\u2500\u2500 services/                      # Servi\u00e7os\n\u2502   \u251c\u2500\u2500 StripeService.php          # Servi\u00e7o de pagamento Stripe\n\u2502   \u251c\u2500\u2500 SubscriptionService.php    # Servi\u00e7o de gerenciamento de assinaturas\n\u2502   \u251c\u2500\u2500 BillingService.php         # Servi\u00e7o de gerenciamento de faturas\n\u2502   \u251c\u2500\u2500 TenantService.php          # Servi\u00e7o de gest\u00e3o multi-tenant\n\u2502   \u251c\u2500\u2500 FeatureLimitService.php    # Servi\u00e7o de controle de limites por plano\n\u2502   \u251c\u2500\u2500 QRCodeService.php          # Servi\u00e7o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 PDFService.php             # Servi\u00e7o de gera\u00e7\u00e3o de PDF\n\u2502   \u251c\u2500\u2500 iFoodService.php           # Servi\u00e7o de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 EmailService.php           # Servi\u00e7o de e-mail\n\u2502   \u251c\u2500\u2500 SMSService.php             # Servi\u00e7o de SMS\n\u2502   \u251c\u2500\u2500 NotificationService.php    # Servi\u00e7o de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 ChartService.php           # Servi\u00e7o de gera\u00e7\u00e3o de gr\u00e1ficos\n\u2502   \u251c\u2500\u2500 BackupService.php          # Servi\u00e7o de backup\n\u2502   \u251c\u2500\u2500 RestaurantTypeService.php  # Servi\u00e7o de tipo de restaurante\n\u2502   \u251c\u2500\u2500 InterfaceService.php       # Servi\u00e7o de interfaces\n\u2502   \u251c\u2500\u2500 ScaleService.php           # Servi\u00e7o de integra\u00e7\u00e3o com balan\u00e7as\n\u2502   \u251c\u2500\u2500 DeliveryTrackingService.php # Servi\u00e7o de rastreamento de entregas\n\u2502   \u2514\u2500\u2500 RodizioTrackingService.php # Servi\u00e7o de controle de rod\u00edzio\n\u2502\n\u251c\u2500\u2500 database/                      # Arquivos de banco de dados\n\u2502   \u251c\u2500\u2500 migrations/                # Migra\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 create_tenants_table.php     # Tabela de tenants\n\u2502   \u2502   \u251c\u2500\u2500 create_accounts_table.php    # Tabela de contas\n\u2502   \u2502   \u251c\u2500\u2500 create_subscriptions_table.php # Tabela de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 create_plans_table.php       # Tabela de planos\n\u2502   \u2502   \u251c\u2500\u2500 create_invoices_table.php    # Tabela de faturas\n\u2502   \u2502   \u251c\u2500\u2500 create_usage_logs_table.php  # Tabela de uso de recursos\n\u2502   \u2502   \u251c\u2500\u2500 create_users_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_types_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurants_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_configurations_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_tables_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_menu_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_order_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_inventory_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_customers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_staff_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_time_clock_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_suppliers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_contacts_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_payments_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_bill_splits_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_qrcodes_table.php\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 seeds/                     # Seeds\n\u2502       \u251c\u2500\u2500 plans_seeder.php       # Seed para planos de assinatura\n\u2502       \u251c\u2500\u2500 features_seeder.php    # Seed para recursos por plano\n\u2502       \u251c\u2500\u2500 users_seeder.php\n\u2502       \u251c\u2500\u2500 restaurant_types_seeder.php\n\u2502       \u251c\u2500\u2500 menu_items_seeder.php\n\u2502       \u251c\u2500\u2500 suppliers_seeder.php\n\u2502       \u251c\u2500\u2500 staff_seeder.php\n\u2502       \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 public/                        # Arquivos p\u00fablicos\n\u2502   \u251c\u2500\u2500 index.php                  # Ponto de entrada principal\n\u2502   \u251c\u2500\u2500 pricing.php                # P\u00e1gina p\u00fablica de pre\u00e7os\n\u2502   \u251c\u2500\u2500 register.php               # P\u00e1gina de registro\n\u2502   \u251c\u2500\u2500 customer-menu.php          # P\u00e1gina do card\u00e1pio digital\n\u2502   \u251c\u2500\u2500 group-order.php            # P\u00e1gina de pedido em grupo\n\u2502   \u251c\u2500\u2500 time-clock.php             # P\u00e1gina de registro de ponto\n\u2502   \u251c\u2500\u2500 webhook/                   # Endpoints de webhooks\n\u2502   \u2502   \u2514\u2500\u2500 stripe.php             # Webhook do Stripe\n\u2502   \u251c\u2500\u2500 qr/                        # QR Codes gerados\n\u2502   \u2502   \u2514\u2500\u2500 tables/                # QR Codes para mesas\n\u2502   \u251c\u2500\u2500 receipt/                   # Recibos gerados\n\u2502   \u2514\u2500\u2500 .htaccess                  # Configura\u00e7\u00e3o do Apache\n\u2502\n\u251c\u2500\u2500 mobile/                        # Arquivos de interface mobile\n\u2502   \u251c\u2500\u2500 index.php                  # Entrada principal mobile\n\u2502   \u251c\u2500\u2500 menu.php                   # Card\u00e1pio digital mobile\n\u2502   \u251c\u2500\u2500 order.php                  # Interface de pedido mobile\n\u2502   \u251c\u2500\u2500 group-order.php            # Interface de pedido em grupo\n\u2502   \u251c\u2500\u2500 payment.php                # Interface de pagamento mobile\n\u2502   \u251c\u2500\u2500 types/                     # Interfaces espec\u00edficas por tipo\n\u2502   \u2502   \u251c\u2500\u2500 alacarte.php           # Interface mobile para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood.php           # Interface mobile para fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria.php           # Interface mobile para pizzaria\n\u2502   \u2502   \u2514\u2500\u2500 rodizio.php            # Interface mobile para rod\u00edzio\n\u2502   \u2514\u2500\u2500 staff/                     # Interface para funcion\u00e1rios\n\u2502       \u2514\u2500\u2500 time-clock.php         # Registro de ponto mobile\n\u2502\n\u251c\u2500\u2500 docs/                          # Documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 setup.md                   # Instru\u00e7\u00f5es de instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 admin-guide.md             # Guia do administrador\n\u2502   \u251c\u2500\u2500 user-guide.md              # Guia do usu\u00e1rio\n\u2502   \u251c\u2500\u2500 api-docs.md                # Documenta\u00e7\u00e3o da API\n\u2502   \u251c\u2500\u2500 database-schema.md         # Esquema do banco de dados\n\u2502   \u251c\u2500\u2500 subscription.md            # Documenta\u00e7\u00e3o do sistema de assinaturas\n\u2502   \u2514\u2500\u2500 restaurant-types/          # Documenta\u00e7\u00e3o espec\u00edfica por tipo\n\u2502       \u251c\u2500\u2500 alacarte.md            # Documenta\u00e7\u00e3o para \u00e0 la carte\n\u2502       \u251c\u2500\u2500 fastfood.md            # Documenta\u00e7\u00e3o para fast food\n\u2502       \u251c\u2500\u2500 pizzaria.md            # Documenta\u00e7\u00e3o para pizzaria\n\u2502       \u2514\u2500\u2500 ...                    # Outros tipos\n\u2502\n\u251c\u2500\u2500 tests/                         # Testes automatizados\n\u2502   \u251c\u2500\u2500 unit/                      # Testes unit\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 subscription/          # Testes de assinatura\n\u2502   \u251c\u2500\u2500 integration/               # Testes de integra\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 acceptance/                # Testes de aceita\u00e7\u00e3o\n\u2502\n\u251c\u2500\u2500 vendor/                        # Depend\u00eancias (Composer)\n\u2502\n\u251c\u2500\u2500 .htaccess                      # Configura\u00e7\u00e3o do Apache\n\u251c\u2500\u2500 index.php                      # Arquivo inicial (redirecionamento)\n\u251c\u2500\u2500 composer.json                  # Configura\u00e7\u00e3o do Composer\n\u251c\u2500\u2500 package.json                   # Configura\u00e7\u00e3o do NPM\n\u251c\u2500\u2500 README.md                      # Documenta\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 LICENSE                        # Licen\u00e7a do software\n\u2514\u2500\u2500 .gitignore                     # Arquivos ignorados pelo Git\n```\n\n## Conclus\u00e3o\n\nO Sistema de Gest\u00e3o de Restaurantes SaaS representa uma solu\u00e7\u00e3o completa e flex\u00edvel, adaptada para diversos tipos de estabelecimentos. A implementa\u00e7\u00e3o como servi\u00e7o por assinatura permite escalabilidade e sustentabilidade do neg\u00f3cio, enquanto a personaliza\u00e7\u00e3o por tipo de restaurante garante que cada cliente tenha uma experi\u00eancia otimizada para seu modelo espec\u00edfico.\n\nA arquitetura multi-tenant, combinada com um modelo de planos em n\u00edveis, permite atender desde pequenos estabelecimentos at\u00e9 grandes redes, com um caminho claro de crescimento que acompanha a evolu\u00e7\u00e3o do neg\u00f3cio do cliente.\n\n\n\nA integra\u00e7\u00e3o com servi\u00e7os essenciais como Stripe para pagamentos, iFood para delivery, e um sistema robusto de QR Codes para pedidos digitais posiciona o sistema como uma solu\u00e7\u00e3o moderna e completa para o mercado de restaurantes, que cada vez mais demanda digitaliza\u00e7\u00e3o e efici\u00eancia operacional.\n\nO projeto apresentado n\u00e3o apenas resolve os desafios operacionais do dia a dia de um restaurante, mas tamb\u00e9m oferece insights valiosos baseados em dados que podem impulsionar o crescimento e a lucratividade do neg\u00f3cio.\n\n\n\n## Resumo \n\n\n# Checkpoint de Desenvolvimento do Sistema de Gest\u00e3o de Restaurantes SaaS\n\n\n\n### Componentes Implementados:\n\n1. **Banco de Dados MySQL (100%)**\n   - Esquema completo com todas as tabelas necess\u00e1rias\n   - Rela\u00e7\u00f5es e chaves estrangeiras\n   - \u00cdndices para otimiza\u00e7\u00e3o\n   - Estrutura para dados JSON\n   - Suporte completo para multi-tenant\n   -- Cria\u00e7\u00e3o do banco de dados\nCREATE DATABASE restaurante_saas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nUSE restaurante_saas;\n\n-- -----------------------------------------------------\n-- Tabelas do Sistema SaaS (Plataforma)\n-- -----------------------------------------------------\n\n-- Tabela de tenants (restaurantes)\nCREATE TABLE tenants (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) NOT NULL UNIQUE,\n    restaurant_type VARCHAR(20) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL,\n    logo VARCHAR(255) DEFAULT NULL,\n    theme_color VARCHAR(7) DEFAULT '#3498db',\n    domain VARCHAR(100) DEFAULT NULL,\n    \n    -- Campos para configura\u00e7\u00e3o de pagamentos\n    payment_gateway ENUM('stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede') DEFAULT 'stripe',\n    payment_gateway_key VARCHAR(255) DEFAULT NULL,\n    payment_gateway_token VARCHAR(255) DEFAULT NULL,\n    bank_name VARCHAR(100) DEFAULT NULL,\n    bank_agency VARCHAR(20) DEFAULT NULL,\n    bank_account VARCHAR(30) DEFAULT NULL,\n    pix_key VARCHAR(255) DEFAULT NULL,\n    payment_methods JSON DEFAULT '{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}',\n    payment_settings JSON DEFAULT '{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}',\n    \n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de planos de assinatura\nCREATE TABLE plans (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    code VARCHAR(20) NOT NULL UNIQUE,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    billing_cycle ENUM('monthly', 'quarterly', 'semiannual', 'annual') DEFAULT 'monthly',\n    features JSON NOT NULL,\n    limits JSON NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    stripe_product_id VARCHAR(100) DEFAULT NULL,\n    stripe_price_id VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de assinaturas\nCREATE TABLE subscriptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    plan_id INT UNSIGNED NOT NULL,\n    stripe_subscription_id VARCHAR(100) DEFAULT NULL,\n    stripe_customer_id VARCHAR(100) DEFAULT NULL,\n    status ENUM('trial', 'active', 'past_due', 'canceled', 'suspended') NOT NULL DEFAULT 'trial',\n    trial_ends_at TIMESTAMP NULL DEFAULT NULL,\n    ends_at TIMESTAMP NULL DEFAULT NULL,\n    next_billing_at TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (plan_id) REFERENCES plans(id)\n) ENGINE=InnoDB;\n\n-- Tabela de faturas\nCREATE TABLE invoices (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    subscription_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED NOT NULL,\n    stripe_invoice_id VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('draft', 'open', 'paid', 'uncollectible', 'void') NOT NULL DEFAULT 'draft',\n    due_date TIMESTAMP NULL DEFAULT NULL,\n    paid_at TIMESTAMP NULL DEFAULT NULL,\n    pdf_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de controle de uso de recursos\nCREATE TABLE resource_usage (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    resource_type VARCHAR(50) NOT NULL,\n    resource_count INT NOT NULL DEFAULT 1,\n    year INT NOT NULL,\n    month INT NOT NULL,\n    day INT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_resource_usage_per_day (tenant_id, resource_type, year, month, day),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Usu\u00e1rios e Acesso\n-- -----------------------------------------------------\n\n-- Tabela de usu\u00e1rios\nCREATE TABLE users (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NULL DEFAULT NULL,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin') NOT NULL,\n    phone VARCHAR(20) DEFAULT NULL,\n    profile_image VARCHAR(255) DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE,\n    last_login TIMESTAMP NULL DEFAULT NULL,\n    password_reset_token VARCHAR(100) DEFAULT NULL,\n    password_reset_expires TIMESTAMP NULL DEFAULT NULL,\n    remember_token VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_user_email (email),\n    UNIQUE KEY unique_user_username (username),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es\nCREATE TABLE permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es por papel\nCREATE TABLE role_permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer') NOT NULL,\n    permission_id INT UNSIGNED NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_role_permission (tenant_id, role, permission_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id)\n) ENGINE=InnoDB;\n\n-- Tabela de log de acesso\nCREATE TABLE access_logs (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    user_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED DEFAULT NULL,\n    ip_address VARCHAR(45) NOT NULL,\n    user_agent VARCHAR(255) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    details JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00e3o do Restaurante\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es do restaurante\nCREATE TABLE restaurant_configurations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    opening_hours JSON DEFAULT NULL,\n    operating_days JSON DEFAULT NULL,\n    delivery_radius INT DEFAULT 5,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    min_delivery_value DECIMAL(10, 2) DEFAULT 0.00,\n    allow_pickup BOOLEAN DEFAULT TRUE,\n    allow_delivery BOOLEAN DEFAULT TRUE,\n    allow_reservations BOOLEAN DEFAULT TRUE,\n    allow_qrcode_orders BOOLEAN DEFAULT TRUE,\n    allow_group_orders BOOLEAN DEFAULT TRUE,\n    default_order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    estimated_preparation_time INT DEFAULT 30,\n    default_table_capacity INT DEFAULT 4,\n    use_kitchen_display BOOLEAN DEFAULT TRUE,\n    taxes_included BOOLEAN DEFAULT TRUE,\n    tax_rate DECIMAL(5, 2) DEFAULT 0.00,\n    service_fee DECIMAL(5, 2) DEFAULT 0.00,\n    tip_options JSON DEFAULT NULL,\n    notification_settings JSON DEFAULT NULL,\n    printer_settings JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de \u00e1reas do restaurante\nCREATE TABLE restaurant_areas (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de caixas/terminais\nCREATE TABLE cash_registers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    location VARCHAR(100) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de aberturas e fechamentos de caixa\nCREATE TABLE cash_register_operations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    operation_type ENUM('opening', 'closing') NOT NULL,\n    initial_amount DECIMAL(10, 2) DEFAULT 0.00,\n    final_amount DECIMAL(10, 2) DEFAULT 0.00,\n    system_calculated_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_notes TEXT DEFAULT NULL,\n    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    closing_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de reservas\nCREATE TABLE reservations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    customer_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) NOT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    number_of_people INT NOT NULL,\n    reservation_date DATE NOT NULL,\n    reservation_time TIME NOT NULL,\n    arrival_time TIMESTAMP NULL DEFAULT NULL,\n    departure_time TIMESTAMP NULL DEFAULT NULL,\n    status ENUM('pending', 'confirmed', 'seated', 'completed', 'canceled', 'no_show') DEFAULT 'pending',\n    special_requests TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Mesas e QR Code\n-- -----------------------------------------------------\n\n-- Tabela de mesas\nCREATE TABLE tables (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    area_id INT UNSIGNED DEFAULT NULL,\n    number VARCHAR(10) NOT NULL,\n    name VARCHAR(50) DEFAULT NULL,\n    capacity INT UNSIGNED DEFAULT 4,\n    position_x INT DEFAULT 0,\n    position_y INT DEFAULT 0,\n    status ENUM('available', 'occupied', 'reserved', 'cleaning', 'inactive') DEFAULT 'available',\n    qr_code VARCHAR(255) DEFAULT NULL,\n    qr_code_hash VARCHAR(64) DEFAULT NULL,\n    occupied_since TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_table_number_per_tenant (tenant_id, number),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (area_id) REFERENCES restaurant_areas(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de QR Codes\nCREATE TABLE qr_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    code VARCHAR(100) NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    type ENUM('table', 'menu', 'payment', 'custom') NOT NULL DEFAULT 'table',\n    data JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    scan_count INT UNSIGNED DEFAULT 0,\n    last_scanned TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de ocupa\u00e7\u00e3o de mesas\nCREATE TABLE table_occupancy_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED NOT NULL,\n    start_time TIMESTAMP NOT NULL,\n    end_time TIMESTAMP NULL DEFAULT NULL,\n    number_of_customers INT UNSIGNED DEFAULT 1,\n    order_id INT UNSIGNED DEFAULT NULL,\n    total_spent DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Card\u00e1pio e Itens\n-- -----------------------------------------------------\n\n-- Tabela de categorias de menu\nCREATE TABLE menu_categories (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    image VARCHAR(255) DEFAULT NULL,\n    sort_order INT DEFAULT 0,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_category_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens do menu\nCREATE TABLE menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    category_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    cost DECIMAL(10, 2) DEFAULT 0.00,\n    image VARCHAR(255) DEFAULT NULL,\n    preparation_time INT DEFAULT 15,\n    ingredients TEXT DEFAULT NULL,\n    allergens TEXT DEFAULT NULL,\n    nutritional_info JSON DEFAULT NULL,\n    available BOOLEAN DEFAULT TRUE,\n    featured BOOLEAN DEFAULT FALSE,\n    sort_order INT DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    restaurant_type_specific BOOLEAN DEFAULT FALSE,\n    restaurant_type_config JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES menu_categories(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de op\u00e7\u00f5es e adicionais para itens do menu\nCREATE TABLE menu_item_options (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_selections INT DEFAULT 0,\n    max_selections INT DEFAULT 1,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de valores para op\u00e7\u00f5es de itens do menu\nCREATE TABLE menu_item_option_values (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    option_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    price_adjustment DECIMAL(10, 2) DEFAULT 0.00,\n    available BOOLEAN DEFAULT TRUE,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (option_id) REFERENCES menu_item_options(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de card\u00e1pios especiais/promo\u00e7\u00f5es\nCREATE TABLE special_menus (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    start_date DATE DEFAULT NULL,\n    end_date DATE DEFAULT NULL,\n    start_time TIME DEFAULT NULL,\n    end_time TIME DEFAULT NULL,\n    days_of_week JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens em card\u00e1pios especiais\nCREATE TABLE special_menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    special_menu_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    special_price DECIMAL(10, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (special_menu_id) REFERENCES special_menus(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pedidos\n-- -----------------------------------------------------\n\n-- Tabela de pedidos\nCREATE TABLE orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    staff_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) DEFAULT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    order_number VARCHAR(20) NOT NULL,\n    order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'new',\n    subtotal DECIMAL(10, 2) NOT NULL,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    scheduled_for TIMESTAMP NULL DEFAULT NULL,\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP NULL DEFAULT NULL,\n    cancelled_at TIMESTAMP NULL DEFAULT NULL,\n    cancellation_reason TEXT DEFAULT NULL,\n    is_group_order BOOLEAN DEFAULT FALSE,\n    group_order_code VARCHAR(20) DEFAULT NULL,\n    payment_status ENUM('pending', 'paid', 'partially_paid', 'refunded', 'failed') DEFAULT 'pending',\n    source ENUM('in_person', 'qrcode', 'website', 'app', 'ifood', 'phone') DEFAULT 'in_person',\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n    FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de itens do pedido\nCREATE TABLE order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    options JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',\n    preparation_started_at TIMESTAMP NULL DEFAULT NULL,\n    preparation_completed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de status do pedido\nCREATE TABLE order_status_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') NOT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de entregas\nCREATE TABLE deliveries (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    delivery_address VARCHAR(255) NOT NULL,\n    delivery_city VARCHAR(100) NOT NULL,\n    delivery_state VARCHAR(2) NOT NULL,\n    delivery_zip_code VARCHAR(10) NOT NULL,\n    delivery_instructions TEXT DEFAULT NULL,\n    delivery_person_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'assigned', 'in_transit', 'delivered', 'failed') DEFAULT 'pending',\n    estimated_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    actual_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    tracking_code VARCHAR(50) DEFAULT NULL,\n    tracking_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (delivery_person_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pagamentos\n-- -----------------------------------------------------\n\n-- Tabela de pagamentos\nCREATE TABLE payments (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') NOT NULL,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    installments TINYINT DEFAULT 1,\n    card_brand VARCHAR(50) DEFAULT NULL,\n    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',\n    transaction_id VARCHAR(100) DEFAULT NULL,\n    payment_data JSON DEFAULT NULL,\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de divis\u00e3o de contas\nCREATE TABLE bill_splits (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    split_type ENUM('equal', 'custom', 'percentage', 'item') NOT NULL DEFAULT 'equal',\n    payment_status ENUM('pending', 'paid') DEFAULT 'pending',\n    items JSON DEFAULT NULL,\n    payment_link VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de transa\u00e7\u00f5es no caixa\nCREATE TABLE cash_register_transactions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    cash_register_operation_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    transaction_type ENUM('sale', 'refund', 'expense', 'deposit', 'withdrawal') NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') DEFAULT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type ENUM('order', 'invoice', 'expense', 'other') DEFAULT NULL,\n    description TEXT DEFAULT NULL,\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (cash_register_operation_id) REFERENCES cash_register_operations(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de cupons e descontos\nCREATE TABLE coupons (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    code VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    discount_type ENUM('percentage', 'fixed', 'free_item') NOT NULL,\n    discount_value DECIMAL(10, 2) NOT NULL,\n    free_item_id INT UNSIGNED DEFAULT NULL,\n    min_order_value DECIMAL(10, 2) DEFAULT 0.00,\n    max_discount DECIMAL(10, 2) DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    max_uses INT UNSIGNED DEFAULT NULL,\n    uses_count INT UNSIGNED DEFAULT 0,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_coupon_code_per_tenant (tenant_id, code),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (free_item_id) REFERENCES menu_items(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Estoque e Ingredientes\n-- -----------------------------------------------------\n\n-- Tabela de ingredientes\nCREATE TABLE ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    cost_per_unit DECIMAL(10, 4) NOT NULL,\n    inventory_alert_threshold DECIMAL(10, 2) DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    barcode VARCHAR(50) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de ingredientes por item do menu\nCREATE TABLE menu_item_ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_item_ingredient (menu_item_id, ingredient_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de estoque\nCREATE TABLE inventory (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL DEFAULT 0,\n    location VARCHAR(50) DEFAULT 'main',\n    last_count_date TIMESTAMP NULL DEFAULT NULL,\n    last_count_by INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_location (tenant_id, ingredient_id, location),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (last_count_by) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de movimenta\u00e7\u00f5es de estoque\nCREATE TABLE inventory_movements (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    movement_type ENUM('purchase', 'order_usage', 'adjustment', 'transfer', 'waste', 'return') NOT NULL,\n    unit_cost DECIMAL(10, 4) DEFAULT NULL,\n    location VARCHAR(50) DEFAULT 'main',\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de contagem de estoque (invent\u00e1rio)\nCREATE TABLE inventory_counts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    count_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    user_id INT UNSIGNED NOT NULL,\n    status ENUM('in_progress', 'completed', 'cancelled') DEFAULT 'in_progress',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de detalhes da contagem de estoque\nCREATE TABLE inventory_count_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    inventory_count_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    expected_quantity DECIMAL(10, 2) NOT NULL,\n    actual_quantity DECIMAL(10, 2) NOT NULL,\n    discrepancy DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (inventory_count_id) REFERENCES inventory_counts(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Funcion\u00e1rios\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de funcion\u00e1rios\nCREATE TABLE staff_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    department VARCHAR(100) DEFAULT NULL,\n    hire_date DATE DEFAULT NULL,\n    salary DECIMAL(10, 2) DEFAULT NULL,\n    hourly_rate DECIMAL(10, 2) DEFAULT NULL,\n    commission_rate DECIMAL(5, 2) DEFAULT NULL,\n    working_hours JSON DEFAULT NULL,\n    employee_id VARCHAR(50) DEFAULT NULL,\n    emergency_contact_name VARCHAR(100) DEFAULT NULL,\n    emergency_contact_phone VARCHAR(20) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_staff_employee_id (tenant_id, employee_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de registro de ponto\nCREATE TABLE time_clock (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP NULL DEFAULT NULL,\n    break_start TIMESTAMP NULL DEFAULT NULL,\n    break_end TIMESTAMP NULL DEFAULT NULL,\n    total_hours DECIMAL(5, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de comiss\u00f5es de vendas\nCREATE TABLE sales_commissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    commission_amount DECIMAL(10, 2) NOT NULL,\n    commission_rate DECIMAL(5, 2) NOT NULL,\n    status ENUM('pending', 'approved', 'paid', 'rejected') DEFAULT 'pending',\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de escalas de trabalho\nCREATE TABLE staff_schedules (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    schedule_date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Clientes\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de clientes\nCREATE TABLE customer_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    birth_date DATE DEFAULT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    allergy_info TEXT DEFAULT NULL,\n    favorite_items JSON DEFAULT NULL,\n    marketing_preferences JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de programa de fidelidade\nCREATE TABLE loyalty_program (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_per_currency DECIMAL(10, 2) DEFAULT 1.00,\n    points_validity_days INT UNSIGNED DEFAULT 365,\n    min_points_to_redeem INT UNSIGNED DEFAULT 100,\n    currency_per_point DECIMAL(10, 4) DEFAULT 0.01,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de n\u00edveis de fidelidade\nCREATE TABLE loyalty_tiers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_points INT UNSIGNED NOT NULL,\n    multiplier DECIMAL(5, 2) DEFAULT 1.00,\n    benefits JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pontos de fidelidade\nCREATE TABLE loyalty_points (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    points INT NOT NULL,\n    source ENUM('purchase', 'reward', 'bonus', 'adjustment', 'redemption') NOT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    is_expired BOOLEAN DEFAULT FALSE,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de recompensas do programa de fidelidade\nCREATE TABLE loyalty_rewards (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_required INT UNSIGNED NOT NULL,\n    reward_type ENUM('discount', 'free_item', 'gift', 'coupon') NOT NULL,\n    reward_value JSON NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de resgates de recompensas\nCREATE TABLE loyalty_redemptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    loyalty_reward_id INT UNSIGNED NOT NULL,\n    points_used INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'approved', 'used', 'expired', 'cancelled') DEFAULT 'pending',\n    redemption_code VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    used_at TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_reward_id) REFERENCES loyalty_rewards(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Fornecedores\n-- -----------------------------------------------------\n\n-- Tabela de fornecedores\nCREATE TABLE suppliers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) DEFAULT NULL,\n    email VARCHAR(100) DEFAULT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    contact_name VARCHAR(100) DEFAULT NULL,\n    contact_phone VARCHAR(20) DEFAULT NULL,\n    contact_email VARCHAR(100) DEFAULT NULL,\n    category VARCHAR(50) DEFAULT NULL,\n    payment_terms VARCHAR(100) DEFAULT NULL,\n    delivery_time INT DEFAULT NULL,\n    minimum_order DECIMAL(10, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de produtos de fornecedores\nCREATE TABLE supplier_products (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    sku VARCHAR(50) DEFAULT NULL,\n    supplier_sku VARCHAR(50) DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    ingredient_id INT UNSIGNED DEFAULT NULL,\n    conversion_factor DECIMAL(10, 4) DEFAULT 1.0000,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos a fornecedores\nCREATE TABLE supplier_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_number VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expected_delivery_date DATE DEFAULT NULL,\n    delivery_date DATE DEFAULT NULL,\n    status ENUM('draft', 'sent', 'confirmed', 'partially_received', 'received', 'cancelled') DEFAULT 'draft',\n    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0.00,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    shipping DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    payment_status ENUM('pending', 'partial', 'paid', 'cancelled') DEFAULT 'pending',\n    payment_method VARCHAR(50) DEFAULT NULL,\n    payment_details JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de itens de pedidos a fornecedores\nCREATE TABLE supplier_order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED NOT NULL,\n    supplier_product_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    quantity_received DECIMAL(10, 2) DEFAULT 0.00,\n    status ENUM('pending', 'partial', 'complete', 'cancelled') DEFAULT 'pending',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_product_id) REFERENCES supplier_products(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de avalia\u00e7\u00e3o de fornecedores\nCREATE TABLE supplier_ratings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    quality_rating TINYINT UNSIGNED DEFAULT NULL,\n    service_rating TINYINT UNSIGNED DEFAULT NULL,\n    price_rating TINYINT UNSIGNED DEFAULT NULL,\n    delivery_rating TINYINT UNSIGNED DEFAULT NULL,\n    overall_rating TINYINT UNSIGNED NOT NULL,\n    comments TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Relat\u00f3rios e M\u00e9tricas\n-- -----------------------------------------------------\n\n-- Tabela de relat\u00f3rios salvos\nCREATE TABLE saved_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    report_type VARCHAR(50) NOT NULL,\n    parameters JSON NOT NULL,\n    public BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de relat\u00f3rios agendados\nCREATE TABLE scheduled_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    saved_report_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    frequency ENUM('daily', 'weekly', 'monthly', 'quarterly') NOT NULL,\n    day_of_week TINYINT UNSIGNED DEFAULT NULL,\n    day_of_month TINYINT UNSIGNED DEFAULT NULL,\n    time_of_day TIME NOT NULL,\n    recipients JSON NOT NULL,\n    last_sent TIMESTAMP NULL DEFAULT NULL,\n    next_scheduled TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (saved_report_id) REFERENCES saved_reports(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de m\u00e9tricas di\u00e1rias\nCREATE TABLE daily_metrics (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    metric_date DATE NOT NULL,\n    sales DECIMAL(10, 2) DEFAULT 0.00,\n    orders INT UNSIGNED DEFAULT 0,\n    customers INT UNSIGNED DEFAULT 0,\n    average_ticket DECIMAL(10, 2) DEFAULT 0.00,\n    tables_served INT UNSIGNED DEFAULT 0,\n    average_table_time INT UNSIGNED DEFAULT 0,\n    staff_count INT UNSIGNED DEFAULT 0,\n    labor_cost DECIMAL(10, 2) DEFAULT 0.00,\n    cogs DECIMAL(10, 2) DEFAULT 0.00,\n    profit_margin DECIMAL(5, 2) DEFAULT 0.00,\n    item_metrics JSON DEFAULT NULL,\n    payment_methods JSON DEFAULT NULL,\n    source_metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_tenant_date (tenant_id, metric_date),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Integra\u00e7\u00f5es Externas\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es de integra\u00e7\u00e3o com iFood\nCREATE TABLE ifood_integration (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    merchant_id VARCHAR(100) NOT NULL,\n    api_key VARCHAR(255) NOT NULL,\n    merchant_token VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT FALSE,\n    auto_accept_orders BOOLEAN DEFAULT FALSE,\n    default_preparation_time INT UNSIGNED DEFAULT 30,\n    sync_menu BOOLEAN DEFAULT TRUE,\n    sync_status BOOLEAN DEFAULT TRUE,\n    menu_last_sync TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos do iFood\nCREATE TABLE ifood_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    ifood_order_id VARCHAR(100) NOT NULL,\n    ifood_status VARCHAR(50) NOT NULL,\n    status_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    order_json JSON NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ifood_order (tenant_id, ifood_order_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de mapeamento de itens do card\u00e1pio com iFood\nCREATE TABLE ifood_menu_mapping (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ifood_item_id VARCHAR(100) NOT NULL,\n    ifood_category_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_mapping (tenant_id, menu_item_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de webhooks recebidos\nCREATE TABLE webhooks (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    source VARCHAR(50) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    webhook_id VARCHAR(100) NOT NULL,\n    payload JSON NOT NULL,\n    processed BOOLEAN DEFAULT FALSE,\n    error_message TEXT DEFAULT NULL,\n    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Marketing e Comunica\u00e7\u00e3o\n-- -----------------------------------------------------\n\n-- Tabela de campanhas de marketing\nCREATE TABLE marketing_campaigns (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    campaign_type ENUM('email', 'sms', 'push', 'in_app', 'multi_channel') NOT NULL,\n    target_audience JSON DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    content JSON NOT NULL,\n    metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de mensagens enviadas\nCREATE TABLE sent_messages (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    campaign_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    message_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    recipient VARCHAR(100) NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('sent', 'delivered', 'opened', 'clicked', 'bounced', 'failed') DEFAULT 'sent',\n    status_updated_at TIMESTAMP NULL DEFAULT NULL,\n    tracking_data JSON DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (campaign_id) REFERENCES marketing_campaigns(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de modelos de comunica\u00e7\u00e3o\nCREATE TABLE message_templates (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    template_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    variables JSON DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00f5es Fiscais\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es fiscais\nCREATE TABLE fiscal_settings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    company_tax_regime VARCHAR(50) DEFAULT NULL,\n    tax_id VARCHAR(50) DEFAULT NULL,\n    state_tax_id VARCHAR(50) DEFAULT NULL,\n    municipal_tax_id VARCHAR(50) DEFAULT NULL,\n    tax_rates JSON DEFAULT NULL,\n    fiscal_printer_model VARCHAR(100) DEFAULT NULL,\n    fiscal_printer_serial VARCHAR(100) DEFAULT NULL,\n    nfce_token VARCHAR(255) DEFAULT NULL,\n    nfce_certificate VARCHAR(255) DEFAULT NULL,\n    nfce_environment ENUM('production', 'sandbox') DEFAULT 'sandbox',\n    nfce_series INT UNSIGNED DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de notas fiscais\nCREATE TABLE fiscal_receipts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    receipt_type ENUM('nfce', 'nfe', 'sat', 'nfse') NOT NULL,\n    receipt_number VARCHAR(50) NOT NULL,\n    receipt_series VARCHAR(10) DEFAULT NULL,\n    receipt_key VARCHAR(100) DEFAULT NULL,\n    status ENUM('pending', 'issued', 'cancelled', 'error') DEFAULT 'pending',\n    issue_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_reason TEXT DEFAULT NULL,\n    receipt_url VARCHAR(255) DEFAULT NULL,\n    receipt_data JSON DEFAULT NULL,\n    qr_code TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de c\u00f3digo de produtos fiscais\nCREATE TABLE fiscal_item_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ncm VARCHAR(20) DEFAULT NULL,\n    cest VARCHAR(20) DEFAULT NULL,\n    cfop VARCHAR(10) DEFAULT NULL,\n    icms_rate DECIMAL(5, 2) DEFAULT NULL,\n    pis_rate DECIMAL(5, 2) DEFAULT NULL,\n    cofins_rate DECIMAL(5, 2) DEFAULT NULL,\n    iss_rate DECIMAL(5, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Dados iniciais\n-- -----------------------------------------------------\n\n-- Inserir planos de assinatura\nINSERT INTO plans (name, code, description, price, billing_cycle, features, limits, active) VALUES\n('Plano B\u00e1sico', 'basic', 'Ideal para pequenos estabelecimentos com funcionalidades essenciais', 99.90, 'monthly', \n '[\"qrcode_basic\", \"basic_reports\"]', \n '{\"max_tables\": 10, \"max_users\": 5, \"max_menu_items\": 50, \"max_monthly_orders\": 500}', \n true),\n('Plano Padr\u00e3o', 'standard', 'Perfeito para restaurantes de m\u00e9dio porte com recursos completos', 199.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\"]', \n '{\"max_tables\": 25, \"max_users\": 15, \"max_menu_items\": 150, \"max_monthly_orders\": 2000}', \n true),\n('Plano Premium', 'premium', 'Solu\u00e7\u00e3o completa para grandes estabelecimentos com funcionalidades avan\u00e7adas', 349.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\"]', \n '{\"max_tables\": 50, \"max_users\": 30, \"max_menu_items\": 300, \"max_monthly_orders\": 5000}', \n true),\n('Plano Enterprise', 'enterprise', 'Solu\u00e7\u00e3o personalizada para redes de restaurantes e franquias', 599.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\", \"api_access\", \"custom_integrations\"]', \n '{\"max_tables\": -1, \"max_users\": -1, \"max_menu_items\": -1, \"max_monthly_orders\": -1}', \n true);\n\n-- Inserir usu\u00e1rio admin para testes (senha: admin123)\nINSERT INTO users (username, email, password, name, role, active, email_verified) VALUES\n('admin', 'admin@restaurantesaas.com.br', '$2y$12$WxkpKAQQ1RBoOaNUvDH4R.UJYPzMvEVDkn5P3nCWfxmYUQQeMLOsW', 'Administrador', 'platform_admin', true, true);\n\n-- Inserir permiss\u00f5es b\u00e1sicas\nINSERT INTO permissions (name, description) VALUES\n('view_dashboard', 'Visualizar dashboard'),\n('manage_menu', 'Gerenciar card\u00e1pio'),\n('manage_orders', 'Gerenciar pedidos'),\n('manage_tables', 'Gerenciar mesas'),\n('manage_inventory', 'Gerenciar estoque'),\n('manage_staff', 'Gerenciar funcion\u00e1rios'),\n('manage_customers', 'Gerenciar clientes'),\n('manage_payments', 'Gerenciar pagamentos'),\n('view_reports', 'Visualizar relat\u00f3rios'),\n('manage_settings', 'Gerenciar configura\u00e7\u00f5es'),\n('manage_integrations', 'Gerenciar integra\u00e7\u00f5es'),\n('admin_access', 'Acesso administrativo completo');\n\n2. **Estrutura de Diret\u00f3rios (100%)**\n\n#!/bin/bash\n\n# Criar diret\u00f3rio raiz\nmkdir -p restaurante-sistema\n\n# Criar estrutura de assets\nmkdir -p restaurante-sistema/assets/css/restaurant-types\nmkdir -p restaurante-sistema/assets/js/restaurant-types\nmkdir -p restaurante-sistema/assets/images/logo\nmkdir -p restaurante-sistema/assets/images/icons/{menu,status,actions,payment,subscription}\nmkdir -p restaurante-sistema/assets/images/menu\nmkdir -p restaurante-sistema/assets/images/ui\nmkdir -p restaurante-sistema/assets/images/plans\nmkdir -p restaurante-sistema/assets/images/restaurant-types/{alacarte,fastfood,pizzaria}\nmkdir -p restaurante-sistema/assets/fonts\n\n# Criar arquivos CSS\ntouch restaurante-sistema/assets/css/main.css\ntouch restaurante-sistema/assets/css/login.css\ntouch restaurante-sistema/assets/css/dashboard.css\ntouch restaurante-sistema/assets/css/tables.css\ntouch restaurante-sistema/assets/css/menu.css\ntouch restaurante-sistema/assets/css/kitchen.css\ntouch restaurante-sistema/assets/css/reports.css\ntouch restaurante-sistema/assets/css/ponto.css\ntouch restaurante-sistema/assets/css/fornecedores.css\ntouch restaurante-sistema/assets/css/customer-mobile.css\ntouch restaurante-sistema/assets/css/subscription.css\ntouch restaurante-sistema/assets/css/pricing.css\ntouch restaurante-sistema/assets/css/billing.css\ntouch restaurante-sistema/assets/css/onboarding.css\n\n# Criar arquivos CSS espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/css/restaurant-types/alacarte.css\ntouch restaurante-sistema/assets/css/restaurant-types/fastfood.css\ntouch restaurante-sistema/assets/css/restaurant-types/pizzaria.css\ntouch restaurante-sistema/assets/css/restaurant-types/rodizio.css\ntouch restaurante-sistema/assets/css/restaurant-types/selfservice.css\ntouch restaurante-sistema/assets/css/restaurant-types/delivery.css\ntouch restaurante-sistema/assets/css/restaurant-types/foodtruck.css\ntouch restaurante-sistema/assets/css/restaurant-types/bar.css\ntouch restaurante-sistema/assets/css/restaurant-types/cafeteria.css\ntouch restaurante-sistema/assets/css/restaurant-types/multiunit.css\n\n# Criar arquivos JavaScript\ntouch restaurante-sistema/assets/js/main.js\ntouch restaurante-sistema/assets/js/login.js\ntouch restaurante-sistema/assets/js/dashboard.js\ntouch restaurante-sistema/assets/js/tables.js\ntouch restaurante-sistema/assets/js/orders.js\ntouch restaurante-sistema/assets/js/menu.js\ntouch restaurante-sistema/assets/js/kitchen.js\ntouch restaurante-sistema/assets/js/inventory.js\ntouch restaurante-sistema/assets/js/payments.js\ntouch restaurante-sistema/assets/js/stripe-integration.js\ntouch restaurante-sistema/assets/js/subscription.js\ntouch restaurante-sistema/assets/js/pricing-calculator.js\ntouch restaurante-sistema/assets/js/billing-portal.js\ntouch restaurante-sistema/assets/js/charts.js\ntouch restaurante-sistema/assets/js/ponto.js\ntouch restaurante-sistema/assets/js/supplier-manager.js\ntouch restaurante-sistema/assets/js/group-orders.js\ntouch restaurante-sistema/assets/js/bill-splitter.js\ntouch restaurante-sistema/assets/js/onboarding.js\n\n# Criar arquivos JavaScript espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/js/restaurant-types/alacarte.js\ntouch restaurante-sistema/assets/js/restaurant-types/fastfood.js\ntouch restaurante-sistema/assets/js/restaurant-types/pizzaria.js\ntouch restaurante-sistema/assets/js/restaurant-types/rodizio.js\ntouch restaurante-sistema/assets/js/restaurant-types/selfservice.js\ntouch restaurante-sistema/assets/js/restaurant-types/delivery.js\ntouch restaurante-sistema/assets/js/restaurant-types/multiunit.js\n\n# Criar estrutura de config\nmkdir -p restaurante-sistema/config\ntouch restaurante-sistema/config/database.php\ntouch restaurante-sistema/config/constants.php\ntouch restaurante-sistema/config/stripe.php\ntouch restaurante-sistema/config/email.php\ntouch restaurante-sistema/config/sms.php\ntouch restaurante-sistema/config/qrcode.php\ntouch restaurante-sistema/config/ifood.php\ntouch restaurante-sistema/config/restaurant_types.php\ntouch restaurante-sistema/config/interface_settings.php\ntouch restaurante-sistema/config/order_methods.php\ntouch restaurante-sistema/config/subscription_plans.php\ntouch restaurante-sistema/config/tenant.php\ntouch restaurante-sistema/config/feature_limits.php\n\n# Criar estrutura de controllers\nmkdir -p restaurante-sistema/controllers/subscription\nmkdir -p restaurante-sistema/controllers/DashboardController/{AlacarteDashboardController.php,FastFoodDashboardController.php,PizzariaDashboardController.php,RodizioDashboardController.php,DeliveryDashboardController.php}\nmkdir -p restaurante-sistema/controllers/OrderController\nmkdir -p restaurante-sistema/controllers/MenuController\nmkdir -p restaurante-sistema/controllers/PaymentController\nmkdir -p restaurante-sistema/controllers/SupplierController\nmkdir -p restaurante-sistema/controllers/StaffController\n\ntouch restaurante-sistema/controllers/AuthController.php\ntouch restaurante-sistema/controllers/SubscriptionController.php\ntouch restaurante-sistema/controllers/subscription/PlansController.php\ntouch restaurante-sistema/controllers/subscription/BillingController.php\ntouch restaurante-sistema/controllers/subscription/FeatureController.php\ntouch restaurante-sistema/controllers/TenantController.php\ntouch restaurante-sistema/controllers/OnboardingController.php\ntouch restaurante-sistema/controllers/DashboardController.php\ntouch restaurante-sistema/controllers/TableController.php\ntouch restaurante-sistema/controllers/OrderController.php\ntouch restaurante-sistema/controllers/OrderController/SingleOrderController.php\ntouch restaurante-sistema/controllers/OrderController/GroupOrderController.php\ntouch restaurante-sistema/controllers/MenuController.php\ntouch restaurante-sistema/controllers/MenuController/AlacarteMenuController.php\ntouch restaurante-sistema/controllers/MenuController/FastFoodMenuController.php\ntouch restaurante-sistema/controllers/MenuController/PizzariaMenuController.php\ntouch restaurante-sistema/controllers/MenuController/RodizioMenuController.php\ntouch restaurante-sistema/controllers/MenuController/SelfServiceMenuController.php\ntouch restaurante-sistema/controllers/KitchenController.php\ntouch restaurante-sistema/controllers/InventoryController.php\ntouch restaurante-sistema/controllers/PaymentController.php\ntouch restaurante-sistema/controllers/PaymentController/BillSplitController.php\ntouch restaurante-sistema/controllers/ReportController.php\ntouch restaurante-sistema/controllers/iFoodController.php\ntouch restaurante-sistema/controllers/SupplierController.php\ntouch restaurante-sistema/controllers/SupplierController/QuickOrderController.php\ntouch restaurante-sistema/controllers/StaffController.php\ntouch restaurante-sistema/controllers/StaffController/TimeClockController.php\ntouch restaurante-sistema/controllers/CustomerController.php\ntouch restaurante-sistema/controllers/QRCodeController.php\ntouch restaurante-sistema/controllers/RestaurantTypeController.php\ntouch restaurante-sistema/controllers/SettingsController.php\n\n# Criar estrutura de models\nmkdir -p restaurante-sistema/models/Account\nmkdir -p restaurante-sistema/models/Order\nmkdir -p restaurante-sistema/models/MenuItem\nmkdir -p restaurante-sistema/models/Inventory\nmkdir -p restaurante-sistema/models/Payment\nmkdir -p restaurante-sistema/models/Staff\nmkdir -p restaurante-sistema/models/Supplier\nmkdir -p restaurante-sistema/models/Customer\n\ntouch restaurante-sistema/models/User.php\ntouch restaurante-sistema/models/Account.php\ntouch restaurante-sistema/models/Account/Subscription.php\ntouch restaurante-sistema/models/Account/Plan.php\ntouch restaurante-sistema/models/Account/Invoice.php\ntouch restaurante-sistema/models/Account/Usage.php\ntouch restaurante-sistema/models/Tenant.php\ntouch restaurante-sistema/models/Restaurant.php\ntouch restaurante-sistema/models/RestaurantType.php\ntouch restaurante-sistema/models/CashRegister.php\ntouch restaurante-sistema/models/Table.php\ntouch restaurante-sistema/models/Order.php\ntouch restaurante-sistema/models/Order/SingleOrder.php\ntouch restaurante-sistema/models/Order/GroupOrder.php\ntouch restaurante-sistema/models/OrderItem.php\ntouch restaurante-sistema/models/MenuItem.php\ntouch restaurante-sistema/models/MenuItem/AlacarteMenuItem.php\ntouch restaurante-sistema/models/MenuItem/FastFoodMenuItem.php\ntouch restaurante-sistema/models/MenuItem/PizzaMenuItem.php\ntouch restaurante-sistema/models/MenuItem/RodizioMenuItem.php\ntouch restaurante-sistema/models/Inventory.php\ntouch restaurante-sistema/models/Inventory/StockMovement.php\ntouch restaurante-sistema/models/Reservation.php\ntouch restaurante-sistema/models/Payment.php\ntouch restaurante-sistema/models/Payment/BillSplit.php\ntouch restaurante-sistema/models/Staff.php\ntouch restaurante-sistema/models/Staff/TimeClock.php\ntouch restaurante-sistema/models/Supplier.php\ntouch restaurante-sistema/models/Supplier/SupplierContact.php\ntouch restaurante-sistema/models/Supplier/SupplierOrder.php\ntouch restaurante-sistema/models/Supplier/SupplierRating.php\ntouch restaurante-sistema/models/Customer.php\ntouch restaurante-sistema/models/Customer/LoyaltyProgram.php\ntouch restaurante-sistema/models/MarketingCampaign.php\ntouch restaurante-sistema/models/QRCode.php\ntouch restaurante-sistema/models/RestaurantConfiguration.php\ntouch restaurante-sistema/models/RestaurantInterface.php\n\n# Criar estrutura de views\nmkdir -p restaurante-sistema/views/auth\nmkdir -p restaurante-sistema/views/subscription\nmkdir -p restaurante-sistema/views/onboarding\nmkdir -p restaurante-sistema/views/dashboard/{alacarte,fastfood,pizzaria,rodizio,selfservice,delivery,multiunit}\nmkdir -p restaurante-sistema/views/tables\nmkdir -p restaurante-sistema/views/menu/types\nmkdir -p restaurante-sistema/views/kitchen/types\nmkdir -p restaurante-sistema/views/inventory\nmkdir -p restaurante-sistema/views/payments\nmkdir -p restaurante-sistema/views/reports/types\nmkdir -p restaurante-sistema/views/ifood\nmkdir -p restaurante-sistema/views/suppliers\nmkdir -p restaurante-sistema/views/staff/time-clock\nmkdir -p restaurante-sistema/views/customers\nmkdir -p restaurante-sistema/views/marketing\nmkdir -p restaurante-sistema/views/qrcode\nmkdir -p restaurante-sistema/views/admin\nmkdir -p restaurante-sistema/views/settings\n\n# Criar arquivos de views de autentica\u00e7\u00e3o\ntouch restaurante-sistema/views/auth/login.php\ntouch restaurante-sistema/views/auth/reset-password.php\ntouch restaurante-sistema/views/auth/register.php\n\n# Criar arquivos de views de assinatura\ntouch restaurante-sistema/views/subscription/plans.php\ntouch restaurante-sistema/views/subscription/checkout.php\ntouch restaurante-sistema/views/subscription/success.php\ntouch restaurante-sistema/views/subscription/billing.php\ntouch restaurante-sistema/views/subscription/upgrade.php\ntouch restaurante-sistema/views/subscription/downgrade.php\ntouch restaurante-sistema/views/subscription/cancel.php\ntouch restaurante-sistema/views/subscription/payment-methods.php\n\n# Criar arquivos de views de onboarding\ntouch restaurante-sistema/views/onboarding/welcome.php\ntouch restaurante-sistema/views/onboarding/restaurant-type.php\ntouch restaurante-sistema/views/onboarding/restaurant-comparison.php\ntouch restaurante-sistema/views/onboarding/basic-info.php\ntouch restaurante-sistema/views/onboarding/menu-setup.php\ntouch restaurante-sistema/views/onboarding/operating-hours.php\ntouch restaurante-sistema/views/onboarding/table-setup.php\ntouch restaurante-sistema/views/onboarding/staff-roles.php\ntouch restaurante-sistema/views/onboarding/payment-options.php\ntouch restaurante-sistema/views/onboarding/finalize.php\n\n# Criar arquivos de views de dashboard\ntouch restaurante-sistema/views/dashboard/index.php\ntouch restaurante-sistema/views/dashboard/account-status.php\ntouch restaurante-sistema/views/dashboard/alacarte/index.php\ntouch restaurante-sistema/views/dashboard/alacarte/tables.php\ntouch restaurante-sistema/views/dashboard/fastfood/index.php\ntouch restaurante-sistema/views/dashboard/fastfood/queue.php\ntouch restaurante-sistema/views/dashboard/pizzaria/index.php\ntouch restaurante-sistema/views/dashboard/pizzaria/pizza-builder.php\ntouch restaurante-sistema/views/dashboard/rodizio/index.php\ntouch restaurante-sistema/views/dashboard/rodizio/rounds.php\ntouch restaurante-sistema/views/dashboard/selfservice/index.php\ntouch restaurante-sistema/views/dashboard/selfservice/scales.php\ntouch restaurante-sistema/views/dashboard/delivery/index.php\ntouch restaurante-sistema/views/dashboard/delivery/routes.php\ntouch restaurante-sistema/views/dashboard/multiunit/index.php\ntouch restaurante-sistema/views/dashboard/multiunit/units.php\n\n# Criar mais arquivos de views (continua\u00e7\u00e3o)\ntouch restaurante-sistema/views/tables/map.php\ntouch restaurante-sistema/views/tables/order.php\ntouch restaurante-sistema/views/tables/multi-user.php\n\ntouch restaurante-sistema/views/menu/admin.php\ntouch restaurante-sistema/views/menu/editor.php\ntouch restaurante-sistema/views/menu/customer.php\ntouch restaurante-sistema/views/menu/category-manager.php\ntouch restaurante-sistema/views/menu/promotions.php\ntouch restaurante-sistema/views/menu/types/alacarte.php\ntouch restaurante-sistema/views/menu/types/fastfood.php\ntouch restaurante-sistema/views/menu/types/pizzaria.php\ntouch restaurante-sistema/views/menu/types/rodizio.php\ntouch restaurante-sistema/views/menu/types/selfservice.php\n\ntouch restaurante-sistema/views/kitchen/panel.php\ntouch restaurante-sistema/views/kitchen/inventory-usage.php\ntouch restaurante-sistema/views/kitchen/types/alacarte.php\ntouch restaurante-sistema/views/kitchen/types/fastfood.php\ntouch restaurante-sistema/views/kitchen/types/pizzaria.php\ntouch restaurante-sistema/views/kitchen/types/rodizio.php\n\ntouch restaurante-sistema/views/inventory/management.php\ntouch restaurante-sistema/views/inventory/movements.php\ntouch restaurante-sistema/views/inventory/alerts.php\n\ntouch restaurante-sistema/views/payments/process.php\ntouch restaurante-sistema/views/payments/receipt.php\ntouch restaurante-sistema/views/payments/split-bill.php\ntouch restaurante-sistema/views/payments/group-payment.php\n\ntouch restaurante-sistema/views/reports/sales.php\ntouch restaurante-sistema/views/reports/cash.php\ntouch restaurante-sistema/views/reports/performance.php\ntouch restaurante-sistema/views/reports/financial.php\ntouch restaurante-sistema/views/reports/types/alacarte.php\ntouch restaurante-sistema/views/reports/types/fastfood.php\ntouch restaurante-sistema/views/reports/types/pizzaria.php\ntouch restaurante-sistema/views/reports/types/rodizio.php\ntouch restaurante-sistema/views/reports/types/delivery.php\n\ntouch restaurante-sistema/views/ifood/orders.php\n\ntouch restaurante-sistema/views/suppliers/list.php\ntouch restaurante-sistema/views/suppliers/details.php\ntouch restaurante-sistema/views/suppliers/quick-order.php\ntouch restaurante-sistema/views/suppliers/history.php\ntouch restaurante-sistema/views/suppliers/ratings.php\n\ntouch restaurante-sistema/views/staff/list.php\ntouch restaurante-sistema/views/staff/details.php\ntouch restaurante-sistema/views/staff/schedule.php\ntouch restaurante-sistema/views/staff/time-clock/register.php\ntouch restaurante-sistema/views/staff/time-clock/management.php\ntouch restaurante-sistema/views/staff/time-clock/reports.php\n\ntouch restaurante-sistema/views/customers/list.php\ntouch restaurante-sistema/views/customers/details.php\ntouch restaurante-sistema/views/customers/loyalty.php\n\ntouch restaurante-sistema/views/marketing/campaigns.php\ntouch restaurante-sistema/views/marketing/promotions.php\n\ntouch restaurante-sistema/views/qrcode/generator.php\ntouch restaurante-sistema/views/qrcode/manager.php\ntouch restaurante-sistema/views/qrcode/preview.php\n\ntouch restaurante-sistema/views/admin/accounts.php\ntouch restaurante-sistema/views/admin/plans.php\ntouch restaurante-sistema/views/admin/statistics.php\ntouch restaurante-sistema/views/admin/support.php\ntouch restaurante-sistema/views/admin/settings.php\n\ntouch restaurante-sistema/views/settings/general.php\ntouch restaurante-sistema/views/settings/restaurant-type.php\ntouch restaurante-sistema/views/settings/interfaces.php\ntouch restaurante-sistema/views/settings/qrcode.php\ntouch restaurante-sistema/views/settings/group-orders.php\ntouch restaurante-sistema/views/settings/time-clock.php\ntouch restaurante-sistema/views/settings/integrations.php\ntouch restaurante-sistema/views/settings/account.php\ntouch restaurante-sistema/views/settings/backup.php\n\n# Criar estrutura de includes\nmkdir -p restaurante-sistema/includes\ntouch restaurante-sistema/includes/functions.php\ntouch restaurante-sistema/includes/validation.php\ntouch restaurante-sistema/includes/session.php\ntouch restaurante-sistema/includes/security.php\ntouch restaurante-sistema/includes/currency.php\ntouch restaurante-sistema/includes/date.php\ntouch restaurante-sistema/includes/notification.php\ntouch restaurante-sistema/includes/restaurant-type-helper.php\ntouch restaurante-sistema/includes/interface-loader.php\ntouch restaurante-sistema/includes/tenant-resolver.php\ntouch restaurante-sistema/includes/feature-checker.php\ntouch restaurante-sistema/includes/subscription-helper.php\n\n# Criar estrutura de API\nmkdir -p restaurante-sistema/api/subscription\nmkdir -p restaurante-sistema/api/orders\nmkdir -p restaurante-sistema/api/payments\nmkdir -p restaurante-sistema/api/staff\n\ntouch restaurante-sistema/api/auth.php\ntouch restaurante-sistema/api/subscription.php\ntouch restaurante-sistema/api/subscription/plans.php\ntouch restaurante-sistema/api/subscription/webhooks.php\ntouch restaurante-sistema/api/subscription/billing.php\ntouch restaurante-sistema/api/tables.php\ntouch restaurante-sistema/api/orders.php\ntouch restaurante-sistema/api/orders/group-orders.php\ntouch restaurante-sistema/api/menu.php\ntouch restaurante-sistema/api/payments.php\ntouch restaurante-sistema/api/payments/bill-split.php\ntouch restaurante-sistema/api/ifood.php\ntouch restaurante-sistema/api/suppliers.php\ntouch restaurante-sistema/api/staff.php\ntouch restaurante-sistema/api/staff/time-clock.php\ntouch restaurante-sistema/api/customers.php\ntouch restaurante-sistema/api/reports.php\ntouch restaurante-sistema/api/qrcode.php\ntouch restaurante-sistema/api/restaurant-type.php\n\n# Criar estrutura de services\nmkdir -p restaurante-sistema/services\ntouch restaurante-sistema/services/StripeService.php\ntouch restaurante-sistema/services/SubscriptionService.php\ntouch restaurante-sistema/services/BillingService.php\ntouch restaurante-sistema/services/TenantService.php\ntouch restaurante-sistema/services/FeatureLimitService.php\ntouch restaurante-sistema/services/QRCodeService.php\ntouch restaurante-sistema/services/PDFService.php\ntouch restaurante-sistema/services/iFoodService.php\ntouch restaurante-sistema/services/EmailService.php\ntouch restaurante-sistema/services/SMSService.php\ntouch restaurante-sistema/services/NotificationService.php\ntouch restaurante-sistema/services/ChartService.php\ntouch restaurante-sistema/services/BackupService.php\ntouch restaurante-sistema/services/RestaurantTypeService.php\ntouch restaurante-sistema/services/InterfaceService.php\ntouch restaurante-sistema/services/ScaleService.php\ntouch restaurante-sistema/services/DeliveryTrackingService.php\ntouch restaurante-sistema/services/RodizioTrackingService.php\n\n# Criar estrutura de database\nmkdir -p restaurante-sistema/database/migrations\nmkdir -p restaurante-sistema/database/seeds\n\ntouch restaurante-sistema/database/migrations/create_tenants_table.php\ntouch restaurante-sistema/database/migrations/create_accounts_table.php\ntouch restaurante-sistema/database/migrations/create_subscriptions_table.php\ntouch restaurante-sistema/database/migrations/create_plans_table.php\ntouch restaurante-sistema/database/migrations/create_invoices_table.php\ntouch restaurante-sistema/database/migrations/create_usage_logs_table.php\ntouch restaurante-sistema/database/migrations/create_users_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_types_table.php\ntouch restaurante-sistema/database/migrations/create_restaurants_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_configurations_table.php\ntouch restaurante-sistema/database/migrations/create_tables_table.php\ntouch restaurante-sistema/database/migrations/create_menu_items_table.php\ntouch restaurante-sistema/database/migrations/create_orders_table.php\ntouch restaurante-sistema/database/migrations/create_order_items_table.php\ntouch restaurante-sistema/database/migrations/create_inventory_table.php\ntouch restaurante-sistema/database/migrations/create_customers_table.php\ntouch restaurante-sistema/database/migrations/create_staff_table.php\ntouch restaurante-sistema/database/migrations/create_time_clock_table.php\ntouch restaurante-sistema/database/migrations/create_suppliers_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_orders_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_contacts_table.php\ntouch restaurante-sistema/database/migrations/create_payments_table.php\ntouch restaurante-sistema/database/migrations/create_bill_splits_table.php\ntouch restaurante-sistema/database/migrations/create_qrcodes_table.php\n\ntouch restaurante-sistema/database/seeds/plans_seeder.php\ntouch restaurante-sistema/database/seeds/features_seeder.php\ntouch restaurante-sistema/database/seeds/users_seeder.php\ntouch restaurante-sistema/database/seeds/restaurant_types_seeder.php\ntouch restaurante-sistema/database/seeds/menu_items_seeder.php\ntouch restaurante-sistema/database/seeds/suppliers_seeder.php\ntouch restaurante-sistema/database/seeds/staff_seeder.php\n\n# Criar estrutura de public\nmkdir -p restaurante-sistema/public/webhook\nmkdir -p restaurante-sistema/public/qr/tables\nmkdir -p restaurante-sistema/public/receipt\n\ntouch restaurante-sistema/public/index.php\ntouch restaurante-sistema/public/pricing.php\ntouch restaurante-sistema/public/register.php\ntouch restaurante-sistema/public/customer-menu.php\ntouch restaurante-sistema/public/group-order.php\ntouch restaurante-sistema/public/time-clock.php\ntouch restaurante-sistema/public/webhook/stripe.php\ntouch restaurante-sistema/public/.htaccess\n\n# Criar estrutura de mobile\nmkdir -p restaurante-sistema/mobile/types\nmkdir -p restaurante-sistema/mobile/staff\n\ntouch restaurante-sistema/mobile/index.php\ntouch restaurante-sistema/mobile/menu.php\ntouch restaurante-sistema/mobile/order.php\ntouch restaurante-sistema/mobile/group-order.php\ntouch restaurante-sistema/mobile/payment.php\ntouch restaurante-sistema/mobile/types/alacarte.php\ntouch restaurante-sistema/mobile/types/fastfood.php\ntouch restaurante-sistema/mobile/types/pizzaria.php\ntouch restaurante-sistema/mobile/types/rodizio.php\ntouch restaurante-sistema/mobile/staff/time-clock.php\n\n# Criar estrutura de docs\nmkdir -p restaurante-sistema/docs/restaurant-types\n\ntouch restaurante-sistema/docs/setup.md\ntouch restaurante-sistema/docs/admin-guide.md\ntouch restaurante-sistema/docs/user-guide.md\ntouch restaurante-sistema/docs/api-docs.md\ntouch restaurante-sistema/docs/database-schema.md\ntouch restaurante-sistema/docs/subscription.md\ntouch restaurante-sistema/docs/restaurant-types/alacarte.md\ntouch restaurante-sistema/docs/restaurant-types/fastfood.md\ntouch restaurante-sistema/docs/restaurant-types/pizzaria.md\n\n# Criar estrutura de tests\nmkdir -p restaurante-sistema/tests/unit/subscription\nmkdir -p restaurante-sistema/tests/integration\nmkdir -p restaurante-sistema/tests/acceptance\n\n# Criar estrutura de vendor (diret\u00f3rio vazio para Composer)\nmkdir -p restaurante-sistema/vendor\n\n# Criar arquivos raiz\ntouch restaurante-sistema/.htaccess\ntouch restaurante-sistema/index.php\ntouch restaurante-sistema/composer.json\ntouch restaurante-sistema/package.json\ntouch restaurante-sistema/README.md\ntouch restaurante-sistema/LICENSE\ntouch restaurante-sistema/.gitignore\n\n\ntudo acima meno o banco de dados precisar ser criado, incluindo o diret\u00f3rio\n\n# CHECKPOINT DE DESENVOLVIMENTO - SISTEMA DE GEST\u00c3O DE RESTAURANTES SAAS\n\n## PROGRESSO ATUAL: 0% CONCLU\u00cdDO\n\n\nEste checkpoint resume o progresso atual e define claramente os pr\u00f3ximos passos para o desenvolvimento. Em sua pr\u00f3xima conversa, voc\u00ea pode continuar a partir deste ponto, concentrando-se na implementa\u00e7\u00e3o dos m\u00f3dulos listados acima.\n\n\n\n\n\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\n- /core/config/app.php\n- restaurante-sistema/core/Router.php\n- restaurante-sistema/core/Controller.php\n- restaurante-sistema/core/View.php\n- restaurante-sistema/core/Response.php\n- restaurante-sistema/core/ErrorHandler.php\n- restaurante-sistema/restaurante-sistema/core/Database/MigrationManager.php\n- restaurante-sistema/restaurante-sistema/core/Database/Migration.php\n- restaurante-sistema/restaurante-sistema/migrate.php\n- restaurante-sistema/restaurante-sistema/database/migrations/001_create_tenants_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/002_create_users_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/003_create_roles_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/004_create_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/006_create_access_logs_table.php\n- restaurante-sistema/restaurante-sistema/models/User.php\n- restaurante-sistema/restaurante-sistema/controllers/AuthController.php\n- restaurante-sistema/Migration Manager\n- restaurante-sistema/Base Migration Class\n- restaurante-sistema/CLI Migration Runner\n- restaurante-sistema/Actual Migration Files\n- restaurante-sistema/Modelo de Usu\u00e1rio\n- restaurante-sistema/Controlador de Autentica\u00e7\u00e3o\n- restaurante-sistema/core/Database/MigrationManager.php\n- restaurante-sistema/core/Database/Migration.php\n- restaurante-sistema/migrate.php\n- restaurante-sistema/database/migrations/001_create_tenants_table.php\n- restaurante-sistema/database/migrations/002_create_users_table.php\n- restaurante-sistema/database/migrations/003_create_roles_table.php\n- restaurante-sistema/database/migrations/004_create_permissions_table.php\n- restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n- restaurante-sistema/database/migrations/006_create_access_logs_table.php\n- restaurante-sistema/core/App.php\n- restaurante-sistema/core/Database/DatabaseConnection.php\n- restaurante-sistema/core/Model.php\n- restaurante-sistema/core/Exceptions/AppException.php\n- restaurante-sistema/core/Exceptions/DatabaseException.php\n- restaurante-sistema/core/Exceptions/ModelException.php\n- restaurante-sistema/core/Exceptions/ValidationException.php\n- restaurante-sistema/Arquivo: core/App.php\n- restaurante-sistema/Arquivo: core/Database/DatabaseConnection.php\n- restaurante-sistema/Arquivo: core/Model.php\n- restaurante-sistema/Arquivo: core/Exceptions/AppException.php\n- restaurante-sistema/Arquivo: core/Exceptions/DatabaseException.php\n- restaurante-sistema/Arquivo: core/Exceptions/ModelException.php\n- restaurante-sistema/Arquivo: core/Exceptions/ValidationException.php\n\n## Requisitos para o Pr\u00f3ximo Passo\n# Desenvolvimento do Sistema SaaS de Restaurantes - Pr\u00f3ximos 10%\n\nAgora que temos o sistema de onboarding, perfis e QR codes b\u00e1sicos implementados, vamos avan\u00e7ar para componentes centrais da opera\u00e7\u00e3o do restaurante. Esta fase focar\u00e1 no gerenciamento de card\u00e1pio, mesas, pedidos b\u00e1sicos e o painel de cozinha inicial.\n\n## REQUISITOS PARA ESTA FASE\n\n### 1. Sistema de Gerenciamento de Card\u00e1pio\n\n#### 1.1 Categorias de Menu\n- Implementar CRUD completo para categorias de menu\n- Desenvolver ordena\u00e7\u00e3o e hierarquia de categorias (categorias/subcategorias)\n- Criar sistema de ativa\u00e7\u00e3o/desativa\u00e7\u00e3o de categorias\n- Implementar sistema de disponibilidade por hor\u00e1rio (ex: caf\u00e9 da manh\u00e3, almo\u00e7o, jantar)\n\n#### 1.2 Itens do Card\u00e1pio\n- Implementar CRUD completo para itens do card\u00e1pio\n- Desenvolver sistema de upload e gerenciamento de imagens dos pratos\n- Criar sistema de varia\u00e7\u00f5es de produtos (tamanhos, op\u00e7\u00f5es, etc.)\n- Implementar gerenciamento de pre\u00e7os e promo\u00e7\u00f5es\n- Desenvolver sistema de ingredientes e alerg\u00eanicos\n- Criar identificadores visuais (vegetariano, vegano, sem gl\u00faten, etc.)\n\n#### 1.3 Card\u00e1pios Espec\u00edficos por Tipo de Restaurante\n- Implementar personaliza\u00e7\u00e3o para card\u00e1pio \u00e0 la carte\n- Desenvolver sistema de combos para fast food\n- Criar sistema de montagem para pizzarias (sabores, bordas, tamanhos)\n- Implementar controle de cortes e tipos para rod\u00edzios\n\n### 2. Gest\u00e3o de Mesas e \u00c1reas\n\n#### 2.1 \u00c1reas do Restaurante\n- Implementar CRUD para \u00e1reas/se\u00e7\u00f5es do restaurante\n- Desenvolver interface visual para organiza\u00e7\u00e3o de \u00e1reas\n- Criar sistema de ocupa\u00e7\u00e3o m\u00e1xima por \u00e1rea\n- Implementar controle de \u00e1reas dispon\u00edveis por hor\u00e1rio/dia\n\n#### 2.2 Mesas\n- Implementar CRUD completo para mesas\n- Desenvolver mapa visual de mesas com posicionamento\n- Criar sistema de status de mesas (livre, ocupada, reservada, em limpeza)\n- Implementar associa\u00e7\u00e3o de QR codes com mesas espec\u00edficas\n- Desenvolver sistema b\u00e1sico de reservas\n\n### 3. Sistema de Pedidos\n\n#### 3.1 Pedidos B\u00e1sicos\n- Implementar modelo e controlador para pedidos\n- Desenvolver interface para cria\u00e7\u00e3o de pedidos por gar\u00e7om\n- Criar sistema de itens de pedido com observa\u00e7\u00f5es\n- Implementar adi\u00e7\u00e3o de itens a pedidos existentes\n- Desenvolver sistema de status de pedido (novo, em preparo, pronto, entregue)\n- Criar impress\u00e3o de comanda b\u00e1sica\n\n#### 3.2 Pedidos por QR Code\n- Implementar interface para cliente fazer pedido via smartphone\n- Desenvolver sistema de autentica\u00e7\u00e3o simples para clientes de mesa\n- Criar carrinho de compras para sele\u00e7\u00e3o de itens\n- Implementar envio de pedido para o sistema\n- Desenvolver notifica\u00e7\u00f5es ao cliente sobre status do pedido\n\n### 4. Painel de Cozinha\n\n#### 4.1 Visualiza\u00e7\u00e3o de Pedidos\n- Implementar interface otimizada para cozinha\n- Desenvolver sistema de fila de pedidos\n- Criar visualiza\u00e7\u00e3o por categorias (bebidas, pratos quentes, sobremesas)\n- Implementar temporizadores para tempo de preparo\n- Desenvolver sistema de alertas para pedidos atrasados\n\n#### 4.2 Gerenciamento de Produ\u00e7\u00e3o\n- Implementar atualiza\u00e7\u00e3o de status de itens\n- Desenvolver interface touch-friendly para cozinheiros\n- Criar sistema de notas para cozinha\n- Implementar prioriza\u00e7\u00e3o de pedidos\n- Desenvolver hist\u00f3rico de produ\u00e7\u00e3o di\u00e1ria\n\n### 5. Integra\u00e7\u00e3o de Pagamento B\u00e1sica\n\n#### 5.1 Prepara\u00e7\u00e3o para Pagamentos\n- Implementar modelo e controlador para pagamentos\n- Desenvolver interface b\u00e1sica para fechamento de conta\n- Criar sistema de divis\u00e3o de conta simples\n- Implementar c\u00e1lculo de taxas e gorjetas\n- Desenvolver suporte a m\u00faltiplos m\u00e9todos de pagamento\n\n#### 5.2 Integra\u00e7\u00e3o com Stripe\n- Implementar componentes b\u00e1sicos para integra\u00e7\u00e3o com Stripe\n- Desenvolver fluxo para pagamento via cart\u00e3o\n- Criar sistema para gera\u00e7\u00e3o de links de pagamento\n- Implementar webhook para confirma\u00e7\u00e3o de pagamentos\n- Desenvolver registro detalhado de transa\u00e7\u00f5es\n\n## DIRETRIZES DE IMPLEMENTA\u00c7\u00c3O\n\n1. Criar interfaces espec\u00edficas por tipo de restaurante quando necess\u00e1rio\n2. Garantir escalabilidade para grandes volumes de produtos e pedidos\n3. Priorizar a experi\u00eancia do usu\u00e1rio para opera\u00e7\u00f5es frequentes\n4. Implementar cache para dados acessados frequentemente\n5. Garantir que todas as opera\u00e7\u00f5es tenham log detalhado\n6. Desenvolver pensando na opera\u00e7\u00e3o em m\u00faltiplos dispositivos (desktop, tablet, mobile)\n7. Seguir padr\u00f5es de acessibilidade b\u00e1sicos nas interfaces\n8. Considerar a performance para opera\u00e7\u00f5es em hor\u00e1rios de pico\n\n## FORMATO DE C\u00d3DIGO\n\nPara garantir a extra\u00e7\u00e3o correta dos arquivos, utilize exatamente este formato para cada arquivo:\n\n```php\n// File: caminho/do/arquivo.php\n// C\u00f3digo completo aqui\n```\n\n## ENTREG\u00c1VEIS ESPERADOS\n\n1. Sistema completo de gerenciamento de card\u00e1pio, adaptado por tipo de restaurante\n2. Gest\u00e3o visual de mesas e \u00e1reas do restaurante\n3. Sistema b\u00e1sico de pedidos (por gar\u00e7om e QR code)\n4. Painel de cozinha funcional para gerenciamento de produ\u00e7\u00e3o\n5. Integra\u00e7\u00e3o inicial com sistema de pagamento (Stripe)\n\nAten\u00e7\u00e3o especial \u00e0 usabilidade das interfaces, especialmente do painel de cozinha que ser\u00e1 utilizado em ambiente de alta press\u00e3o e do sistema de pedidos via QR code que ser\u00e1 utilizado por clientes sem treinamento pr\u00e9vio.\n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# Desenvolvimento do Core do Sistema SaaS de Restaurantes\n\nVou iniciar o desenvolvimento do m\u00f3dulo core do sistema, criando as estruturas fundamentais que servir\u00e3o de base para todo o aplicativo.\n\n## An\u00e1lise dos Arquivos Necess\u00e1rios\n\nO core do sistema precisa incluir:\n- Sistema de roteamento\n- Gerenciamento de controladores\n- Renderiza\u00e7\u00e3o de views\n- Gerenciamento de banco de dados\n- Sistema de resposta e manipula\u00e7\u00e3o de erros\n- Funcionalidades multi-tenant\n\nVamos come\u00e7ar com os arquivos b\u00e1sicos de configura\u00e7\u00e3o e estrutura do aplicativo.\n\n## Arquivo: core/App.php\n\n```php\n// File: core/App.php\n<?php\n\nnamespace Core;\n\nuse Core\\Database\\DatabaseConnection;\nuse Core\\Exceptions\\AppException;\n\n/**\n * Classe principal do aplicativo\n * Gerencia inicializa\u00e7\u00e3o, roteamento e estado global\n */\nclass App\n{\n    /** @var App Inst\u00e2ncia singleton */\n    private static $instance = null;\n    \n    /** @var Router Inst\u00e2ncia do roteador */\n    private $router;\n    \n    /** @var DatabaseConnection Conex\u00e3o com o banco de dados */\n    private $db;\n    \n    /** @var array Configura\u00e7\u00f5es do aplicativo */\n    private $config = [];\n    \n    /** @var string Tenant atual (multi-tenant) */\n    private $currentTenant = null;\n    \n    /** @var ErrorHandler Manipulador de erros */\n    private $errorHandler;\n    \n    /**\n     * Inicializa a aplica\u00e7\u00e3o\n     * Privado para impedir m\u00faltiplas inst\u00e2ncias (padr\u00e3o singleton)\n     */\n    private function __construct()\n    {\n        // Carregar configura\u00e7\u00f5es\n        $this->loadConfig();\n        \n        // Inicializar componentes essenciais\n        $this->errorHandler = new ErrorHandler();\n        $this->router = new Router();\n        \n        // Configurar manipula\u00e7\u00e3o de erros\n        $this->setupErrorHandling();\n    }\n    \n    /**\n     * Retorna a inst\u00e2ncia \u00fanica do aplicativo\n     * @return App\n     */\n    public static function getInstance(): App\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n        \n        return self::$instance;\n    }\n    \n    /**\n     * Carrega os arquivos de configura\u00e7\u00e3o\n     */\n    private function loadConfig(): void\n    {\n        // Carregar configura\u00e7\u00e3o principal\n        $configPath = __DIR__ . '/../config/app.php';\n        if (!file_exists($configPath)) {\n            throw new AppException(\"Arquivo de configura\u00e7\u00e3o n\u00e3o encontrado: {$configPath}\");\n        }\n        \n        $this->config = require $configPath;\n        \n        // Carregar outros arquivos de configura\u00e7\u00e3o\n        foreach (['database', 'routes', 'tenant'] as $configFile) {\n            $path = __DIR__ . \"/../config/{$configFile}.php\";\n            if (file_exists($path)) {\n                $this->config[$configFile] = require $path;\n            }\n        }\n    }\n    \n    /**\n     * Configura manipula\u00e7\u00e3o de erros e exce\u00e7\u00f5es\n     */\n    private function setupErrorHandling(): void\n    {\n        $this->errorHandler->register();\n    }\n    \n    /**\n     * Inicializa a conex\u00e3o com o banco de dados\n     */\n    public function initDatabase(): DatabaseConnection\n    {\n        if (!$this->db) {\n            $dbConfig = $this->config['database'] ?? null;\n            if (!$dbConfig) {\n                throw new AppException(\"Configura\u00e7\u00e3o de banco de dados n\u00e3o encontrada\");\n            }\n            \n            $this->db = new DatabaseConnection($dbConfig);\n        }\n        \n        return $this->db;\n    }\n    \n    /**\n     * Define o tenant atual para opera\u00e7\u00f5es multi-tenant\n     * @param string $tenantId\n     */\n    public function setCurrentTenant(?string $tenantId): void\n    {\n        $this->currentTenant = $tenantId;\n        \n        // Se j\u00e1 tiver conex\u00e3o de banco de dados, aplicar filtro de tenant\n        if ($this->db) {\n            $this->db->setTenantFilter($tenantId);\n        }\n    }\n    \n    /**\n     * Obt\u00e9m o tenant atual\n     * @return string|null\n     */\n    public function getCurrentTenant(): ?string\n    {\n        return $this->currentTenant;\n    }\n    \n    /**\n     * Verifica se o tenant atual tem acesso a um recurso espec\u00edfico\n     * @param string $feature Recurso a verificar\n     * @return bool\n     */\n    public function hasTenantAccess(string $feature): bool\n    {\n        if (!$this->currentTenant) {\n            return false;\n        }\n        \n        // Implementar verifica\u00e7\u00e3o de plano do tenant e recursos dispon\u00edveis\n        // Para esta vers\u00e3o inicial, permitiremos acesso a tudo\n        return true;\n    }\n    \n    /**\n     * Obt\u00e9m valor de configura\u00e7\u00e3o\n     * @param string $key Chave da configura\u00e7\u00e3o\n     * @param mixed $default Valor padr\u00e3o se n\u00e3o encontrado\n     * @return mixed\n     */\n    public function config(string $key, $default = null)\n    {\n        $parts = explode('.', $key);\n        $config = $this->config;\n        \n        foreach ($parts as $part) {\n            if (!isset($config[$part])) {\n                return $default;\n            }\n            $config = $config[$part];\n        }\n        \n        return $config;\n    }\n    \n    /**\n     * Processa a requisi\u00e7\u00e3o atual\n     */\n    public function run(): void\n    {\n        try {\n            // Resolver tenant com base no host ou caminho\n            $this->resolveTenant();\n            \n            // Inicializar banco de dados\n            $this->initDatabase();\n            \n            // Resolver rota\n            $route = $this->router->resolve($_SERVER['REQUEST_METHOD'], $_SERVER['REQUEST_URI']);\n            \n            // Executar controller\n            if ($route) {\n                list($controller, $method, $params) = $route;\n                \n                // Instanciar controller\n                $controllerInstance = new $controller();\n                \n                // Executar m\u00e9todo com par\u00e2metros\n                $response = call_user_func_array([$controllerInstance, $method], $params);\n                \n                // Enviar resposta\n                if ($response instanceof Response) {\n                    $response->send();\n                } else {\n                    (new Response($response))->send();\n                }\n            } else {\n                // Rota n\u00e3o encontrada\n                (new Response(\"P\u00e1gina n\u00e3o encontrada\", 404))->send();\n            }\n            \n        } catch (\\Exception $e) {\n            $this->errorHandler->handleException($e);\n        }\n    }\n    \n    /**\n     * Resolve o tenant atual com base no host ou caminho da URL\n     */\n    private function resolveTenant(): void\n    {\n        // Implementa\u00e7\u00e3o simples para definir o tenant com base no subdom\u00ednio\n        $host = $_SERVER['HTTP_HOST'] ?? '';\n        $parts = explode('.', $host);\n        \n        // Se for um subdom\u00ednio v\u00e1lido\n        if (count($parts) > 2 && $parts[0] !== 'www') {\n            $this->setCurrentTenant($parts[0]);\n            return;\n        }\n        \n        // Verificar se h\u00e1 um tenant na URL (path)\n        $path = $_SERVER['REQUEST_URI'] ?? '';\n        $pathParts = explode('/', trim($path, '/'));\n        \n        if (!empty($pathParts[0]) && $pathParts[0] !== 'admin' && $pathParts[0] !== 'api') {\n            // Verificar se o primeiro segmento do caminho \u00e9 um tenant v\u00e1lido\n            // Isso ser\u00e1 implementado ap\u00f3s termos o modelo de Tenant\n            $this->setCurrentTenant($pathParts[0]);\n        }\n    }\n    \n    /**\n     * Retorna a inst\u00e2ncia do roteador\n     * @return Router\n     */\n    public function getRouter(): Router\n    {\n        return $this->router;\n    }\n    \n    /**\n     * Previne clonagem da inst\u00e2ncia\n     */\n    private function __clone() {}\n    \n    /**\n     * Previne desserializa\u00e7\u00e3o da inst\u00e2ncia\n     */\n    private function __wakeup() {}\n}\n```\n\n## Arquivo: core/Router.php\n\n```php\n// File: core/Router.php\n<?php\n\nnamespace Core;\n\n/**\n * Router - Gerencia rotas e roteamento de requisi\u00e7\u00f5es\n */\nclass Router \n{\n    /** @var array Rotas registradas */\n    private $routes = [\n        'GET' => [],\n        'POST' => [],\n        'PUT' => [],\n        'DELETE' => [],\n        'PATCH' => []\n    ];\n    \n    /**\n     * Adiciona uma rota GET\n     * @param string $path Caminho da URL\n     * @param array|string $handler Controlador ou callback\n     * @return Router\n     */\n    public function get(string $path, $handler): Router\n    {\n        $this->addRoute('GET', $path, $handler);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma rota POST\n     * @param string $path Caminho da URL\n     * @param array|string $handler Controlador ou callback\n     * @return Router\n     */\n    public function post(string $path, $handler): Router\n    {\n        $this->addRoute('POST', $path, $handler);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma rota PUT\n     * @param string $path Caminho da URL\n     * @param array|string $handler Controlador ou callback\n     * @return Router\n     */\n    public function put(string $path, $handler): Router\n    {\n        $this->addRoute('PUT', $path, $handler);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma rota DELETE\n     * @param string $path Caminho da URL\n     * @param array|string $handler Controlador ou callback\n     * @return Router\n     */\n    public function delete(string $path, $handler): Router\n    {\n        $this->addRoute('DELETE', $path, $handler);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma rota PATCH\n     * @param string $path Caminho da URL\n     * @param array|string $handler Controlador ou callback\n     * @return Router\n     */\n    public function patch(string $path, $handler): Router\n    {\n        $this->addRoute('PATCH', $path, $handler);\n        return $this;\n    }\n    \n    /**\n     * Adiciona uma rota para qualquer m\u00e9todo HTTP\n     * @param string $path Caminho da URL\n     * @param array|string $handler Controlador ou callback\n     * @return Router\n     */\n    public function any(string $path, $handler): Router\n    {\n        foreach (array_keys($this->routes) as $method) {\n            $this->addRoute($method, $path, $handler);\n        }\n        return $this;\n    }\n    \n    /**\n     * Adiciona rotas para grupo de recursos (CRUD)\n     * @param string $name Nome do recurso\n     * @param string $controller Controlador para o recurso\n     * @return Router\n     */\n    public function resource(string $name, string $controller): Router\n    {\n        $this->get(\"/{$name}\", \"{$controller}@index\");\n        $this->get(\"/{$name}/create\", \"{$controller}@create\");\n        $this->post(\"/{$name}\", \"{$controller}@store\");\n        $this->get(\"/{$name}/{id}\", \"{$controller}@show\");\n        $this->get(\"/{$name}/{id}/edit\", \"{$controller}@edit\");\n        $this->put(\"/{$name}/{id}\", \"{$controller}@update\");\n        $this->delete(\"/{$name}/{id}\", \"{$controller}@destroy\");\n        \n        return $this;\n    }\n    \n    /**\n     * Agrupa rotas com um prefixo comum\n     * @param string $prefix Prefixo da URL\n     * @param callable $callback Fun\u00e7\u00e3o de callback com defini\u00e7\u00f5es de rota\n     * @return Router\n     */\n    public function group(string $prefix, callable $callback): Router\n    {\n        $previousGroupPrefix = $this->getGroupPrefix();\n        $this->setGroupPrefix($previousGroupPrefix . $prefix);\n        \n        $callback($this);\n        \n        $this->setGroupPrefix($previousGroupPrefix);\n        \n        return $this;\n    }\n    \n    /**\n     * Obt\u00e9m o prefixo de grupo atual\n     * @return string\n     */\n    private function getGroupPrefix(): string\n    {\n        return $this->groupPrefix ?? '';\n    }\n    \n    /**\n     * Define o prefixo de grupo atual\n     * @param string $prefix\n     */\n    private function setGroupPrefix(string $prefix): void\n    {\n        $this->groupPrefix = $prefix;\n    }\n    \n    /**\n     * Adiciona uma rota\n     * @param string $method M\u00e9todo HTTP\n     * @param string $path Caminho da URL\n     * @param array|string $handler Controlador ou callback\n     */\n    private function addRoute(string $method, string $path, $handler): void\n    {\n        // Aplicar prefixo de grupo se existir\n        $path = $this->getGroupPrefix() . $path;\n        \n        // Normalizar caminho\n        $path = rtrim($path, '/');\n        if (empty($path)) {\n            $path = '/';\n        }\n        \n        // Normalizar handler\n        if (is_string($handler) && strpos($handler, '@') !== false) {\n            list($controller, $method) = explode('@', $handler);\n            $handler = [$controller, $method];\n        }\n        \n        // Converter para express\u00e3o regular para matching de par\u00e2metros\n        $routeRegex = $this->convertPathToRegex($path);\n        \n        $this->routes[$method][$routeRegex] = [\n            'path' => $path,\n            'handler' => $handler\n        ];\n    }\n    \n    /**\n     * Converte um caminho de URL para express\u00e3o regular\n     * @param string $path Caminho da URL\n     * @return string Express\u00e3o regular\n     */\n    private function convertPathToRegex(string $path): string\n    {\n        // Substituir par\u00e2metros {param} por grupos de captura\n        $regex = preg_replace('/\\{([a-zA-Z0-9_]+)\\}/', '(?P<$1>[^/]+)', $path);\n        \n        // Escapar barras e adicionar delimitadores\n        return '#^' . $regex . '$#';\n    }\n    \n    /**\n     * Resolve a rota atual\n     * @param string $method M\u00e9todo HTTP\n     * @param string $uri URI da requisi\u00e7\u00e3o\n     * @return array|null [controlador, m\u00e9todo, par\u00e2metros] ou null se n\u00e3o encontrar\n     */\n    public function resolve(string $method, string $uri): ?array\n    {\n        // Remover query string\n        $uri = parse_url($uri, PHP_URL_PATH);\n        \n        // Normalizar URI\n        $uri = rtrim($uri, '/');\n        if (empty($uri)) {\n            $uri = '/';\n        }\n        \n        // Verificar rotas para o m\u00e9todo HTTP\n        if (!isset($this->routes[$method])) {\n            return null;\n        }\n        \n        // Encontrar rota que corresponde \u00e0 URI\n        foreach ($this->routes[$method] as $regex => $route) {\n            if (preg_match($regex, $uri, $matches)) {\n                // Extrair par\u00e2metros da URI\n                $params = [];\n                foreach ($matches as $key => $value) {\n                    if (is_string($key)) {\n                        $params[$key] = $value;\n                    }\n                }\n                \n                // Verificar se o handler \u00e9 um array [Controlador, M\u00e9todo]\n                if (is_array($route['handler'])) {\n                    return [\n                        $route['handler'][0],  // Controlador\n                        $route['handler'][1],  // M\u00e9todo\n                        $params               // Par\u00e2metros\n                    ];\n                }\n                \n                // Se for um callable\n                return [\n                    $route['handler'],  // Callable\n                    null,               // Sem m\u00e9todo espec\u00edfico\n                    $params             // Par\u00e2metros\n                ];\n            }\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Gera uma URL para uma rota nomeada\n     * @param string $name Nome da rota\n     * @param array $params Par\u00e2metros para a rota\n     * @return string URL gerada\n     */\n    public function url(string $name, array $params = []): string\n    {\n        // Implementa\u00e7\u00e3o futura - armazenar e recuperar rotas nomeadas\n        return '';\n    }\n}\n```\n\n## Arquivo: core/Controller.php\n\n```php\n// File: core/Controller.php\n<?php\n\nnamespace Core;\n\nuse Core\\Exceptions\\ValidationException;\n\n/**\n * Classe base para todos os controladores\n */\nabstract class Controller\n{\n    /** @var View Inst\u00e2ncia de View para renderiza\u00e7\u00e3o */\n    protected $view;\n    \n    /** @var array Dados do usu\u00e1rio autenticado */\n    protected $auth = null;\n    \n    /**\n     * Construtor\n     */\n    public function __construct()\n    {\n        $this->view = new View();\n        \n        // Verificar autentica\u00e7\u00e3o\n        $this->checkAuth();\n        \n        // Executar inicializa\u00e7\u00f5es do controlador\n        $this->initialize();\n    }\n    \n    /**\n     * M\u00e9todo para inicializa\u00e7\u00f5es espec\u00edficas do controlador\n     * Pode ser sobrescrito nas classes filhas\n     */\n    protected function initialize(): void\n    {\n        // Implementa\u00e7\u00e3o vazia por padr\u00e3o\n    }\n    \n    /**\n     * Verificar autentica\u00e7\u00e3o do usu\u00e1rio\n     */\n    protected function checkAuth(): void\n    {\n        // Verificar se h\u00e1 uma sess\u00e3o ativa\n        if (session_status() === PHP_SESSION_NONE) {\n            session_start();\n        }\n        \n        if (isset($_SESSION['user_id'])) {\n            // TODO: Carregar dados do usu\u00e1rio\n            $this->auth = [\n                'id' => $_SESSION['user_id'],\n                'name' => $_SESSION['user_name'] ?? 'Unknown',\n                'role' => $_SESSION['user_role'] ?? 'guest'\n            ];\n        }\n    }\n    \n    /**\n     * Verifica se o usu\u00e1rio est\u00e1 autenticado\n     * @return bool\n     */\n    protected function isAuthenticated(): bool\n    {\n        return $this->auth !== null;\n    }\n    \n    /**\n     * Redireciona para a p\u00e1gina de login se n\u00e3o estiver autenticado\n     * @param string $redirectUrl URL para redirecionar ap\u00f3s login\n     */\n    protected function requireAuth(string $redirectUrl = ''): void\n    {\n        if (!$this->isAuthenticated()) {\n            $currentUrl = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '/';\n            $redirectParam = $redirectUrl ?: $currentUrl;\n            \n            header('Location: /login?redirect=' . urlencode($redirectParam));\n            exit;\n        }\n    }\n    \n    /**\n     * Verifica se o usu\u00e1rio tem uma permiss\u00e3o espec\u00edfica\n     * @param string $permission Nome da permiss\u00e3o\n     * @return bool\n     */\n    protected function hasPermission(string $permission): bool\n    {\n        // Implementa\u00e7\u00e3o b\u00e1sica - expandir posteriormente\n        if (!$this->isAuthenticated()) {\n            return false;\n        }\n        \n        // Admin tem todas as permiss\u00f5es\n        if ($this->auth['role'] === 'admin') {\n            return true;\n        }\n        \n        // TODO: Implementar verifica\u00e7\u00e3o de permiss\u00f5es espec\u00edficas\n        return false;\n    }\n    \n    /**\n     * Redireciona se o usu\u00e1rio n\u00e3o tiver a permiss\u00e3o necess\u00e1ria\n     * @param string $permission Nome da permiss\u00e3o\n     * @param string $redirectUrl URL para redirecionar (opcional)\n     */\n    protected function requirePermission(string $permission, string $redirectUrl = ''): void\n    {\n        if (!$this->hasPermission($permission)) {\n            if ($redirectUrl) {\n                header('Location: ' . $redirectUrl);\n            } else {\n                $response = new Response('Acesso negado', 403);\n                $response->send();\n            }\n            exit;\n        }\n    }\n    \n    /**\n     * Renderiza uma view com dados\n     * @param string $view Nome da view\n     * @param array $data Dados para a view\n     * @return string HTML renderizado\n     */\n    protected function render(string $view, array $data = []): string\n    {\n        // Adicionar usu\u00e1rio autenticado aos dados da view\n        $data['auth'] = $this->auth;\n        \n        return $this->view->render($view, $data);\n    }\n    \n    /**\n     * Cria uma resposta JSON\n     * @param mixed $data Dados para converter em JSON\n     * @param int $status C\u00f3digo de status HTTP\n     * @return Response\n     */\n    protected function json($data, int $status = 200): Response\n    {\n        return new Response(json_encode($data), $status, [\n            'Content-Type' => 'application/json'\n        ]);\n    }\n    \n    /**\n     * Redireciona para outra URL\n     * @param string $url URL para redirecionar\n     * @param int $status C\u00f3digo de status HTTP\n     * @return Response\n     */\n    protected function redirect(string $url, int $status = 302): Response\n    {\n        return new Response('', $status, [\n            'Location' => $url\n        ]);\n    }\n    \n    /**\n     * Valida dados de entrada com regras espec\u00edficas\n     * @param array $data Dados para validar\n     * @param array $rules Regras de valida\u00e7\u00e3o\n     * @return array Dados validados\n     * @throws ValidationException\n     */\n    protected function validate(array $data, array $rules): array\n    {\n        $errors = [];\n        $validatedData = [];\n        \n        foreach ($rules as $field => $ruleSet) {\n            // Converter string de regras para array\n            if (is_string($ruleSet)) {\n                $ruleSet = explode('|', $ruleSet);\n            }\n            \n            $value = $data[$field] ?? null;\n            $fieldErrors = [];\n            \n            // Verificar cada regra\n            foreach ($ruleSet as $rule) {\n                $ruleParts = explode(':', $rule);\n                $ruleName = $ruleParts[0];\n                $ruleParam = $ruleParts[1] ?? null;\n                \n                switch ($ruleName) {\n                    case 'required':\n                        if (!isset($data[$field]) || $value === null || $value === '') {\n                            $fieldErrors[] = \"O campo {$field} \u00e9 obrigat\u00f3rio.\";\n                        }\n                        break;\n                        \n                    case 'email':\n                        if ($value && !filter_var($value, FILTER_VALIDATE_EMAIL)) {\n                            $fieldErrors[] = \"O campo {$field} deve ser um e-mail v\u00e1lido.\";\n                        }\n                        break;\n                        \n                    case 'min':\n                        if (is_string($value) && strlen($value) < (int)$ruleParam) {\n                            $fieldErrors[] = \"O campo {$field} deve ter no m\u00ednimo {$ruleParam} caracteres.\";\n                        }\n                        break;\n                        \n                    case 'max':\n                        if (is_string($value) && strlen($value) > (int)$ruleParam) {\n                            $fieldErrors[] = \"O campo {$field} deve ter no m\u00e1ximo {$ruleParam} caracteres.\";\n                        }\n                        break;\n                        \n                    case 'numeric':\n                        if ($value && !is_numeric($value)) {\n                            $fieldErrors[] = \"O campo {$field} deve ser um n\u00famero.\";\n                        }\n                        break;\n                        \n                    case 'in':\n                        $allowedValues = explode(',', $ruleParam);\n                        if ($value && !in_array($value, $allowedValues)) {\n                            $fieldErrors[] = \"O valor do campo {$field} n\u00e3o \u00e9 v\u00e1lido.\";\n                        }\n                        break;\n                }\n            }\n            \n            // Se tem erros, adicionar \u00e0 lista\n            if (!empty($fieldErrors)) {\n                $errors[$field] = $fieldErrors;\n            } else {\n                // Se passou na valida\u00e7\u00e3o, adicionar aos dados validados\n                $validatedData[$field] = $value;\n            }\n        }\n        \n        // Se houver erros, lan\u00e7ar exce\u00e7\u00e3o\n        if (!empty($errors)) {\n            throw new ValidationException(\"Erros de valida\u00e7\u00e3o\", $errors);\n        }\n        \n        return $validatedData;\n    }\n    \n    /**\n     * Obt\u00e9m um par\u00e2metro da requisi\u00e7\u00e3o (POST, GET, JSON)\n     * @param string $key Nome do par\u00e2metro\n     * @param mixed $default Valor padr\u00e3o se n\u00e3o existir\n     * @return mixed\n     */\n    protected function input(string $key, $default = null)\n    {\n        // Verificar POST\n        if (isset($_POST[$key])) {\n            return $_POST[$key];\n        }\n        \n        // Verificar GET\n        if (isset($_GET[$key])) {\n            return $_GET[$key];\n        }\n        \n        // Verificar JSON\n        $json = $this->getJsonInput();\n        if ($json && isset($json[$key])) {\n            return $json[$key];\n        }\n        \n        return $default;\n    }\n    \n    /**\n     * Obt\u00e9m todos os par\u00e2metros da requisi\u00e7\u00e3o\n     * @return array\n     */\n    protected function all(): array\n    {\n        // Combinar POST e GET\n        $data = array_merge($_GET, $_POST);\n        \n        // Adicionar dados JSON se dispon\u00edveis\n        $json = $this->getJsonInput();\n        if ($json) {\n            $data = array_merge($data, $json);\n        }\n        \n        return $data;\n    }\n    \n    /**\n     * Obt\u00e9m dados JSON da requisi\u00e7\u00e3o\n     * @return array|null\n     */\n    protected function getJsonInput(): ?array\n    {\n        // Verificar se \u00e9 uma requisi\u00e7\u00e3o JSON\n        $contentType = $_SERVER['CONTENT_TYPE'] ?? '';\n        if (strpos($contentType, 'application/json') !== false) {\n            $input = file_get_contents('php://input');\n            return json_decode($input, true) ?? [];\n        }\n        \n        return null;\n    }\n}\n```\n\n## Arquivo: core/View.php\n\n```php\n// File: core/View.php\n<?php\n\nnamespace Core;\n\nuse Core\\Exceptions\\AppException;\n\n/**\n * Classe para renderiza\u00e7\u00e3o de views\n */\nclass View\n{\n    /** @var string Diret\u00f3rio base das views */\n    private $viewsPath;\n    \n    /** @var array Dados globais dispon\u00edveis para todas as views */\n    private $globals = [];\n    \n    /**\n     * Construtor\n     * @param string $viewsPath Caminho opcional para o diret\u00f3rio de views\n     */\n    public function __construct(string $viewsPath = null)\n    {\n        $this->viewsPath = $viewsPath ?? __DIR__ . '/../views';\n    }\n    \n    /**\n     * Define vari\u00e1veis globais para todas as views\n     * @param string $key Nome da vari\u00e1vel\n     * @param mixed $value Valor da vari\u00e1vel\n     * @return View\n     */\n    public function share(string $key, $value): View\n    {\n        $this->globals[$key] = $value;\n        return $this;\n    }\n    \n    /**\n     * Renderiza uma view com dados\n     * @param string $view Nome da view\n     * @param array $data Dados para a view\n     * @return string HTML renderizado\n     */\n    public function render(string $view, array $data = []): string\n    {\n        $viewPath = $this->resolvePath($view);\n        \n        // Verificar se o arquivo existe\n        if (!file_exists($viewPath)) {\n            throw new AppException(\"View n\u00e3o encontrada: {$view}\");\n        }\n        \n        // Mesclar dados globais com dados espec\u00edficos\n        $data = array_merge($this->globals, $data);\n        \n        // Buffering de sa\u00edda para capturar o resultado\n        ob_start();\n        \n        // Extrair dados para vari\u00e1veis acess\u00edveis na view\n        extract($data);\n        \n        // Incluir o arquivo da view\n        include $viewPath;\n        \n        // Retornar conte\u00fado renderizado\n        return ob_get_clean();\n    }\n    \n    /**\n     * Renderiza uma partial (view parcial)\n     * @param string $partial Nome da partial\n     * @param array $data Dados para a partial\n     * @return string HTML renderizado\n     */\n    public function partial(string $partial, array $data = []): string\n    {\n        return $this->render(\"partials/{$partial}\", $data);\n    }\n    \n    /**\n     * Determina o caminho completo para um arquivo de view\n     * @param string $view Nome da view\n     * @return string Caminho completo\n     */\n    private function resolvePath(string $view): string\n    {\n        // Substituir pontos por separadores de diret\u00f3rio\n        $view = str_replace('.', '/', $view);\n        \n        // Adicionar extens\u00e3o .php se n\u00e3o tiver\n        if (!preg_match('/\\.php$/', $view)) {\n            $view .= '.php';\n        }\n        \n        return $this->viewsPath . '/' . $view;\n    }\n    \n    /**\n     * Escapa HTML para sa\u00edda segura\n     * @param mixed $value Valor para escapar\n     * @return string Valor escapado\n     */\n    public function e($value): string\n    {\n        return htmlspecialchars($value ?? '', ENT_QUOTES, 'UTF-8');\n    }\n    \n    /**\n     * Gera uma URL para um asset\n     * @param string $path Caminho relativo do asset\n     * @return string URL completa\n     */\n    public function asset(string $path): string\n    {\n        // Remover barra inicial se existir\n        $path = ltrim($path, '/');\n        \n        // Determinar URL base\n        $baseUrl = App::getInstance()->config('app.url', '');\n        \n        return $baseUrl . '/assets/' . $path;\n    }\n    \n    /**\n     * Inclui outra view dentro da atual\n     * @param string $view Nome da view\n     * @param array $data Dados para a view\n     * @return void\n     */\n    public function include(string $view, array $data = []): void\n    {\n        echo $this->render($view, $data);\n    }\n    \n    /**\n     * Gera uma URL para uma rota\n     * @param string $route Nome da rota\n     * @param array $params Par\u00e2metros da rota\n     * @return string URL gerada\n     */\n    public function route(string $route, array $params = []): string\n    {\n        // Implementa\u00e7\u00e3o simples - expandir futuramente\n        return App::getInstance()->getRouter()->url($route, $params);\n    }\n}\n```\n\n## Arquivo: core/Response.php\n\n```php\n// File: core/Response.php\n<?php\n\nnamespace Core;\n\n/**\n * Classe para gerenciar a resposta HTTP\n */\nclass Response\n{\n    /** @var mixed Conte\u00fado da resposta */\n    private $content;\n    \n    /** @var int C\u00f3digo de status HTTP */\n    private $statusCode;\n    \n    /** @var array Cabe\u00e7alhos HTTP */\n    private $headers = [];\n    \n    /** @var array Mapeamento de c\u00f3digos de status para mensagens */\n    private static $statusTexts = [\n        200 => 'OK',\n        201 => 'Created',\n        202 => 'Accepted',\n        204 => 'No Content',\n        301 => 'Moved Permanently',\n        302 => 'Found',\n        304 => 'Not Modified',\n        400 => 'Bad Request',\n        401 => 'Unauthorized',\n        403 => 'Forbidden',\n        404 => 'Not Found',\n        405 => 'Method Not Allowed',\n        422 => 'Unprocessable Entity',\n        429 => 'Too Many Requests',\n        500 => 'Internal Server Error',\n        503 => 'Service Unavailable'\n    ];\n    \n    /**\n     * Construtor\n     * @param mixed $content Conte\u00fado da resposta\n     * @param int $status C\u00f3digo de status HTTP\n     * @param array $headers Cabe\u00e7alhos HTTP\n     */\n    public function __construct($content = '', int $status = 200, array $headers = [])\n    {\n        $this->content = $content;\n        $this->statusCode = $status;\n        $this->headers = $headers;\n    }\n    \n    /**\n     * Define o conte\u00fado da resposta\n     * @param mixed $content\n     * @return Response\n     */\n    public function setContent($content): Response\n    {\n        $this->content = $content;\n        return $this;\n    }\n    \n    /**\n     * Define o c\u00f3digo de status HTTP\n     * @param int $statusCode\n     * @return Response\n     */\n    public function setStatusCode(int $statusCode): Response\n    {\n        $this->statusCode = $statusCode;\n        return $this;\n    }\n    \n    /**\n     * Adiciona um cabe\u00e7alho HTTP\n     * @param string $name Nome do cabe\u00e7alho\n     * @param string $value Valor do cabe\u00e7alho\n     * @return Response\n     */\n    public function addHeader(string $name, string $value): Response\n    {\n        $this->headers[$name] = $value;\n        return $this;\n    }\n    \n    /**\n     * Define m\u00faltiplos cabe\u00e7alhos HTTP\n     * @param array $headers Cabe\u00e7alhos a definir\n     * @return Response\n     */\n    public function withHeaders(array $headers): Response\n    {\n        foreach ($headers as $name => $value) {\n            $this->addHeader($name, $value);\n        }\n        return $this;\n    }\n    \n    /**\n     * Cria uma resposta JSON\n     * @param mixed $data Dados para converter em JSON\n     * @param int $status C\u00f3digo de status HTTP\n     * @param array $headers Cabe\u00e7alhos adicionais\n     * @return Response\n     */\n    public static function json($data, int $status = 200, array $headers = []): Response\n    {\n        $headers = array_merge(['Content-Type' => 'application/json'], $headers);\n        return new static(json_encode($data), $status, $headers);\n    }\n    \n    /**\n     * Cria uma resposta redirecionamento\n     * @param string $url URL para redirecionar\n     * @param int $status C\u00f3digo de status HTTP\n     * @return Response\n     */\n    public static function redirect(string $url, int $status = 302): Response\n    {\n        return new static('', $status, ['Location' => $url]);\n    }\n    \n    /**\n     * Envia a resposta para o navegador\n     */\n    public function send(): void\n    {\n        // Enviar cabe\u00e7alho de status\n        $statusText = self::$statusTexts[$this->statusCode] ?? 'Unknown Status';\n        header(\"HTTP/1.1 {$this->statusCode} {$statusText}\");\n        \n        // Enviar cabe\u00e7alhos\n        foreach ($this->headers as $name => $value) {\n            header(\"{$name}: {$value}\");\n        }\n        \n        // Enviar conte\u00fado\n        echo $this->content;\n    }\n    \n    /**\n     * Envia um arquivo como resposta\n     * @param string $filePath Caminho do arquivo\n     * @param string $filename Nome sugerido para download\n     * @param bool $forceDownload For\u00e7ar download em vez de exibir no navegador\n     * @return Response\n     */\n    public static function file(string $filePath, string $filename = null, bool $forceDownload = false): Response\n    {\n        if (!file_exists($filePath)) {\n            return new static('Arquivo n\u00e3o encontrado', 404);\n        }\n        \n        $filename = $filename ?? basename($filePath);\n        $mimeType = mime_content_type($filePath) ?? 'application/octet-stream';\n        \n        $headers = [\n            'Content-Type' => $mimeType,\n            'Content-Length' => filesize($filePath)\n        ];\n        \n        if ($forceDownload) {\n            $headers['Content-Disposition'] = 'attachment; filename=\"' . $filename . '\"';\n        } else {\n            $headers['Content-Disposition'] = 'inline; filename=\"' . $filename . '\"';\n        }\n        \n        $response = new static(file_get_contents($filePath), 200, $headers);\n        \n        return $response;\n    }\n}\n```\n\n## Arquivo: core/ErrorHandler.php\n\n```php\n// File: core/ErrorHandler.php\n<?php\n\nnamespace Core;\n\nuse Core\\Exceptions\\AppException;\nuse Core\\Exceptions\\ValidationException;\n\n/**\n * Classe para tratamento de erros e exce\u00e7\u00f5es\n */\nclass ErrorHandler\n{\n    /** @var bool Modo de depura\u00e7\u00e3o */\n    private $debug;\n    \n    /**\n     * Construtor\n     */\n    public function __construct()\n    {\n        // Obter configura\u00e7\u00e3o de modo de depura\u00e7\u00e3o\n        $this->debug = App::getInstance()->config('app.debug', false);\n    }\n    \n    /**\n     * Registra manipuladores de erro e exce\u00e7\u00e3o\n     */\n    public function register(): void\n    {\n        // Registrar manipulador de exce\u00e7\u00f5es n\u00e3o capturadas\n        set_exception_handler([$this, 'handleException']);\n        \n        // Registrar manipulador de erros PHP\n        set_error_handler([$this, 'handleError']);\n        \n        // Registrar manipulador de shutdown para capturar erros fatais\n        register_shutdown_function([$this, 'handleFatalError']);\n    }\n    \n    /**\n     * Manipula exce\u00e7\u00f5es n\u00e3o capturadas\n     * @param \\Throwable $exception\n     */\n    public function handleException(\\Throwable $exception): void\n    {\n        // Determinar c\u00f3digo de status adequado\n        $statusCode = 500;\n        \n        if ($exception instanceof ValidationException) {\n            $statusCode = 422;\n        } elseif ($exception instanceof AppException) {\n            $statusCode = $exception->getCode() ?: 500;\n        }\n        \n        // Verificar se a requisi\u00e7\u00e3o espera JSON\n        $isJson = isset($_SERVER['HTTP_ACCEPT']) && strpos($_SERVER['HTTP_ACCEPT'], 'application/json') !== false;\n        \n        if ($isJson) {\n            $this->renderJsonError($exception, $statusCode);",
                "tokens_used": 52098,
                "response_time": 122.56
            },
            {
                "id": "9f85c4a6a793f2e64c652a40aab52ecb",
                "timestamp": "2025-03-18T03:43:27.101386",
                "module": "core",
                "prompt": "\nEstou desenvolvendo um sistema de gest\u00e3o de restaurantes SaaS em PHP.\nM\u00f3dulo atual: core\n\n## Contexto do Projeto\n\n\n# Projeto Completo - Sistema de Gest\u00e3o de Restaurantes SaaS\n\n## 1. Tecnologias que devem ser usadas\n\nHTML,CSS,Javascript,PHP, mysql essa aplica\u00e7ao dever ser feita em web apenas\n\n## 1. Vis\u00e3o Geral do Projeto\n\n### 1.1 Descri\u00e7\u00e3o do Projeto\n\nO projeto consiste em um sistema de gest\u00e3o de restaurantes oferecido como servi\u00e7o por assinatura (SaaS - Software as a Service). O sistema atende a diversos tipos de estabelecimentos (\u00e0 la carte, fast food, pizzaria, rod\u00edzio, etc.) com funcionalidades adaptadas para cada modelo de neg\u00f3cio, permitindo opera\u00e7\u00f5es atrav\u00e9s de QR Code ou atendimento tradicional com gar\u00e7ons.\n\n### 1.2 Objetivos Principais\n\n1. Oferecer um sistema completo e personaliz\u00e1vel para gest\u00e3o de restaurantes\n2. Permitir flexibilidade para diferentes modelos de neg\u00f3cio\n3. Implementar uma estrutura escal\u00e1vel baseada em assinaturas\n4. Garantir uma experi\u00eancia otimizada tanto para restaurantes quanto para clientes finais\n5. Proporcionar integra\u00e7\u00e3o com servi\u00e7os externos (Stripe, iFood, etc.)\n\n### 1.3 P\u00fablico-Alvo\n\n- Restaurantes tradicionais \u00e0 la carte\n- Fast-foods e lanchonetes\n- Pizzarias e delivery\n- Rod\u00edzios e buf\u00eas\n- Bares e pubs\n- Food trucks\n- Redes de restaurantes\n\n### 1.4 Proposta de Valor\n\n- Redu\u00e7\u00e3o de custos operacionais\n- Aumento da efici\u00eancia no atendimento\n- Melhoria da experi\u00eancia do cliente\n- Maior controle financeiro e operacional\n- Insights de neg\u00f3cio baseados em dados\n- Flexibilidade para diferentes modelos e tamanhos de opera\u00e7\u00e3o\n\n## 2. Arquitetura do Sistema\n\n### 2.1 Vis\u00e3o Geral da Arquitetura\n\nO sistema utiliza uma arquitetura de tr\u00eas camadas:\n\n1. **Camada de Apresenta\u00e7\u00e3o**: Interfaces web e mobile para diferentes perfis de usu\u00e1rio\n2. **Camada de Aplica\u00e7\u00e3o**: L\u00f3gica de neg\u00f3cio, processamento e servi\u00e7os\n3. **Camada de Dados**: Persist\u00eancia e gerenciamento de dados\n\n### 2.2 Modelo Multi-Tenant\n\nO sistema \u00e9 constru\u00eddo com arquitetura multi-tenant, onde m\u00faltiplos restaurantes (tenants) compartilham a mesma infraestrutura, mas com dados completamente isolados:\n\n- Cada tenant possui um identificador \u00fanico\n- Todas as opera\u00e7\u00f5es de banco de dados incluem filtro por tenant\n- Recursos s\u00e3o alocados conforme o plano de assinatura\n- Backups s\u00e3o individualizados por tenant\n\n### 2.3 Infraestrutura de Nuvem\n\nA plataforma ser\u00e1 hospedada em infraestrutura de nuvem para garantir:\n\n- Alta disponibilidade (99.9+%)\n- Escalabilidade horizontal e vertical\n- Balanceamento de carga\n- Backups automatizados\n- Recupera\u00e7\u00e3o de desastres\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n\n### 2.4 Integra\u00e7\u00f5es Externas\n\nO sistema se integrar\u00e1 com diversos servi\u00e7os externos:\n\n- Stripe para processamento de pagamentos e assinaturas\n- iFood e outras plataformas de delivery\n- Sistemas fiscais e emiss\u00e3o de notas\n- Servi\u00e7os de email e SMS\n- Gateways de pagamento para opera\u00e7\u00f5es do restaurante\n\n## 3. Implementa\u00e7\u00e3o da Plataforma SaaS\n\n### 3.1 Sistema de Assinaturas\n\n#### 3.1.1 Estrutura de Planos\n\nImplementa\u00e7\u00e3o de diferentes n\u00edveis de planos:\n\n- **Plano B\u00e1sico**: Funcionalidades essenciais para pequenos estabelecimentos\n- **Plano Padr\u00e3o**: Recursos intermedi\u00e1rios para m\u00e9dios restaurantes\n- **Plano Premium**: Funcionalidades completas para grandes opera\u00e7\u00f5es\n- **Plano Enterprise**: Solu\u00e7\u00f5es personalizadas para redes e franquias\n\n#### 3.1.2 Gerenciamento de Assinaturas\n\nDesenvolvimento do fluxo completo de gest\u00e3o de assinaturas:\n\n- Cadastro e onboarding\n- Per\u00edodo de teste gratuito\n- Convers\u00e3o para assinatura paga\n- Gest\u00e3o de m\u00e9todos de pagamento\n- Renova\u00e7\u00f5es autom\u00e1ticas\n- Upgrades e downgrades de plano\n- Cancelamentos e reten\u00e7\u00e3o\n\n#### 3.1.3 Integra\u00e7\u00e3o com Stripe\n\nImplementa\u00e7\u00e3o da integra\u00e7\u00e3o completa com a API do Stripe:\n\n- Cria\u00e7\u00e3o de produtos e planos no Stripe\n- Processamento de pagamentos recorrentes\n- Gest\u00e3o de cart\u00f5es e m\u00e9todos de pagamento\n- Webhooks para eventos de pagamento\n- Tratamento de falhas e disputas\n- Gera\u00e7\u00e3o de faturas e recibos\n\n#### 3.1.4 Controle de Limites e Recursos\n\nDesenvolvimento de mecanismos para controlar a utiliza\u00e7\u00e3o conforme o plano:\n\n- Verifica\u00e7\u00e3o de limites (mesas, usu\u00e1rios, etc.)\n- Monitoramento de uso de recursos\n- Notifica\u00e7\u00f5es de limite pr\u00f3ximo\n- Op\u00e7\u00f5es de upgrade quando necess\u00e1rio\n- Controle de acesso a m\u00f3dulos premium\n\n### 3.2 Portal Administrativo\n\n#### 3.2.1 Gest\u00e3o de Clientes\n\nCria\u00e7\u00e3o de interfaces para administradores da plataforma:\n\n- Dashboard de clientes ativos\n- Detalhes de conta e consumo\n- Hist\u00f3rico de pagamentos\n- Ferramentas de suporte\n- A\u00e7\u00f5es administrativas (suspender, cancelar, etc.)\n\n#### 3.2.2 Relat\u00f3rios e Analytics\n\nImplementa\u00e7\u00e3o de ferramentas de an\u00e1lise para a opera\u00e7\u00e3o SaaS:\n\n- M\u00e9tricas de aquisi\u00e7\u00e3o de clientes\n- Taxas de convers\u00e3o e reten\u00e7\u00e3o\n- Receita recorrente mensal (MRR)\n- Valor do tempo de vida do cliente (LTV)\n- Custos de aquisi\u00e7\u00e3o de cliente (CAC)\n- Churn e renova\u00e7\u00f5es\n\n#### 3.2.3 Sistema de Suporte\n\nDesenvolvimento de ferramentas para atendimento ao cliente:\n\n- Sistema de tickets\n- Base de conhecimento\n- Chat ao vivo\n- Suporte por email\n- Escalamento para diferentes n\u00edveis\n- M\u00e9tricas de satisfa\u00e7\u00e3o e tempo de resposta\n\n## 4. Implementa\u00e7\u00e3o do Sistema de Gest\u00e3o de Restaurantes\n\n### 4.1 Personaliza\u00e7\u00e3o por Tipo de Restaurante\n\n#### 4.1.1 Onboarding e Configura\u00e7\u00e3o\n\nCria\u00e7\u00e3o do processo de configura\u00e7\u00e3o inicial:\n\n- Sele\u00e7\u00e3o do tipo de restaurante\n- Compara\u00e7\u00e3o entre tipos\n- Configura\u00e7\u00e3o de informa\u00e7\u00f5es b\u00e1sicas\n- Setup inicial de mesas e ambiente\n- Cadastro de card\u00e1pio inicial\n- Configura\u00e7\u00e3o de funcion\u00e1rios e acessos\n\n#### 4.1.2 Interfaces Espec\u00edficas\n\nDesenvolvimento de interfaces adaptadas para cada tipo:\n\n- \u00c0 la carte: Foco em mesas e reservas\n- Fast Food: Foco em fila de pedidos e agilidade\n- Pizzaria: Construtor de pizza meio a meio\n- Rod\u00edzio: Controle de passadas e tempos\n- Delivery: Rastreamento e rotas\n- Self-service: Integra\u00e7\u00e3o com balan\u00e7as\n- Food Truck: Interface simplificada e mobile-first\n\n#### 4.1.3 Fluxos de Trabalho Personalizados\n\nImplementa\u00e7\u00e3o de fluxos adaptados para cada modelo:\n\n- L\u00f3gica de neg\u00f3cio espec\u00edfica por tipo\n- Regras de prioriza\u00e7\u00e3o de pedidos\n- Controles especializados (forno, passadas, pesagem)\n- Relat\u00f3rios e m\u00e9tricas relevantes para cada modelo\n\n### 4.2 M\u00f3dulo de Comandas e Pedidos\n\n#### 4.2.1 Gest\u00e3o de Mesas\n\nDesenvolvimento do sistema de controle de mesas:\n\n- Mapa visual de mesas\n- Status em tempo real\n- Controle de ocupa\u00e7\u00e3o\n- Timer de perman\u00eancia\n- Hist\u00f3rico de uso\n\n#### 4.2.2 Sistema de Pedidos\n\nImplementa\u00e7\u00e3o do fluxo completo de pedidos:\n\n- Registro de pedidos (via QR Code e gar\u00e7om)\n- Modifica\u00e7\u00f5es e adi\u00e7\u00f5es\n- Encaminhamento para cozinha\n- Notifica\u00e7\u00f5es de status\n- Fechamento e pagamento\n\n#### 4.2.3 QR Code para Clientes\n\nDesenvolvimento da experi\u00eancia de pedido via QR Code:\n\n- Gera\u00e7\u00e3o de QR Codes para mesas\n- Interface adaptada para mobile\n- Registro de dados do cliente\n- Card\u00e1pio digital interativo\n- Carrinho de pedidos\n- Solicita\u00e7\u00e3o de atendimento\n- Pagamento pelo smartphone\n\n#### 4.2.4 Divis\u00e3o de Contas\n\nImplementa\u00e7\u00e3o de mecanismos para divis\u00e3o de contas:\n\n- Divis\u00e3o por item\n- Divis\u00e3o igual entre participantes\n- Divis\u00e3o percentual\n- M\u00faltiplos pagamentos\n- Contas parciais\n\n### 4.3 M\u00f3dulo de Cozinha\n\n#### 4.3.1 Painel de Produ\u00e7\u00e3o\n\nDesenvolvimento da interface para cozinha:\n\n- Fila de pedidos em tempo real\n- Classifica\u00e7\u00e3o por prioridade\n- Temporizadores de preparo\n- Status visual por pedido\n- Alertas para pedidos atrasados\n\n#### 4.3.2 Gest\u00e3o de Estoque\n\nImplementa\u00e7\u00e3o do controle de estoque integrado:\n\n- Cadastro de ingredientes e insumos\n- Abate autom\u00e1tico do estoque\n- Alertas de estoque baixo\n- Previs\u00e3o de necessidade\n- Pedidos autom\u00e1ticos\n\n#### 4.3.3 Controles Espec\u00edficos\n\nCria\u00e7\u00e3o de funcionalidades especializadas:\n\n- Temporizadores para forno\n- Controle de passadas para rod\u00edzio\n- Separa\u00e7\u00e3o de delivery e local\n- Alertas para al\u00e9rgenos\n\n### 4.4 M\u00f3dulo de Pagamentos\n\n#### 4.4.1 Processamento de Pagamentos\n\nImplementa\u00e7\u00e3o dos fluxos de pagamento:\n\n- Integra\u00e7\u00e3o com Stripe para pagamentos\n- Suporte a cart\u00f5es de cr\u00e9dito/d\u00e9bito\n- Pagamentos via PIX\n- Dinheiro e outras formas locais\n- Concilia\u00e7\u00e3o financeira\n\n#### 4.4.2 Fechamento de Caixa\n\nDesenvolvimento do processo de fechamento:\n\n- Abertura e fechamento de caixa\n- Registro de entradas e sa\u00eddas\n- Contagem f\u00edsica\n- Detec\u00e7\u00e3o de diferen\u00e7as\n- Relat\u00f3rio de fechamento\n\n#### 4.4.3 Emiss\u00e3o de Comprovantes\n\nImplementa\u00e7\u00e3o da gera\u00e7\u00e3o de documentos:\n\n- Recibos digitais\n- Envio por email ou WhatsApp\n- Integra\u00e7\u00e3o com sistemas fiscais\n- Armazenamento de comprovantes\n\n### 4.5 M\u00f3dulo de Funcion\u00e1rios\n\n#### 4.5.1 Controle de Acesso\n\nDesenvolvimento do sistema de acesso:\n\n- Cadastro de funcion\u00e1rios\n- Perfis de permiss\u00e3o\n- Autentica\u00e7\u00e3o segura\n- Registro de atividades\n- Pol\u00edticas de seguran\u00e7a\n\n#### 4.5.2 Registro de Ponto\n\nImplementa\u00e7\u00e3o do controle de ponto:\n\n- Registro de entrada e sa\u00edda\n- Valida\u00e7\u00e3o por localiza\u00e7\u00e3o\n- C\u00e1lculo de horas trabalhadas\n- Controle de intervalos\n- Exporta\u00e7\u00e3o para folha de pagamento\n\n#### 4.5.3 Desempenho e Comiss\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para gest\u00e3o de desempenho:\n\n- M\u00e9tricas por funcion\u00e1rio\n- C\u00e1lculo de comiss\u00f5es\n- Avalia\u00e7\u00e3o de desempenho\n- Classifica\u00e7\u00e3o por objetivos\n- Feedback e desenvolvimento\n\n### 4.6 M\u00f3dulo de Fornecedores\n\n#### 4.6.1 Cadastro e Gest\u00e3o\n\nImplementa\u00e7\u00e3o do gerenciamento de fornecedores:\n\n- Cadastro detalhado de fornecedores\n- Categoriza\u00e7\u00e3o por tipo de produto\n- Condi\u00e7\u00f5es comerciais\n- Contatos de emerg\u00eancia\n- Avalia\u00e7\u00e3o de desempenho\n\n#### 4.6.2 Pedidos e Reposi\u00e7\u00e3o\n\nDesenvolvimento do fluxo de compras:\n\n- Pedidos r\u00e1pidos\n- Sugest\u00e3o autom\u00e1tica de reposi\u00e7\u00e3o\n- Aprova\u00e7\u00e3o de pedidos\n- Acompanhamento de entrega\n- Recebimento e confer\u00eancia\n\n#### 4.6.3 Hist\u00f3rico e Avalia\u00e7\u00e3o\n\nCria\u00e7\u00e3o de ferramentas para an\u00e1lise de fornecedores:\n\n- Hist\u00f3rico de pedidos\n- Cumprimento de prazos\n- Qualidade de produtos\n- Competitividade de pre\u00e7os\n- Ranking de fornecedores\n\n### 4.7 M\u00f3dulo de Relat\u00f3rios\n\n#### 4.7.1 Relat\u00f3rios Operacionais\n\nImplementa\u00e7\u00e3o de relat\u00f3rios para a opera\u00e7\u00e3o di\u00e1ria:\n\n- Vendas por per\u00edodo\n- Ocupa\u00e7\u00e3o de mesas\n- Tempo m\u00e9dio de atendimento\n- Itens mais vendidos\n- Cancelamentos e devolu\u00e7\u00f5es\n\n#### 4.7.2 Relat\u00f3rios Financeiros\n\nDesenvolvimento de an\u00e1lises financeiras:\n\n- Faturamento por per\u00edodo\n- Custos e despesas\n- Lucratividade por produto\n- Fluxo de caixa\n- Proje\u00e7\u00f5es e comparativos\n\n#### 4.7.3 Dashboards e Analytics\n\nCria\u00e7\u00e3o de pain\u00e9is visuais e an\u00e1lises:\n\n- Dashboard executivo\n- Gr\u00e1ficos e visualiza\u00e7\u00f5es\n- Tend\u00eancias e sazonalidade\n- An\u00e1lise de dados em tempo real\n- Exporta\u00e7\u00e3o para Excel/PDF\n\n### 4.8 M\u00f3dulo de Marketing e CRM\n\n#### 4.8.1 Cadastro de Clientes\n\nImplementa\u00e7\u00e3o do gerenciamento de clientes:\n\n- Captura de dados via QR Code\n- Hist\u00f3rico de pedidos\n- Prefer\u00eancias e restri\u00e7\u00f5es\n- Segmenta\u00e7\u00e3o de clientes\n- Privacidade e LGPD\n\n#### 4.8.2 Programa de Fidelidade\n\nDesenvolvimento de sistema de fideliza\u00e7\u00e3o:\n\n- Ac\u00famulo de pontos por compra\n- N\u00edveis de fidelidade\n- Recompensas e benef\u00edcios\n- Promo\u00e7\u00f5es personalizadas\n- An\u00e1lise de engajamento\n\n#### 4.8.3 Campanhas e Promo\u00e7\u00f5es\n\nCria\u00e7\u00e3o de ferramentas para a\u00e7\u00f5es de marketing:\n\n- Cria\u00e7\u00e3o de campanhas\n- Descontos e ofertas especiais\n- Comunica\u00e7\u00e3o por email e SMS\n- Aniversariantes do m\u00eas\n- Mensura\u00e7\u00e3o de resultados\n\n## 5. Integra\u00e7\u00f5es com Servi\u00e7os Externos\n\n### 5.1 Integra\u00e7\u00e3o com Plataformas de Delivery\n\n#### 5.1.1 iFood e Outras Plataformas\n\nImplementa\u00e7\u00e3o de conex\u00e3o com marketplaces:\n\n- Recebimento de pedidos em tempo real\n- Aceita\u00e7\u00e3o/rejei\u00e7\u00e3o autom\u00e1tica\n- Atualiza\u00e7\u00e3o de status\n- Sincroniza\u00e7\u00e3o de card\u00e1pio\n- Concilia\u00e7\u00e3o financeira\n\n#### 5.1.2 Delivery Pr\u00f3prio\n\nDesenvolvimento de sistema pr\u00f3prio de delivery:\n\n- Cadastro de entregadores\n- Roteiriza\u00e7\u00e3o de entregas\n- Rastreamento em tempo real\n- \u00c1reas e taxas de entrega\n- Gest\u00e3o de frota\n\n### 5.2 Integra\u00e7\u00e3o com Sistemas Fiscais\n\n#### 5.2.1 Emiss\u00e3o de Notas Fiscais\n\nImplementa\u00e7\u00e3o de processos fiscais:\n\n- Emiss\u00e3o de NFC-e, NF-e\n- Valida\u00e7\u00e3o com WebServices da SEFAZ\n- Armazenamento e envio de documentos\n- Tratamento de conting\u00eancia\n- Relat\u00f3rios fiscais\n\n#### 5.2.2 Concilia\u00e7\u00e3o Cont\u00e1bil\n\nDesenvolvimento de ferramentas para contabilidade:\n\n- Exporta\u00e7\u00e3o para sistemas cont\u00e1beis\n- Plano de contas configur\u00e1vel\n- Relat\u00f3rios para DRE\n- Apura\u00e7\u00e3o de impostos\n- Fechamento mensal\n\n### 5.3 Integra\u00e7\u00e3o com Balan\u00e7as\n\n#### 5.3.1 Para Self-Service\n\nImplementa\u00e7\u00e3o de conex\u00e3o com balan\u00e7as:\n\n- Leitura de peso em tempo real\n- C\u00e1lculo autom\u00e1tico de valor\n- Calibra\u00e7\u00e3o e configura\u00e7\u00e3o\n- Modo offline para conting\u00eancia\n- Registro de pesagens\n\n#### 5.3.2 Para Controle de Estoque\n\nDesenvolvimento de pesagem para estoque:\n\n- Pesagem de insumos\n- Convers\u00e3o de unidades\n- Controle de quebra e perdas\n- Rastreabilidade\n- Invent\u00e1rio f\u00edsico\n\n### 5.4 Integra\u00e7\u00e3o com Equipamentos\n\n#### 5.4.1 Impressoras e Comandas\n\nImplementa\u00e7\u00e3o de sistema de impress\u00e3o:\n\n- Impress\u00e3o de comandas para cozinha\n- Impress\u00e3o de contas e recibos\n- Suporte a diversas marcas de impressoras\n- Configura\u00e7\u00e3o de layouts\n- Tratamento de falhas\n\n#### 5.4.2 Displays de Cozinha\n\nDesenvolvimento de integra\u00e7\u00e3o com displays:\n\n- Exibi\u00e7\u00e3o de pedidos em andamento\n- Alertas visuais e sonoros\n- Temporizadores\n- Confirma\u00e7\u00e3o por toque\n- Sincroniza\u00e7\u00e3o em tempo real\n\n## 6. Infraestrutura e Hospedagem\n\n### 6.1 Ambiente de Produ\u00e7\u00e3o\n\n#### 6.1.1 Servidores Web\n\nConfigura\u00e7\u00e3o da infraestrutura web:\n\n- Servidores web redundantes\n- Balanceadores de carga\n- Certificados SSL/TLS\n- Cache e otimiza\u00e7\u00e3o\n- Monitoramento 24/7\n\n#### 6.1.2 Banco de Dados\n\nImplementa\u00e7\u00e3o da camada de dados:\n\n- Cluster de banco de dados MySQL\n- Replica\u00e7\u00e3o e alta disponibilidade\n- Backups automatizados\n- Particionamento por tenant\n- Otimiza\u00e7\u00e3o de performance\n\n#### 6.1.3 Armazenamento\n\nConfigura\u00e7\u00e3o de sistemas de armazenamento:\n\n- Sistema de arquivos distribu\u00eddo\n- Armazenamento para backups\n- CDN para assets est\u00e1ticos\n- Pol\u00edticas de reten\u00e7\u00e3o\n- Compress\u00e3o e otimiza\u00e7\u00e3o\n\n### 6.2 Escalabilidade\n\n#### 6.2.1 Horizontal\n\nImplementa\u00e7\u00e3o de mecanismos de crescimento:\n\n- Auto-scaling de servidores\n- Gerenciamento de capacidade\n- Distribui\u00e7\u00e3o geogr\u00e1fica\n- Load balancing avan\u00e7ado\n- Cont\u00eaineres e orquestra\u00e7\u00e3o\n\n#### 6.2.2 Vertical\n\nPlanejamento para crescimento de recursos:\n\n- Upgrades de hardware\n- Otimiza\u00e7\u00e3o de software\n- Benchmarking e performance\n- Ajuste de recursos por demanda\n- Monitoramento de gargalos\n\n### 6.3 Monitoramento e Logging\n\n#### 6.3.1 Monitoramento de Sistema\n\nImplementa\u00e7\u00e3o de sistemas de observabilidade:\n\n- Monitoramento em tempo real\n- Alertas autom\u00e1ticos\n- Dashboards operacionais\n- An\u00e1lise de tend\u00eancias\n- Detec\u00e7\u00e3o de anomalias\n\n#### 6.3.2 Logging e Auditoria\n\nDesenvolvimento de registro de eventos:\n\n- Centraliza\u00e7\u00e3o de logs\n- Reten\u00e7\u00e3o configur\u00e1vel\n- Busca e an\u00e1lise\n- Trilhas de auditoria\n- Exporta\u00e7\u00e3o e conformidade\n\n### 6.4 Continuidade de Neg\u00f3cio\n\n#### 6.4.1 Backups\n\nImplementa\u00e7\u00e3o de estrat\u00e9gia de backups:\n\n- Backups di\u00e1rios automatizados\n- Backups incrementais\n- Verifica\u00e7\u00e3o de integridade\n- Restaura\u00e7\u00e3o testada\n- Armazenamento offsite\n\n#### 6.4.2 Disaster Recovery\n\nDesenvolvimento de plano de recupera\u00e7\u00e3o:\n\n- Site alternativo\n- Procedimentos documentados\n- Tempo de recupera\u00e7\u00e3o definido\n- Testes regulares\n- Comunica\u00e7\u00e3o de incidentes\n\n#### 6.4.3 Modo Offline\n\nImplementa\u00e7\u00e3o de funcionamento offline:\n\n- Opera\u00e7\u00f5es b\u00e1sicas sem internet\n- Sincroniza\u00e7\u00e3o autom\u00e1tica\n- Buffer local de transa\u00e7\u00f5es\n- Reconcilia\u00e7\u00e3o ap\u00f3s reconex\u00e3o\n- Notifica\u00e7\u00f5es de status\n\n## 7. Testes e Garantia de Qualidade\n\n### 7.1 Estrat\u00e9gia de Testes\n\n#### 7.1.1 Testes Unit\u00e1rios\n\nImplementa\u00e7\u00e3o de testes de componentes:\n\n- Cobertura de c\u00f3digo\n- Testes automatizados\n- Mock de depend\u00eancias\n- Valida\u00e7\u00e3o de regras de neg\u00f3cio\n- Integra\u00e7\u00e3o com CI/CD\n\n#### 7.1.2 Testes de Integra\u00e7\u00e3o\n\nDesenvolvimento de valida\u00e7\u00e3o de integra\u00e7\u00f5es:\n\n- Teste de APIs\n- Simula\u00e7\u00f5es de servi\u00e7os externos\n- Valida\u00e7\u00e3o de fluxos completos\n- Ambientes de teste isolados\n- Automa\u00e7\u00e3o de casos de teste\n\n#### 7.1.3 Testes de Aceita\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de valida\u00e7\u00e3o do usu\u00e1rio:\n\n- Testes de usabilidade\n- Cen\u00e1rios de uso real\n- Valida\u00e7\u00e3o com stakeholders\n- Feedback documentado\n- Aprova\u00e7\u00e3o formal\n\n### 7.2 Garantia de Qualidade\n\n#### 7.2.1 Revis\u00e3o de C\u00f3digo\n\nEstabelecimento de processos de revis\u00e3o:\n\n- Padr\u00f5es de codifica\u00e7\u00e3o\n- Pull/merge requests\n- Code reviews\n- An\u00e1lise est\u00e1tica\n- M\u00e9tricas de qualidade\n\n#### 7.2.2 Controle de Vers\u00e3o\n\nImplementa\u00e7\u00e3o de gerenciamento de vers\u00f5es:\n\n- Git flow ou similar\n- Ambientes separados (DEV/STG/PROD)\n- Tagging de vers\u00f5es\n- Gest\u00e3o de releases\n- Changelogs e documenta\u00e7\u00e3o\n\n#### 7.2.3 Testes de Performance\n\nDesenvolvimento de valida\u00e7\u00e3o de desempenho:\n\n- Testes de carga\n- Benchmarking\n- Otimiza\u00e7\u00e3o de recursos\n- Monitoramento de impacto\n- Simula\u00e7\u00e3o de multi-tenancy\n\n## 8. Seguran\u00e7a e Conformidade\n\n### 8.1 Seguran\u00e7a de Aplica\u00e7\u00e3o\n\n#### 8.1.1 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o\n\nImplementa\u00e7\u00e3o de controle de acesso:\n\n- Autentica\u00e7\u00e3o forte (2FA)\n- Gerenciamento de sess\u00f5es\n- Controle de acesso baseado em perfil\n- Pol\u00edticas de senha\n- Prote\u00e7\u00e3o contra for\u00e7a bruta\n\n#### 8.1.2 Prote\u00e7\u00e3o de Dados\n\nDesenvolvimento de mecanismos de prote\u00e7\u00e3o:\n\n- Criptografia em tr\u00e2nsito (TLS)\n- Criptografia em repouso\n- Tokeniza\u00e7\u00e3o de dados sens\u00edveis\n- Mascaramento de informa\u00e7\u00f5es\n- Acesso baseado em necessidade\n\n#### 8.1.3 Seguran\u00e7a de API\n\nImplementa\u00e7\u00e3o de prote\u00e7\u00e3o de endpoints:\n\n- Autentica\u00e7\u00e3o por token (JWT)\n- Rate limiting\n- Valida\u00e7\u00e3o de entrada\n- CORS configurado\n- Prote\u00e7\u00e3o contra ataques comuns\n\n### 8.2 Conformidade\n\n#### 8.2.1 LGPD/GDPR\n\nAdequa\u00e7\u00e3o \u00e0 legisla\u00e7\u00e3o de privacidade:\n\n- Invent\u00e1rio de dados pessoais\n- Termos de uso e privacidade\n- Mecanismos de consentimento\n- Direitos do titular (acesso, exclus\u00e3o)\n- Relat\u00f3rios de impacto\n\n#### 8.2.2 PCI DSS\n\nConformidade para processamento de pagamentos:\n\n- Seguran\u00e7a de dados de cart\u00e3o\n- Tokeniza\u00e7\u00e3o via Stripe\n- Escopo reduzido de PCI\n- Varreduras de seguran\u00e7a\n- Treinamento e conscientiza\u00e7\u00e3o\n\n#### 8.2.3 Auditoria e Compliance\n\nImplementa\u00e7\u00e3o de pr\u00e1ticas de conformidade:\n\n- Trilhas de auditoria\n- Logs imut\u00e1veis\n- Evid\u00eancias de controle\n- Relat\u00f3rios de compliance\n- Revis\u00f5es peri\u00f3dicas\n\n## 9. Lan\u00e7amento e Opera\u00e7\u00f5es\n\n### 9.1 Estrat\u00e9gia de Lan\u00e7amento\n\n#### 9.1.1 MVP e Roadmap\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Defini\u00e7\u00e3o do MVP inicial\n- Prioriza\u00e7\u00e3o de funcionalidades\n- Roadmap de m\u00e9dio prazo\n- Feedback loops planejados\n- Marcos e m\u00e9tricas de sucesso\n\n#### 9.1.2 Beta e Early Adopters\n\nImplementa\u00e7\u00e3o de programa inicial:\n\n- Sele\u00e7\u00e3o de clientes beta\n- Incentivos para early adopters\n- Coleta estruturada de feedback\n- Ciclos r\u00e1pidos de itera\u00e7\u00e3o\n- Estrat\u00e9gia de expans\u00e3o\n\n#### 9.1.3 Go-to-Market\n\nDesenvolvimento de estrat\u00e9gia comercial:\n\n- Posicionamento de mercado\n- Estrat\u00e9gia de pre\u00e7os\n- Canais de aquisi\u00e7\u00e3o\n- Materiais de marketing\n- Plano de vendas\n\n### 9.2 Opera\u00e7\u00f5es Cont\u00ednuas\n\n#### 9.2.1 Suporte ao Cliente\n\nImplementa\u00e7\u00e3o de estrutura de atendimento:\n\n- Equipe de suporte escalonada\n- Base de conhecimento\n- Procedimentos documentados\n- M\u00e9tricas de atendimento\n- Feedback e melhoria cont\u00ednua\n\n#### 9.2.2 Monitoramento de Uso\n\nDesenvolvimento de an\u00e1lise de utiliza\u00e7\u00e3o:\n\n- Telemetria de uso\n- Detec\u00e7\u00e3o de problemas\n- M\u00e9tricas de engajamento\n- An\u00e1lise de churn\n- Oportunidades de upsell\n\n#### 9.2.3 SLA e Garantias\n\nEstabelecimento de acordos de n\u00edvel de servi\u00e7o:\n\n- Disponibilidade garantida\n- Tempo de resposta para suporte\n- Resolu\u00e7\u00e3o de incidentes\n- Compensa\u00e7\u00f5es por falhas\n- Comunica\u00e7\u00e3o proativa\n\n## 10. Manuten\u00e7\u00e3o e Evolu\u00e7\u00e3o\n\n### 10.1 Desenvolvimento Cont\u00ednuo\n\n#### 10.1.1 Novas Funcionalidades\n\nPlanejamento de evolu\u00e7\u00e3o do produto:\n\n- Processo de coleta de requisitos\n- Prioriza\u00e7\u00e3o baseada em valor\n- Desenvolvimento \u00e1gil\n- Testes de conceito\n- Valida\u00e7\u00e3o com usu\u00e1rios\n\n#### 10.1.2 Corre\u00e7\u00f5es e Melhorias\n\nImplementa\u00e7\u00e3o de processo de manuten\u00e7\u00e3o:\n\n- Triagem de bugs e issues\n- Prioriza\u00e7\u00e3o por impacto\n- Janelas de manuten\u00e7\u00e3o\n- Hotfixes para problemas cr\u00edticos\n- Refatora\u00e7\u00e3o planejada\n\n#### 10.1.3 Atualiza\u00e7\u00f5es de Tecnologia\n\nPlano para evolu\u00e7\u00e3o tecnol\u00f3gica:\n\n- Atualiza\u00e7\u00f5es de seguran\u00e7a\n- Atualiza\u00e7\u00e3o de frameworks\n- Migra\u00e7\u00e3o planejada\n- Testes de compatibilidade\n- Comunica\u00e7\u00e3o de mudan\u00e7as\n\n### 10.2 An\u00e1lise e Otimiza\u00e7\u00e3o\n\n#### 10.2.1 Performance\n\nMonitoramento e melhoria cont\u00ednua:\n\n- An\u00e1lise de gargalos\n- Otimiza\u00e7\u00e3o de consultas\n- Refinamento de caching\n- Monitoramento de uso de recursos\n- Benchmarking peri\u00f3dico\n\n#### 10.2.2 Custo-Benef\u00edcio\n\nAvalia\u00e7\u00e3o financeira constante:\n\n- An\u00e1lise de custos operacionais\n- Otimiza\u00e7\u00e3o de recursos\n- Renegocia\u00e7\u00e3o com fornecedores\n- Efici\u00eancia energ\u00e9tica\n- Automa\u00e7\u00e3o de processos\n\n#### 10.2.3 Experi\u00eancia do Usu\u00e1rio\n\nMelhoria cont\u00ednua da UX:\n\n- Testes de usabilidade\n- An\u00e1lise de caminhos e convers\u00e3o\n- Feedback estruturado\n- A/B testing\n- Pesquisas de satisfa\u00e7\u00e3o\n\n## 11. Diret\u00f3rio Completo do Projeto\n\n```\nrestaurante-sistema/\n\u2502\n\u251c\u2500\u2500 assets/                        # Arquivos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 css/                       # Estilos CSS\n\u2502   \u2502   \u251c\u2500\u2500 main.css               # Estilo principal\n\u2502   \u2502   \u251c\u2500\u2500 login.css              # Estilos da p\u00e1gina de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.css          # Estilos do painel principal\n\u2502   \u2502   \u251c\u2500\u2500 tables.css             # Estilos do mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 menu.css               # Estilos do card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.css            # Estilos do painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 reports.css            # Estilos dos relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 ponto.css              # Estilos para o sistema de ponto\n\u2502   \u2502   \u251c\u2500\u2500 fornecedores.css       # Estilos para gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 customer-mobile.css    # Estilos para interface mobile do cliente\n\u2502   \u2502   \u251c\u2500\u2500 subscription.css       # Estilos para p\u00e1ginas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 pricing.css            # Estilos para p\u00e1gina de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing.css            # Estilos para gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Estilos espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.css       # Estilo para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.css       # Estilo para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.css       # Estilo para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.css        # Estilo para rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.css    # Estilo para self-service/buf\u00ea\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.css       # Estilo para delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 foodtruck.css      # Estilo para food truck\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bar.css            # Estilo para bar/pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cafeteria.css      # Estilo para cafeteria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.css      # Estilo para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.css         # Estilos para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 js/                        # Arquivos JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # JavaScript principal\n\u2502   \u2502   \u251c\u2500\u2500 login.js               # L\u00f3gica de login\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js           # Funcionalidades do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 tables.js              # Gerenciamento de mesas\n\u2502   \u2502   \u251c\u2500\u2500 orders.js              # Processamento de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 menu.js                # Card\u00e1pio digital\n\u2502   \u2502   \u251c\u2500\u2500 kitchen.js             # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory.js           # Controle de estoque\n\u2502   \u2502   \u251c\u2500\u2500 payments.js            # Processamento de pagamentos\n\u2502   \u2502   \u251c\u2500\u2500 stripe-integration.js  # Integra\u00e7\u00e3o com Stripe\n\u2502   \u2502   \u251c\u2500\u2500 subscription.js        # L\u00f3gica de gerenciamento de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 pricing-calculator.js  # Calculadora de pre\u00e7os e planos\n\u2502   \u2502   \u251c\u2500\u2500 billing-portal.js      # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 charts.js              # L\u00f3gica para gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 ponto.js               # L\u00f3gica de registro de ponto\n\u2502   \u2502   \u251c\u2500\u2500 supplier-manager.js    # Gest\u00e3o de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 group-orders.js        # L\u00f3gica de pedidos em grupo\n\u2502   \u2502   \u251c\u2500\u2500 bill-splitter.js       # Divis\u00e3o de contas\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-types/      # Scripts espec\u00edficos por tipo de restaurante\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 alacarte.js        # L\u00f3gica para restaurante \u00e0 la carte\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 fastfood.js        # L\u00f3gica para fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pizzaria.js        # L\u00f3gica para pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rodizio.js         # L\u00f3gica para rod\u00edzio (controle de passadas)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 selfservice.js     # L\u00f3gica para self-service (integra\u00e7\u00e3o com balan\u00e7as)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 delivery.js        # L\u00f3gica para delivery (rastreamento)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 multiunit.js       # L\u00f3gica para rede de restaurantes\n\u2502   \u2502   \u2514\u2500\u2500 onboarding.js          # L\u00f3gica para o processo de onboarding\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 images/                    # Imagens\n\u2502   \u2502   \u251c\u2500\u2500 logo/                  # Logotipos\n\u2502   \u2502   \u251c\u2500\u2500 icons/                 # \u00cdcones\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 menu/              # \u00cdcones para categorias do menu\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status/            # \u00cdcones de status\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 actions/           # \u00cdcones para a\u00e7\u00f5es\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 payment/           # \u00cdcones para m\u00e9todos de pagamento\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 subscription/      # \u00cdcones para planos de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 menu/                  # Imagens dos pratos\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Elementos da interface\n\u2502   \u2502   \u251c\u2500\u2500 plans/                 # Imagens para os planos de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 restaurant-types/      # Imagens espec\u00edficas por tipo de restaurante\n\u2502   \u2502       \u251c\u2500\u2500 alacarte/          # Imagens para restaurante \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood/          # Imagens para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria/          # Imagens para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 ...                # Outros tipos\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fonts/                     # Fontes\n\u2502\n\u251c\u2500\u2500 config/                        # Arquivos de configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 database.php               # Configura\u00e7\u00e3o da conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 constants.php              # Constantes da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 stripe.php                 # Configura\u00e7\u00e3o da API do Stripe\n\u2502   \u251c\u2500\u2500 email.php                  # Configura\u00e7\u00e3o de emails\n\u2502   \u251c\u2500\u2500 sms.php                    # Configura\u00e7\u00e3o de SMS\n\u2502   \u251c\u2500\u2500 qrcode.php                 # Configura\u00e7\u00e3o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 ifood.php                  # Configura\u00e7\u00e3o da API do iFood\n\u2502   \u251c\u2500\u2500 restaurant_types.php       # Configura\u00e7\u00e3o de tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface_settings.php     # Configura\u00e7\u00f5es de interface por tipo\n\u2502   \u251c\u2500\u2500 order_methods.php          # Configura\u00e7\u00f5es de m\u00e9todos de pedido\n\u2502   \u251c\u2500\u2500 subscription_plans.php     # Configura\u00e7\u00e3o de planos de assinatura\n\u2502   \u251c\u2500\u2500 tenant.php                 # Configura\u00e7\u00e3o multi-tenant\n\u2502   \u2514\u2500\u2500 feature_limits.php         # Limites de recursos por plano\n\u2502\n\u251c\u2500\u2500 controllers/                   # Controladores\n\u2502   \u251c\u2500\u2500 AuthController.php         # Controlador de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 SubscriptionController.php # Controlador de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 PlansController.php    # Controlador de planos\n\u2502   \u2502   \u251c\u2500\u2500 BillingController.php  # Controlador de faturamento\n\u2502   \u2502   \u2514\u2500\u2500 FeatureController.php  # Controlador de recursos dispon\u00edveis\n\u2502   \u251c\u2500\u2500 TenantController.php       # Controlador multi-tenant\n\u2502   \u251c\u2500\u2500 OnboardingController.php   # Controlador de configura\u00e7\u00e3o inicial\n\u2502   \u251c\u2500\u2500 DashboardController.php    # Controlador do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteDashboardController.php  # Dashboard espec\u00edfico para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodDashboardController.php  # Dashboard espec\u00edfico para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaDashboardController.php  # Dashboard espec\u00edfico para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioDashboardController.php   # Dashboard espec\u00edfico para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 DeliveryDashboardController.php  # Dashboard espec\u00edfico para delivery\n\u2502   \u251c\u2500\u2500 TableController.php        # Controlador de mesas\n\u2502   \u251c\u2500\u2500 OrderController.php        # Controlador de pedidos\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrderController.php    # Pedidos individuais\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrderController.php     # Pedidos em grupo\n\u2502   \u251c\u2500\u2500 MenuController.php         # Controlador do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuController.php   # Card\u00e1pio para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuController.php   # Card\u00e1pio para fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzariaMenuController.php   # Card\u00e1pio para pizzaria\n\u2502   \u2502   \u251c\u2500\u2500 RodizioMenuController.php    # Card\u00e1pio para rod\u00edzio\n\u2502   \u2502   \u2514\u2500\u2500 SelfServiceMenuController.php # Card\u00e1pio para self-service\n\u2502   \u251c\u2500\u2500 KitchenController.php      # Controlador da cozinha\n\u2502   \u251c\u2500\u2500 InventoryController.php    # Controlador de estoque\n\u2502   \u251c\u2500\u2500 PaymentController.php      # Controlador de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 BillSplitController.php      # Controlador de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ReportController.php       # Controlador de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 iFoodController.php        # Controlador de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 SupplierController.php     # Controlador de fornecedores\n\u2502   \u2502   \u2514\u2500\u2500 QuickOrderController.php     # Controlador de pedidos r\u00e1pidos\n\u2502   \u251c\u2500\u2500 StaffController.php        # Controlador de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 TimeClockController.php      # Controlador de ponto\n\u2502   \u251c\u2500\u2500 CustomerController.php     # Controlador de clientes\n\u2502   \u251c\u2500\u2500 QRCodeController.php       # Controlador de gera\u00e7\u00e3o e gest\u00e3o de QR Codes\n\u2502   \u251c\u2500\u2500 RestaurantTypeController.php # Controlador de tipo de restaurante\n\u2502   \u2514\u2500\u2500 SettingsController.php     # Controlador de configura\u00e7\u00f5es\n\u2502\n\u251c\u2500\u2500 models/                        # Modelos\n\u2502   \u251c\u2500\u2500 User.php                   # Modelo de usu\u00e1rio\n\u2502   \u251c\u2500\u2500 Account.php                # Modelo de conta (assinatura)\n\u2502   \u2502   \u251c\u2500\u2500 Subscription.php       # Modelo de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 Plan.php               # Modelo de plano\n\u2502   \u2502   \u251c\u2500\u2500 Invoice.php            # Modelo de fatura\n\u2502   \u2502   \u2514\u2500\u2500 Usage.php              # Modelo de uso de recursos\n\u2502   \u251c\u2500\u2500 Tenant.php                 # Modelo de tenant (separa\u00e7\u00e3o de dados)\n\u2502   \u251c\u2500\u2500 Restaurant.php             # Modelo de restaurante com tipo e configura\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 RestaurantType.php         # Modelo de tipos de restaurante\n\u2502   \u251c\u2500\u2500 CashRegister.php           # Modelo de caixa\n\u2502   \u251c\u2500\u2500 Table.php                  # Modelo de mesa\n\u2502   \u251c\u2500\u2500 Order.php                  # Modelo de pedido\n\u2502   \u2502   \u251c\u2500\u2500 SingleOrder.php        # Modelo de pedido individual\n\u2502   \u2502   \u2514\u2500\u2500 GroupOrder.php         # Modelo de pedido em grupo\n\u2502   \u251c\u2500\u2500 OrderItem.php              # Modelo de item de pedido\n\u2502   \u251c\u2500\u2500 MenuItem.php               # Modelo de item do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 AlacarteMenuItem.php   # Extens\u00e3o para itens de \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 FastFoodMenuItem.php   # Extens\u00e3o para itens de fast food\n\u2502   \u2502   \u251c\u2500\u2500 PizzaMenuItem.php      # Extens\u00e3o para pizza (metades, bordas, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 RodizioMenuItem.php    # Extens\u00e3o para rod\u00edzio\n\u2502   \u251c\u2500\u2500 Inventory.php              # Modelo de estoque\n\u2502   \u2502   \u2514\u2500\u2500 StockMovement.php      # Modelo de movimenta\u00e7\u00e3o de estoque\n\u2502   \u251c\u2500\u2500 Reservation.php            # Modelo de reserva\n\u2502   \u251c\u2500\u2500 Payment.php                # Modelo de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 BillSplit.php          # Modelo de divis\u00e3o de conta\n\u2502   \u251c\u2500\u2500 Staff.php                  # Modelo de funcion\u00e1rio\n\u2502   \u2502   \u2514\u2500\u2500 TimeClock.php          # Modelo de registro de ponto\n\u2502   \u251c\u2500\u2500 Supplier.php               # Modelo de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierContact.php    # Modelo de contato de fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 SupplierOrder.php      # Modelo de pedido para fornecedor\n\u2502   \u2502   \u2514\u2500\u2500 SupplierRating.php     # Modelo de avalia\u00e7\u00e3o de fornecedor\n\u2502   \u251c\u2500\u2500 Customer.php               # Modelo de cliente\n\u2502   \u2502   \u2514\u2500\u2500 LoyaltyProgram.php     # Modelo de programa de fidelidade\n\u2502   \u251c\u2500\u2500 MarketingCampaign.php      # Modelo de campanha de marketing\n\u2502   \u251c\u2500\u2500 QRCode.php                 # Modelo de QR Code\n\u2502   \u251c\u2500\u2500 RestaurantConfiguration.php # Modelo de configura\u00e7\u00e3o do restaurante\n\u2502   \u2514\u2500\u2500 RestaurantInterface.php    # Modelo de interface do restaurante\n\u2502\n\u251c\u2500\u2500 views/                         # Visualiza\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 auth/                      # Telas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 login.php              # Tela de login\n\u2502   \u2502   \u251c\u2500\u2500 reset-password.php     # Redefini\u00e7\u00e3o de senha\n\u2502   \u2502   \u2514\u2500\u2500 register.php           # Cadastro inicial\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 subscription/              # Telas de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # P\u00e1gina de planos dispon\u00edveis\n\u2502   \u2502   \u251c\u2500\u2500 checkout.php           # Checkout de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 success.php            # Confirma\u00e7\u00e3o de assinatura\n\u2502   \u2502   \u251c\u2500\u2500 billing.php            # Portal de gerenciamento de faturas\n\u2502   \u2502   \u251c\u2500\u2500 upgrade.php            # Upgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 downgrade.php          # Downgrade de plano\n\u2502   \u2502   \u251c\u2500\u2500 cancel.php             # Cancelamento de assinatura\n\u2502   \u2502   \u2514\u2500\u2500 payment-methods.php    # Gest\u00e3o de m\u00e9todos de pagamento\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 onboarding/                # Telas de configura\u00e7\u00e3o inicial\n\u2502   \u2502   \u251c\u2500\u2500 welcome.php            # Boas-vindas e introdu\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-type.php    # Sele\u00e7\u00e3o de tipo de restaurante\n\u2502   \u2502   \u251c\u2500\u2500 restaurant-comparison.php # Compara\u00e7\u00e3o entre tipos\n\u2502   \u2502   \u251c\u2500\u2500 basic-info.php         # Informa\u00e7\u00f5es b\u00e1sicas\n\u2502   \u2502   \u251c\u2500\u2500 menu-setup.php         # Configura\u00e7\u00e3o inicial do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 operating-hours.php    # Hor\u00e1rios de funcionamento\n\u2502   \u2502   \u251c\u2500\u2500 table-setup.php        # Configura\u00e7\u00e3o de mesas/layout\n\u2502   \u2502   \u251c\u2500\u2500 staff-roles.php        # Defini\u00e7\u00e3o de cargos\n\u2502   \u2502   \u251c\u2500\u2500 payment-options.php    # Op\u00e7\u00f5es de pagamento\n\u2502   \u2502   \u2514\u2500\u2500 finalize.php           # Finaliza\u00e7\u00e3o e ativa\u00e7\u00e3o\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 dashboard/                 # Telas do dashboard\n\u2502   \u2502   \u251c\u2500\u2500 index.php              # Dashboard principal (din\u00e2mico por tipo)\n\u2502   \u2502   \u251c\u2500\u2500 account-status.php     # Status da conta e assinatura\n\u2502   \u2502   \u251c\u2500\u2500 alacarte/              # Dashboards espec\u00edficos por tipo\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal \u00e0 la carte\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tables.php         # Visualiza\u00e7\u00e3o de mesas \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood/              # Fast food\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal fast food\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 queue.php          # Fila de pedidos fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria/              # Pizzaria\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal pizzaria\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pizza-builder.php  # Construtor de pizza\n\u2502   \u2502   \u251c\u2500\u2500 rodizio/               # Rod\u00edzio\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal rod\u00edzio\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rounds.php         # Controle de passadas\n\u2502   \u2502   \u251c\u2500\u2500 selfservice/           # Self-service\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal self-service\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scales.php         # Controle de balan\u00e7as\n\u2502   \u2502   \u251c\u2500\u2500 delivery/              # Delivery\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php          # Dashboard principal delivery\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 routes.php         # Controle de rotas de entrega\n\u2502   \u2502   \u2514\u2500\u2500 multiunit/             # Rede de restaurantes\n\u2502   \u2502       \u251c\u2500\u2500 index.php          # Dashboard principal rede\n\u2502   \u2502       \u2514\u2500\u2500 units.php          # Controle de unidades\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tables/                    # Telas de mesas\n\u2502   \u2502   \u251c\u2500\u2500 map.php                # Mapa de mesas\n\u2502   \u2502   \u251c\u2500\u2500 order.php              # Cria\u00e7\u00e3o de pedido\n\u2502   \u2502   \u2514\u2500\u2500 multi-user.php         # Gest\u00e3o de mesas com m\u00faltiplos usu\u00e1rios\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 menu/                      # Telas do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 admin.php              # Gerenciamento do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 editor.php             # Editor de itens do card\u00e1pio\n\u2502   \u2502   \u251c\u2500\u2500 customer.php           # Card\u00e1pio para o cliente (QR Code)\n\u2502   \u2502   \u251c\u2500\u2500 category-manager.php   # Gerenciador de categorias\n\u2502   \u2502   \u251c\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es e card\u00e1pios especiais\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Card\u00e1pios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Layout para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Layout para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Layout para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Layout para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 selfservice.php    # Layout para self-service\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 kitchen/                   # Telas da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 panel.php              # Painel da cozinha\n\u2502   \u2502   \u251c\u2500\u2500 inventory-usage.php    # Uso de ingredientes\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Pain\u00e9is espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Painel para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Painel para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Painel para pizzaria\n\u2502   \u2502       \u2514\u2500\u2500 rodizio.php        # Painel para rod\u00edzio\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 inventory/                 # Telas de estoque\n\u2502   \u2502   \u251c\u2500\u2500 management.php         # Gerenciamento de estoque\n\u2502   \u2502   \u251c\u2500\u2500 movements.php          # Movimenta\u00e7\u00f5es de estoque\n\u2502   \u2502   \u2514\u2500\u2500 alerts.php             # Alertas de estoque\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 payments/                  # Telas de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 process.php            # Processamento de pagamento\n\u2502   \u2502   \u251c\u2500\u2500 receipt.php            # Recibo\n\u2502   \u2502   \u251c\u2500\u2500 split-bill.php         # Divis\u00e3o de conta\n\u2502   \u2502   \u2514\u2500\u2500 group-payment.php      # Pagamento em grupo\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 reports/                   # Telas de relat\u00f3rios\n\u2502   \u2502   \u251c\u2500\u2500 sales.php              # Relat\u00f3rios de vendas\n\u2502   \u2502   \u251c\u2500\u2500 cash.php               # Fechamento de caixa\n\u2502   \u2502   \u251c\u2500\u2500 performance.php        # Desempenho de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 financial.php          # Relat\u00f3rios financeiros\n\u2502   \u2502   \u2514\u2500\u2500 types/                 # Relat\u00f3rios espec\u00edficos por tipo\n\u2502   \u2502       \u251c\u2500\u2500 alacarte.php       # Relat\u00f3rios para \u00e0 la carte\n\u2502   \u2502       \u251c\u2500\u2500 fastfood.php       # Relat\u00f3rios para fast food\n\u2502   \u2502       \u251c\u2500\u2500 pizzaria.php       # Relat\u00f3rios para pizzaria\n\u2502   \u2502       \u251c\u2500\u2500 rodizio.php        # Relat\u00f3rios para rod\u00edzio\n\u2502   \u2502       \u2514\u2500\u2500 delivery.php       # Relat\u00f3rios para delivery\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 ifood/                     # Telas de integra\u00e7\u00e3o com iFood\n\u2502   \u2502   \u2514\u2500\u2500 orders.php             # Pedidos do iFood\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 suppliers/                 # Telas de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de fornecedores\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do fornecedor\n\u2502   \u2502   \u251c\u2500\u2500 quick-order.php        # Pedido r\u00e1pido\n\u2502   \u2502   \u251c\u2500\u2500 history.php            # Hist\u00f3rico de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 ratings.php            # Avalia\u00e7\u00e3o de fornecedores\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 staff/                     # Telas de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de funcion\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do funcion\u00e1rio\n\u2502   \u2502   \u251c\u2500\u2500 schedule.php           # Escala de trabalho\n\u2502   \u2502   \u2514\u2500\u2500 time-clock/            # Sistema de ponto\n\u2502   \u2502       \u251c\u2500\u2500 register.php       # Registro de ponto\n\u2502   \u2502       \u251c\u2500\u2500 management.php     # Gest\u00e3o de ponto\n\u2502   \u2502       \u2514\u2500\u2500 reports.php        # Relat\u00f3rios de ponto\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 customers/                 # Telas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 list.php               # Lista de clientes\n\u2502   \u2502   \u251c\u2500\u2500 details.php            # Detalhes do cliente\n\u2502   \u2502   \u2514\u2500\u2500 loyalty.php            # Programa de fidelidade\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 marketing/                 # Telas de marketing\n\u2502   \u2502   \u251c\u2500\u2500 campaigns.php          # Campanhas de marketing\n\u2502   \u2502   \u2514\u2500\u2500 promotions.php         # Promo\u00e7\u00f5es\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 qrcode/                    # Telas de gest\u00e3o de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 generator.php          # Gerador de QR Codes\n\u2502   \u2502   \u251c\u2500\u2500 manager.php            # Gestor de QR Codes\n\u2502   \u2502   \u2514\u2500\u2500 preview.php            # Pr\u00e9-visualiza\u00e7\u00e3o de QR Codes\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 admin/                     # \u00c1rea administrativa da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 accounts.php           # Gest\u00e3o de contas de clientes\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # Configura\u00e7\u00e3o de planos\n\u2502   \u2502   \u251c\u2500\u2500 statistics.php         # Estat\u00edsticas da plataforma\n\u2502   \u2502   \u251c\u2500\u2500 support.php            # Sistema de suporte\n\u2502   \u2502   \u2514\u2500\u2500 settings.php           # Configura\u00e7\u00f5es da plataforma\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 settings/                  # Telas de configura\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 general.php            # Configura\u00e7\u00f5es gerais\n\u2502       \u251c\u2500\u2500 restaurant-type.php    # Configura\u00e7\u00e3o de tipo de restaurante\n\u2502       \u251c\u2500\u2500 interfaces.php         # Configura\u00e7\u00e3o de interfaces\n\u2502       \u251c\u2500\u2500 qrcode.php             # Configura\u00e7\u00e3o de QR Code\n\u2502       \u251c\u2500\u2500 group-orders.php       # Configura\u00e7\u00e3o de pedidos em grupo\n\u2502       \u251c\u2500\u2500 time-clock.php         # Configura\u00e7\u00e3o de ponto\n\u2502       \u251c\u2500\u2500 integrations.php       # Integra\u00e7\u00f5es\n\u2502       \u251c\u2500\u2500 account.php            # Configura\u00e7\u00f5es da conta/assinatura\n\u2502       \u2514\u2500\u2500 backup.php             # Backup e seguran\u00e7a\n\u2502\n\u251c\u2500\u2500 includes/                      # Arquivos inclu\u00eddos\n\u2502   \u251c\u2500\u2500 functions.php              # Fun\u00e7\u00f5es auxiliares\n\u2502   \u251c\u2500\u2500 validation.php             # Fun\u00e7\u00f5es de valida\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 session.php                # Gerenciamento de sess\u00e3o\n\u2502   \u251c\u2500\u2500 security.php               # Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 currency.php               # Formata\u00e7\u00e3o de moeda\n\u2502   \u251c\u2500\u2500 date.php                   # Fun\u00e7\u00f5es de data e hora\n\u2502   \u251c\u2500\u2500 notification.php           # Sistema de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 restaurant-type-helper.php # Fun\u00e7\u00f5es auxiliares para tipos de restaurante\n\u2502   \u251c\u2500\u2500 interface-loader.php       # Carregador de interfaces espec\u00edficas\n\u2502   \u251c\u2500\u2500 tenant-resolver.php        # Resolu\u00e7\u00e3o de tenant\n\u2502   \u251c\u2500\u2500 feature-checker.php        # Verifica\u00e7\u00e3o de recursos dispon\u00edveis por plano\n\u2502   \u2514\u2500\u2500 subscription-helper.php    # Fun\u00e7\u00f5es auxiliares para assinaturas\n\u2502\n\u251c\u2500\u2500 api/                           # Endpoints da API\n\u2502   \u251c\u2500\u2500 auth.php                   # API de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 subscription.php           # API de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 plans.php              # API de planos\n\u2502   \u2502   \u251c\u2500\u2500 webhooks.php           # Webhooks do Stripe\n\u2502   \u2502   \u2514\u2500\u2500 billing.php            # API de faturamento\n\u2502   \u251c\u2500\u2500 tables.php                 # API de mesas\n\u2502   \u251c\u2500\u2500 orders.php                 # API de pedidos\n\u2502   \u2502   \u2514\u2500\u2500 group-orders.php       # API de pedidos em grupo\n\u2502   \u251c\u2500\u2500 menu.php                   # API do card\u00e1pio\n\u2502   \u251c\u2500\u2500 payments.php               # API de pagamentos\n\u2502   \u2502   \u2514\u2500\u2500 bill-split.php         # API de divis\u00e3o de contas\n\u2502   \u251c\u2500\u2500 ifood.php                  # API de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 suppliers.php              # API de fornecedores\n\u2502   \u251c\u2500\u2500 staff.php                  # API de funcion\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 time-clock.php         # API de registro de ponto\n\u2502   \u251c\u2500\u2500 customers.php              # API de clientes\n\u2502   \u251c\u2500\u2500 reports.php                # API de relat\u00f3rios\n\u2502   \u251c\u2500\u2500 qrcode.php                 # API de QR Codes\n\u2502   \u2514\u2500\u2500 restaurant-type.php        # API de tipo de restaurante\n\u2502\n\u251c\u2500\u2500 services/                      # Servi\u00e7os\n\u2502   \u251c\u2500\u2500 StripeService.php          # Servi\u00e7o de pagamento Stripe\n\u2502   \u251c\u2500\u2500 SubscriptionService.php    # Servi\u00e7o de gerenciamento de assinaturas\n\u2502   \u251c\u2500\u2500 BillingService.php         # Servi\u00e7o de gerenciamento de faturas\n\u2502   \u251c\u2500\u2500 TenantService.php          # Servi\u00e7o de gest\u00e3o multi-tenant\n\u2502   \u251c\u2500\u2500 FeatureLimitService.php    # Servi\u00e7o de controle de limites por plano\n\u2502   \u251c\u2500\u2500 QRCodeService.php          # Servi\u00e7o de gera\u00e7\u00e3o de QR Code\n\u2502   \u251c\u2500\u2500 PDFService.php             # Servi\u00e7o de gera\u00e7\u00e3o de PDF\n\u2502   \u251c\u2500\u2500 iFoodService.php           # Servi\u00e7o de integra\u00e7\u00e3o com iFood\n\u2502   \u251c\u2500\u2500 EmailService.php           # Servi\u00e7o de e-mail\n\u2502   \u251c\u2500\u2500 SMSService.php             # Servi\u00e7o de SMS\n\u2502   \u251c\u2500\u2500 NotificationService.php    # Servi\u00e7o de notifica\u00e7\u00f5es\n\u2502   \u251c\u2500\u2500 ChartService.php           # Servi\u00e7o de gera\u00e7\u00e3o de gr\u00e1ficos\n\u2502   \u251c\u2500\u2500 BackupService.php          # Servi\u00e7o de backup\n\u2502   \u251c\u2500\u2500 RestaurantTypeService.php  # Servi\u00e7o de tipo de restaurante\n\u2502   \u251c\u2500\u2500 InterfaceService.php       # Servi\u00e7o de interfaces\n\u2502   \u251c\u2500\u2500 ScaleService.php           # Servi\u00e7o de integra\u00e7\u00e3o com balan\u00e7as\n\u2502   \u251c\u2500\u2500 DeliveryTrackingService.php # Servi\u00e7o de rastreamento de entregas\n\u2502   \u2514\u2500\u2500 RodizioTrackingService.php # Servi\u00e7o de controle de rod\u00edzio\n\u2502\n\u251c\u2500\u2500 database/                      # Arquivos de banco de dados\n\u2502   \u251c\u2500\u2500 migrations/                # Migra\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 create_tenants_table.php     # Tabela de tenants\n\u2502   \u2502   \u251c\u2500\u2500 create_accounts_table.php    # Tabela de contas\n\u2502   \u2502   \u251c\u2500\u2500 create_subscriptions_table.php # Tabela de assinaturas\n\u2502   \u2502   \u251c\u2500\u2500 create_plans_table.php       # Tabela de planos\n\u2502   \u2502   \u251c\u2500\u2500 create_invoices_table.php    # Tabela de faturas\n\u2502   \u2502   \u251c\u2500\u2500 create_usage_logs_table.php  # Tabela de uso de recursos\n\u2502   \u2502   \u251c\u2500\u2500 create_users_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_types_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurants_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_restaurant_configurations_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_tables_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_menu_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_order_items_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_inventory_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_customers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_staff_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_time_clock_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_suppliers_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_orders_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_supplier_contacts_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_payments_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_bill_splits_table.php\n\u2502   \u2502   \u251c\u2500\u2500 create_qrcodes_table.php\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 seeds/                     # Seeds\n\u2502       \u251c\u2500\u2500 plans_seeder.php       # Seed para planos de assinatura\n\u2502       \u251c\u2500\u2500 features_seeder.php    # Seed para recursos por plano\n\u2502       \u251c\u2500\u2500 users_seeder.php\n\u2502       \u251c\u2500\u2500 restaurant_types_seeder.php\n\u2502       \u251c\u2500\u2500 menu_items_seeder.php\n\u2502       \u251c\u2500\u2500 suppliers_seeder.php\n\u2502       \u251c\u2500\u2500 staff_seeder.php\n\u2502       \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 public/                        # Arquivos p\u00fablicos\n\u2502   \u251c\u2500\u2500 index.php                  # Ponto de entrada principal\n\u2502   \u251c\u2500\u2500 pricing.php                # P\u00e1gina p\u00fablica de pre\u00e7os\n\u2502   \u251c\u2500\u2500 register.php               # P\u00e1gina de registro\n\u2502   \u251c\u2500\u2500 customer-menu.php          # P\u00e1gina do card\u00e1pio digital\n\u2502   \u251c\u2500\u2500 group-order.php            # P\u00e1gina de pedido em grupo\n\u2502   \u251c\u2500\u2500 time-clock.php             # P\u00e1gina de registro de ponto\n\u2502   \u251c\u2500\u2500 webhook/                   # Endpoints de webhooks\n\u2502   \u2502   \u2514\u2500\u2500 stripe.php             # Webhook do Stripe\n\u2502   \u251c\u2500\u2500 qr/                        # QR Codes gerados\n\u2502   \u2502   \u2514\u2500\u2500 tables/                # QR Codes para mesas\n\u2502   \u251c\u2500\u2500 receipt/                   # Recibos gerados\n\u2502   \u2514\u2500\u2500 .htaccess                  # Configura\u00e7\u00e3o do Apache\n\u2502\n\u251c\u2500\u2500 mobile/                        # Arquivos de interface mobile\n\u2502   \u251c\u2500\u2500 index.php                  # Entrada principal mobile\n\u2502   \u251c\u2500\u2500 menu.php                   # Card\u00e1pio digital mobile\n\u2502   \u251c\u2500\u2500 order.php                  # Interface de pedido mobile\n\u2502   \u251c\u2500\u2500 group-order.php            # Interface de pedido em grupo\n\u2502   \u251c\u2500\u2500 payment.php                # Interface de pagamento mobile\n\u2502   \u251c\u2500\u2500 types/                     # Interfaces espec\u00edficas por tipo\n\u2502   \u2502   \u251c\u2500\u2500 alacarte.php           # Interface mobile para \u00e0 la carte\n\u2502   \u2502   \u251c\u2500\u2500 fastfood.php           # Interface mobile para fast food\n\u2502   \u2502   \u251c\u2500\u2500 pizzaria.php           # Interface mobile para pizzaria\n\u2502   \u2502   \u2514\u2500\u2500 rodizio.php            # Interface mobile para rod\u00edzio\n\u2502   \u2514\u2500\u2500 staff/                     # Interface para funcion\u00e1rios\n\u2502       \u2514\u2500\u2500 time-clock.php         # Registro de ponto mobile\n\u2502\n\u251c\u2500\u2500 docs/                          # Documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 setup.md                   # Instru\u00e7\u00f5es de instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 admin-guide.md             # Guia do administrador\n\u2502   \u251c\u2500\u2500 user-guide.md              # Guia do usu\u00e1rio\n\u2502   \u251c\u2500\u2500 api-docs.md                # Documenta\u00e7\u00e3o da API\n\u2502   \u251c\u2500\u2500 database-schema.md         # Esquema do banco de dados\n\u2502   \u251c\u2500\u2500 subscription.md            # Documenta\u00e7\u00e3o do sistema de assinaturas\n\u2502   \u2514\u2500\u2500 restaurant-types/          # Documenta\u00e7\u00e3o espec\u00edfica por tipo\n\u2502       \u251c\u2500\u2500 alacarte.md            # Documenta\u00e7\u00e3o para \u00e0 la carte\n\u2502       \u251c\u2500\u2500 fastfood.md            # Documenta\u00e7\u00e3o para fast food\n\u2502       \u251c\u2500\u2500 pizzaria.md            # Documenta\u00e7\u00e3o para pizzaria\n\u2502       \u2514\u2500\u2500 ...                    # Outros tipos\n\u2502\n\u251c\u2500\u2500 tests/                         # Testes automatizados\n\u2502   \u251c\u2500\u2500 unit/                      # Testes unit\u00e1rios\n\u2502   \u2502   \u2514\u2500\u2500 subscription/          # Testes de assinatura\n\u2502   \u251c\u2500\u2500 integration/               # Testes de integra\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 acceptance/                # Testes de aceita\u00e7\u00e3o\n\u2502\n\u251c\u2500\u2500 vendor/                        # Depend\u00eancias (Composer)\n\u2502\n\u251c\u2500\u2500 .htaccess                      # Configura\u00e7\u00e3o do Apache\n\u251c\u2500\u2500 index.php                      # Arquivo inicial (redirecionamento)\n\u251c\u2500\u2500 composer.json                  # Configura\u00e7\u00e3o do Composer\n\u251c\u2500\u2500 package.json                   # Configura\u00e7\u00e3o do NPM\n\u251c\u2500\u2500 README.md                      # Documenta\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 LICENSE                        # Licen\u00e7a do software\n\u2514\u2500\u2500 .gitignore                     # Arquivos ignorados pelo Git\n```\n\n## Conclus\u00e3o\n\nO Sistema de Gest\u00e3o de Restaurantes SaaS representa uma solu\u00e7\u00e3o completa e flex\u00edvel, adaptada para diversos tipos de estabelecimentos. A implementa\u00e7\u00e3o como servi\u00e7o por assinatura permite escalabilidade e sustentabilidade do neg\u00f3cio, enquanto a personaliza\u00e7\u00e3o por tipo de restaurante garante que cada cliente tenha uma experi\u00eancia otimizada para seu modelo espec\u00edfico.\n\nA arquitetura multi-tenant, combinada com um modelo de planos em n\u00edveis, permite atender desde pequenos estabelecimentos at\u00e9 grandes redes, com um caminho claro de crescimento que acompanha a evolu\u00e7\u00e3o do neg\u00f3cio do cliente.\n\n\n\nA integra\u00e7\u00e3o com servi\u00e7os essenciais como Stripe para pagamentos, iFood para delivery, e um sistema robusto de QR Codes para pedidos digitais posiciona o sistema como uma solu\u00e7\u00e3o moderna e completa para o mercado de restaurantes, que cada vez mais demanda digitaliza\u00e7\u00e3o e efici\u00eancia operacional.\n\nO projeto apresentado n\u00e3o apenas resolve os desafios operacionais do dia a dia de um restaurante, mas tamb\u00e9m oferece insights valiosos baseados em dados que podem impulsionar o crescimento e a lucratividade do neg\u00f3cio.\n\n\n\n## Resumo \n\n\n# Checkpoint de Desenvolvimento do Sistema de Gest\u00e3o de Restaurantes SaaS\n\n\n\n### Componentes Implementados:\n\n1. **Banco de Dados MySQL (100%)**\n   - Esquema completo com todas as tabelas necess\u00e1rias\n   - Rela\u00e7\u00f5es e chaves estrangeiras\n   - \u00cdndices para otimiza\u00e7\u00e3o\n   - Estrutura para dados JSON\n   - Suporte completo para multi-tenant\n   -- Cria\u00e7\u00e3o do banco de dados\nCREATE DATABASE restaurante_saas CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nUSE restaurante_saas;\n\n-- -----------------------------------------------------\n-- Tabelas do Sistema SaaS (Plataforma)\n-- -----------------------------------------------------\n\n-- Tabela de tenants (restaurantes)\nCREATE TABLE tenants (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    slug VARCHAR(100) NOT NULL UNIQUE,\n    restaurant_type VARCHAR(20) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    city VARCHAR(100) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL,\n    logo VARCHAR(255) DEFAULT NULL,\n    theme_color VARCHAR(7) DEFAULT '#3498db',\n    domain VARCHAR(100) DEFAULT NULL,\n    \n    -- Campos para configura\u00e7\u00e3o de pagamentos\n    payment_gateway ENUM('stripe', 'mercadopago', 'cielo', 'pagseguro', 'rede') DEFAULT 'stripe',\n    payment_gateway_key VARCHAR(255) DEFAULT NULL,\n    payment_gateway_token VARCHAR(255) DEFAULT NULL,\n    bank_name VARCHAR(100) DEFAULT NULL,\n    bank_agency VARCHAR(20) DEFAULT NULL,\n    bank_account VARCHAR(30) DEFAULT NULL,\n    pix_key VARCHAR(255) DEFAULT NULL,\n    payment_methods JSON DEFAULT '{\"cash\":true,\"credit\":true,\"debit\":true,\"pix\":true,\"meal_voucher\":true,\"app_payment\":true,\"bill_split\":true}',\n    payment_settings JSON DEFAULT '{\"service_fee\":10,\"allow_tip\":true,\"tip_suggestions\":[5,10,15],\"payment_timeout\":30,\"max_discount\":15}',\n    \n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de planos de assinatura\nCREATE TABLE plans (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    code VARCHAR(20) NOT NULL UNIQUE,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    billing_cycle ENUM('monthly', 'quarterly', 'semiannual', 'annual') DEFAULT 'monthly',\n    features JSON NOT NULL,\n    limits JSON NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    stripe_product_id VARCHAR(100) DEFAULT NULL,\n    stripe_price_id VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de assinaturas\nCREATE TABLE subscriptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    plan_id INT UNSIGNED NOT NULL,\n    stripe_subscription_id VARCHAR(100) DEFAULT NULL,\n    stripe_customer_id VARCHAR(100) DEFAULT NULL,\n    status ENUM('trial', 'active', 'past_due', 'canceled', 'suspended') NOT NULL DEFAULT 'trial',\n    trial_ends_at TIMESTAMP NULL DEFAULT NULL,\n    ends_at TIMESTAMP NULL DEFAULT NULL,\n    next_billing_at TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (plan_id) REFERENCES plans(id)\n) ENGINE=InnoDB;\n\n-- Tabela de faturas\nCREATE TABLE invoices (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    subscription_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED NOT NULL,\n    stripe_invoice_id VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('draft', 'open', 'paid', 'uncollectible', 'void') NOT NULL DEFAULT 'draft',\n    due_date TIMESTAMP NULL DEFAULT NULL,\n    paid_at TIMESTAMP NULL DEFAULT NULL,\n    pdf_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de controle de uso de recursos\nCREATE TABLE resource_usage (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    resource_type VARCHAR(50) NOT NULL,\n    resource_count INT NOT NULL DEFAULT 1,\n    year INT NOT NULL,\n    month INT NOT NULL,\n    day INT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_resource_usage_per_day (tenant_id, resource_type, year, month, day),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Usu\u00e1rios e Acesso\n-- -----------------------------------------------------\n\n-- Tabela de usu\u00e1rios\nCREATE TABLE users (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NULL DEFAULT NULL,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer', 'platform_admin') NOT NULL,\n    phone VARCHAR(20) DEFAULT NULL,\n    profile_image VARCHAR(255) DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    email_verified BOOLEAN DEFAULT FALSE,\n    last_login TIMESTAMP NULL DEFAULT NULL,\n    password_reset_token VARCHAR(100) DEFAULT NULL,\n    password_reset_expires TIMESTAMP NULL DEFAULT NULL,\n    remember_token VARCHAR(100) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_user_email (email),\n    UNIQUE KEY unique_user_username (username),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es\nCREATE TABLE permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\n-- Tabela de permiss\u00f5es por papel\nCREATE TABLE role_permissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    role ENUM('admin', 'manager', 'cashier', 'waiter', 'cook', 'delivery', 'customer') NOT NULL,\n    permission_id INT UNSIGNED NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_role_permission (tenant_id, role, permission_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id)\n) ENGINE=InnoDB;\n\n-- Tabela de log de acesso\nCREATE TABLE access_logs (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    user_id INT UNSIGNED NOT NULL,\n    tenant_id INT UNSIGNED DEFAULT NULL,\n    ip_address VARCHAR(45) NOT NULL,\n    user_agent VARCHAR(255) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    details JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00e3o do Restaurante\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es do restaurante\nCREATE TABLE restaurant_configurations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    opening_hours JSON DEFAULT NULL,\n    operating_days JSON DEFAULT NULL,\n    delivery_radius INT DEFAULT 5,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    min_delivery_value DECIMAL(10, 2) DEFAULT 0.00,\n    allow_pickup BOOLEAN DEFAULT TRUE,\n    allow_delivery BOOLEAN DEFAULT TRUE,\n    allow_reservations BOOLEAN DEFAULT TRUE,\n    allow_qrcode_orders BOOLEAN DEFAULT TRUE,\n    allow_group_orders BOOLEAN DEFAULT TRUE,\n    default_order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    estimated_preparation_time INT DEFAULT 30,\n    default_table_capacity INT DEFAULT 4,\n    use_kitchen_display BOOLEAN DEFAULT TRUE,\n    taxes_included BOOLEAN DEFAULT TRUE,\n    tax_rate DECIMAL(5, 2) DEFAULT 0.00,\n    service_fee DECIMAL(5, 2) DEFAULT 0.00,\n    tip_options JSON DEFAULT NULL,\n    notification_settings JSON DEFAULT NULL,\n    printer_settings JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de \u00e1reas do restaurante\nCREATE TABLE restaurant_areas (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de caixas/terminais\nCREATE TABLE cash_registers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description VARCHAR(255) DEFAULT NULL,\n    location VARCHAR(100) DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de aberturas e fechamentos de caixa\nCREATE TABLE cash_register_operations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    operation_type ENUM('opening', 'closing') NOT NULL,\n    initial_amount DECIMAL(10, 2) DEFAULT 0.00,\n    final_amount DECIMAL(10, 2) DEFAULT 0.00,\n    system_calculated_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_amount DECIMAL(10, 2) DEFAULT 0.00,\n    discrepancy_notes TEXT DEFAULT NULL,\n    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    closing_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de reservas\nCREATE TABLE reservations (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    customer_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) NOT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) NOT NULL,\n    number_of_people INT NOT NULL,\n    reservation_date DATE NOT NULL,\n    reservation_time TIME NOT NULL,\n    arrival_time TIMESTAMP NULL DEFAULT NULL,\n    departure_time TIMESTAMP NULL DEFAULT NULL,\n    status ENUM('pending', 'confirmed', 'seated', 'completed', 'canceled', 'no_show') DEFAULT 'pending',\n    special_requests TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Mesas e QR Code\n-- -----------------------------------------------------\n\n-- Tabela de mesas\nCREATE TABLE tables (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    area_id INT UNSIGNED DEFAULT NULL,\n    number VARCHAR(10) NOT NULL,\n    name VARCHAR(50) DEFAULT NULL,\n    capacity INT UNSIGNED DEFAULT 4,\n    position_x INT DEFAULT 0,\n    position_y INT DEFAULT 0,\n    status ENUM('available', 'occupied', 'reserved', 'cleaning', 'inactive') DEFAULT 'available',\n    qr_code VARCHAR(255) DEFAULT NULL,\n    qr_code_hash VARCHAR(64) DEFAULT NULL,\n    occupied_since TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_table_number_per_tenant (tenant_id, number),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (area_id) REFERENCES restaurant_areas(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de QR Codes\nCREATE TABLE qr_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    code VARCHAR(100) NOT NULL,\n    hash VARCHAR(64) NOT NULL,\n    type ENUM('table', 'menu', 'payment', 'custom') NOT NULL DEFAULT 'table',\n    data JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    scan_count INT UNSIGNED DEFAULT 0,\n    last_scanned TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de ocupa\u00e7\u00e3o de mesas\nCREATE TABLE table_occupancy_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED NOT NULL,\n    start_time TIMESTAMP NOT NULL,\n    end_time TIMESTAMP NULL DEFAULT NULL,\n    number_of_customers INT UNSIGNED DEFAULT 1,\n    order_id INT UNSIGNED DEFAULT NULL,\n    total_spent DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Card\u00e1pio e Itens\n-- -----------------------------------------------------\n\n-- Tabela de categorias de menu\nCREATE TABLE menu_categories (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    image VARCHAR(255) DEFAULT NULL,\n    sort_order INT DEFAULT 0,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_category_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens do menu\nCREATE TABLE menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    category_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    cost DECIMAL(10, 2) DEFAULT 0.00,\n    image VARCHAR(255) DEFAULT NULL,\n    preparation_time INT DEFAULT 15,\n    ingredients TEXT DEFAULT NULL,\n    allergens TEXT DEFAULT NULL,\n    nutritional_info JSON DEFAULT NULL,\n    available BOOLEAN DEFAULT TRUE,\n    featured BOOLEAN DEFAULT FALSE,\n    sort_order INT DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    restaurant_type_specific BOOLEAN DEFAULT FALSE,\n    restaurant_type_config JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES menu_categories(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de op\u00e7\u00f5es e adicionais para itens do menu\nCREATE TABLE menu_item_options (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_selections INT DEFAULT 0,\n    max_selections INT DEFAULT 1,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de valores para op\u00e7\u00f5es de itens do menu\nCREATE TABLE menu_item_option_values (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    option_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    price_adjustment DECIMAL(10, 2) DEFAULT 0.00,\n    available BOOLEAN DEFAULT TRUE,\n    sort_order INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (option_id) REFERENCES menu_item_options(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de card\u00e1pios especiais/promo\u00e7\u00f5es\nCREATE TABLE special_menus (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    start_date DATE DEFAULT NULL,\n    end_date DATE DEFAULT NULL,\n    start_time TIME DEFAULT NULL,\n    end_time TIME DEFAULT NULL,\n    days_of_week JSON DEFAULT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de itens em card\u00e1pios especiais\nCREATE TABLE special_menu_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    special_menu_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    special_price DECIMAL(10, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (special_menu_id) REFERENCES special_menus(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pedidos\n-- -----------------------------------------------------\n\n-- Tabela de pedidos\nCREATE TABLE orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    table_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    staff_id INT UNSIGNED DEFAULT NULL,\n    customer_name VARCHAR(100) DEFAULT NULL,\n    customer_phone VARCHAR(20) DEFAULT NULL,\n    customer_email VARCHAR(100) DEFAULT NULL,\n    order_number VARCHAR(20) NOT NULL,\n    order_type ENUM('restaurant', 'pickup', 'delivery') DEFAULT 'restaurant',\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'new',\n    subtotal DECIMAL(10, 2) NOT NULL,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    delivery_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    scheduled_for TIMESTAMP NULL DEFAULT NULL,\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP NULL DEFAULT NULL,\n    cancelled_at TIMESTAMP NULL DEFAULT NULL,\n    cancellation_reason TEXT DEFAULT NULL,\n    is_group_order BOOLEAN DEFAULT FALSE,\n    group_order_code VARCHAR(20) DEFAULT NULL,\n    payment_status ENUM('pending', 'paid', 'partially_paid', 'refunded', 'failed') DEFAULT 'pending',\n    source ENUM('in_person', 'qrcode', 'website', 'app', 'ifood', 'phone') DEFAULT 'in_person',\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n    FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de itens do pedido\nCREATE TABLE order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    options JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',\n    preparation_started_at TIMESTAMP NULL DEFAULT NULL,\n    preparation_completed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de status do pedido\nCREATE TABLE order_status_history (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    status ENUM('new', 'pending', 'preparing', 'ready', 'delivered', 'cancelled') NOT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de entregas\nCREATE TABLE deliveries (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    delivery_address VARCHAR(255) NOT NULL,\n    delivery_city VARCHAR(100) NOT NULL,\n    delivery_state VARCHAR(2) NOT NULL,\n    delivery_zip_code VARCHAR(10) NOT NULL,\n    delivery_instructions TEXT DEFAULT NULL,\n    delivery_person_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'assigned', 'in_transit', 'delivered', 'failed') DEFAULT 'pending',\n    estimated_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    actual_delivery_time TIMESTAMP NULL DEFAULT NULL,\n    tracking_code VARCHAR(50) DEFAULT NULL,\n    tracking_url VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (delivery_person_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Pagamentos\n-- -----------------------------------------------------\n\n-- Tabela de pagamentos\nCREATE TABLE payments (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') NOT NULL,\n    service_fee DECIMAL(10, 2) DEFAULT 0.00,\n    tip DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    installments TINYINT DEFAULT 1,\n    card_brand VARCHAR(50) DEFAULT NULL,\n    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',\n    transaction_id VARCHAR(100) DEFAULT NULL,\n    payment_data JSON DEFAULT NULL,\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de divis\u00e3o de contas\nCREATE TABLE bill_splits (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    split_type ENUM('equal', 'custom', 'percentage', 'item') NOT NULL DEFAULT 'equal',\n    payment_status ENUM('pending', 'paid') DEFAULT 'pending',\n    items JSON DEFAULT NULL,\n    payment_link VARCHAR(255) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de hist\u00f3rico de transa\u00e7\u00f5es no caixa\nCREATE TABLE cash_register_transactions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    cash_register_id INT UNSIGNED NOT NULL,\n    cash_register_operation_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    transaction_type ENUM('sale', 'refund', 'expense', 'deposit', 'withdrawal') NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_method ENUM('cash', 'credit', 'debit', 'pix', 'meal_ticket', 'transfer', 'app') DEFAULT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type ENUM('order', 'invoice', 'expense', 'other') DEFAULT NULL,\n    description TEXT DEFAULT NULL,\n    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (cash_register_id) REFERENCES cash_registers(id),\n    FOREIGN KEY (cash_register_operation_id) REFERENCES cash_register_operations(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de cupons e descontos\nCREATE TABLE coupons (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    code VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    discount_type ENUM('percentage', 'fixed', 'free_item') NOT NULL,\n    discount_value DECIMAL(10, 2) NOT NULL,\n    free_item_id INT UNSIGNED DEFAULT NULL,\n    min_order_value DECIMAL(10, 2) DEFAULT 0.00,\n    max_discount DECIMAL(10, 2) DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    max_uses INT UNSIGNED DEFAULT NULL,\n    uses_count INT UNSIGNED DEFAULT 0,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_coupon_code_per_tenant (tenant_id, code),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (free_item_id) REFERENCES menu_items(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Estoque e Ingredientes\n-- -----------------------------------------------------\n\n-- Tabela de ingredientes\nCREATE TABLE ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    cost_per_unit DECIMAL(10, 4) NOT NULL,\n    inventory_alert_threshold DECIMAL(10, 2) DEFAULT 0,\n    sku VARCHAR(20) DEFAULT NULL,\n    barcode VARCHAR(50) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_name_per_tenant (tenant_id, name),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de ingredientes por item do menu\nCREATE TABLE menu_item_ingredients (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_item_ingredient (menu_item_id, ingredient_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de estoque\nCREATE TABLE inventory (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL DEFAULT 0,\n    location VARCHAR(50) DEFAULT 'main',\n    last_count_date TIMESTAMP NULL DEFAULT NULL,\n    last_count_by INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ingredient_location (tenant_id, ingredient_id, location),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (last_count_by) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de movimenta\u00e7\u00f5es de estoque\nCREATE TABLE inventory_movements (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    movement_type ENUM('purchase', 'order_usage', 'adjustment', 'transfer', 'waste', 'return') NOT NULL,\n    unit_cost DECIMAL(10, 4) DEFAULT NULL,\n    location VARCHAR(50) DEFAULT 'main',\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de contagem de estoque (invent\u00e1rio)\nCREATE TABLE inventory_counts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    count_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    user_id INT UNSIGNED NOT NULL,\n    status ENUM('in_progress', 'completed', 'cancelled') DEFAULT 'in_progress',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de detalhes da contagem de estoque\nCREATE TABLE inventory_count_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    inventory_count_id INT UNSIGNED NOT NULL,\n    ingredient_id INT UNSIGNED NOT NULL,\n    expected_quantity DECIMAL(10, 2) NOT NULL,\n    actual_quantity DECIMAL(10, 2) NOT NULL,\n    discrepancy DECIMAL(10, 2) NOT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (inventory_count_id) REFERENCES inventory_counts(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Funcion\u00e1rios\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de funcion\u00e1rios\nCREATE TABLE staff_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    department VARCHAR(100) DEFAULT NULL,\n    hire_date DATE DEFAULT NULL,\n    salary DECIMAL(10, 2) DEFAULT NULL,\n    hourly_rate DECIMAL(10, 2) DEFAULT NULL,\n    commission_rate DECIMAL(5, 2) DEFAULT NULL,\n    working_hours JSON DEFAULT NULL,\n    employee_id VARCHAR(50) DEFAULT NULL,\n    emergency_contact_name VARCHAR(100) DEFAULT NULL,\n    emergency_contact_phone VARCHAR(20) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_staff_employee_id (tenant_id, employee_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de registro de ponto\nCREATE TABLE time_clock (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP NULL DEFAULT NULL,\n    break_start TIMESTAMP NULL DEFAULT NULL,\n    break_end TIMESTAMP NULL DEFAULT NULL,\n    total_hours DECIMAL(5, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de comiss\u00f5es de vendas\nCREATE TABLE sales_commissions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    commission_amount DECIMAL(10, 2) NOT NULL,\n    commission_rate DECIMAL(5, 2) NOT NULL,\n    status ENUM('pending', 'approved', 'paid', 'rejected') DEFAULT 'pending',\n    payment_date TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de escalas de trabalho\nCREATE TABLE staff_schedules (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    schedule_date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    end_time TIME NOT NULL,\n    position VARCHAR(100) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Clientes\n-- -----------------------------------------------------\n\n-- Tabela de detalhes de clientes\nCREATE TABLE customer_details (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    birth_date DATE DEFAULT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    allergy_info TEXT DEFAULT NULL,\n    favorite_items JSON DEFAULT NULL,\n    marketing_preferences JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de programa de fidelidade\nCREATE TABLE loyalty_program (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_per_currency DECIMAL(10, 2) DEFAULT 1.00,\n    points_validity_days INT UNSIGNED DEFAULT 365,\n    min_points_to_redeem INT UNSIGNED DEFAULT 100,\n    currency_per_point DECIMAL(10, 4) DEFAULT 0.01,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de n\u00edveis de fidelidade\nCREATE TABLE loyalty_tiers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    description TEXT DEFAULT NULL,\n    min_points INT UNSIGNED NOT NULL,\n    multiplier DECIMAL(5, 2) DEFAULT 1.00,\n    benefits JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pontos de fidelidade\nCREATE TABLE loyalty_points (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    points INT NOT NULL,\n    source ENUM('purchase', 'reward', 'bonus', 'adjustment', 'redemption') NOT NULL,\n    reference_id INT UNSIGNED DEFAULT NULL,\n    reference_type VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    is_expired BOOLEAN DEFAULT FALSE,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de recompensas do programa de fidelidade\nCREATE TABLE loyalty_rewards (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    loyalty_program_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    points_required INT UNSIGNED NOT NULL,\n    reward_type ENUM('discount', 'free_item', 'gift', 'coupon') NOT NULL,\n    reward_value JSON NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_program(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de resgates de recompensas\nCREATE TABLE loyalty_redemptions (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    loyalty_reward_id INT UNSIGNED NOT NULL,\n    points_used INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    status ENUM('pending', 'approved', 'used', 'expired', 'cancelled') DEFAULT 'pending',\n    redemption_code VARCHAR(50) DEFAULT NULL,\n    expiry_date DATE DEFAULT NULL,\n    used_at TIMESTAMP NULL DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (loyalty_reward_id) REFERENCES loyalty_rewards(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Fornecedores\n-- -----------------------------------------------------\n\n-- Tabela de fornecedores\nCREATE TABLE suppliers (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    company_name VARCHAR(150) NOT NULL,\n    cnpj VARCHAR(18) DEFAULT NULL,\n    email VARCHAR(100) DEFAULT NULL,\n    phone VARCHAR(20) NOT NULL,\n    address VARCHAR(255) DEFAULT NULL,\n    city VARCHAR(100) DEFAULT NULL,\n    state VARCHAR(2) DEFAULT NULL,\n    zip_code VARCHAR(10) DEFAULT NULL,\n    contact_name VARCHAR(100) DEFAULT NULL,\n    contact_phone VARCHAR(20) DEFAULT NULL,\n    contact_email VARCHAR(100) DEFAULT NULL,\n    category VARCHAR(50) DEFAULT NULL,\n    payment_terms VARCHAR(100) DEFAULT NULL,\n    delivery_time INT DEFAULT NULL,\n    minimum_order DECIMAL(10, 2) DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de produtos de fornecedores\nCREATE TABLE supplier_products (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    sku VARCHAR(50) DEFAULT NULL,\n    supplier_sku VARCHAR(50) DEFAULT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    unit ENUM('g', 'kg', 'ml', 'l', 'unit', 'box', 'pack') NOT NULL,\n    ingredient_id INT UNSIGNED DEFAULT NULL,\n    conversion_factor DECIMAL(10, 4) DEFAULT 1.0000,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos a fornecedores\nCREATE TABLE supplier_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    order_number VARCHAR(50) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expected_delivery_date DATE DEFAULT NULL,\n    delivery_date DATE DEFAULT NULL,\n    status ENUM('draft', 'sent', 'confirmed', 'partially_received', 'received', 'cancelled') DEFAULT 'draft',\n    subtotal DECIMAL(10, 2) NOT NULL DEFAULT 0.00,\n    tax DECIMAL(10, 2) DEFAULT 0.00,\n    shipping DECIMAL(10, 2) DEFAULT 0.00,\n    discount DECIMAL(10, 2) DEFAULT 0.00,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    payment_status ENUM('pending', 'partial', 'paid', 'cancelled') DEFAULT 'pending',\n    payment_method VARCHAR(50) DEFAULT NULL,\n    payment_details JSON DEFAULT NULL,\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de itens de pedidos a fornecedores\nCREATE TABLE supplier_order_items (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED NOT NULL,\n    supplier_product_id INT UNSIGNED NOT NULL,\n    quantity DECIMAL(10, 2) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    quantity_received DECIMAL(10, 2) DEFAULT 0.00,\n    status ENUM('pending', 'partial', 'complete', 'cancelled') DEFAULT 'pending',\n    notes TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_product_id) REFERENCES supplier_products(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de avalia\u00e7\u00e3o de fornecedores\nCREATE TABLE supplier_ratings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    supplier_id INT UNSIGNED NOT NULL,\n    supplier_order_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    quality_rating TINYINT UNSIGNED DEFAULT NULL,\n    service_rating TINYINT UNSIGNED DEFAULT NULL,\n    price_rating TINYINT UNSIGNED DEFAULT NULL,\n    delivery_rating TINYINT UNSIGNED DEFAULT NULL,\n    overall_rating TINYINT UNSIGNED NOT NULL,\n    comments TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,\n    FOREIGN KEY (supplier_order_id) REFERENCES supplier_orders(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Relat\u00f3rios e M\u00e9tricas\n-- -----------------------------------------------------\n\n-- Tabela de relat\u00f3rios salvos\nCREATE TABLE saved_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    report_type VARCHAR(50) NOT NULL,\n    parameters JSON NOT NULL,\n    public BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de relat\u00f3rios agendados\nCREATE TABLE scheduled_reports (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    saved_report_id INT UNSIGNED NOT NULL,\n    user_id INT UNSIGNED NOT NULL,\n    frequency ENUM('daily', 'weekly', 'monthly', 'quarterly') NOT NULL,\n    day_of_week TINYINT UNSIGNED DEFAULT NULL,\n    day_of_month TINYINT UNSIGNED DEFAULT NULL,\n    time_of_day TIME NOT NULL,\n    recipients JSON NOT NULL,\n    last_sent TIMESTAMP NULL DEFAULT NULL,\n    next_scheduled TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (saved_report_id) REFERENCES saved_reports(id) ON DELETE CASCADE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB;\n\n-- Tabela de m\u00e9tricas di\u00e1rias\nCREATE TABLE daily_metrics (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    metric_date DATE NOT NULL,\n    sales DECIMAL(10, 2) DEFAULT 0.00,\n    orders INT UNSIGNED DEFAULT 0,\n    customers INT UNSIGNED DEFAULT 0,\n    average_ticket DECIMAL(10, 2) DEFAULT 0.00,\n    tables_served INT UNSIGNED DEFAULT 0,\n    average_table_time INT UNSIGNED DEFAULT 0,\n    staff_count INT UNSIGNED DEFAULT 0,\n    labor_cost DECIMAL(10, 2) DEFAULT 0.00,\n    cogs DECIMAL(10, 2) DEFAULT 0.00,\n    profit_margin DECIMAL(5, 2) DEFAULT 0.00,\n    item_metrics JSON DEFAULT NULL,\n    payment_methods JSON DEFAULT NULL,\n    source_metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_tenant_date (tenant_id, metric_date),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Integra\u00e7\u00f5es Externas\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es de integra\u00e7\u00e3o com iFood\nCREATE TABLE ifood_integration (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    merchant_id VARCHAR(100) NOT NULL,\n    api_key VARCHAR(255) NOT NULL,\n    merchant_token VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT FALSE,\n    auto_accept_orders BOOLEAN DEFAULT FALSE,\n    default_preparation_time INT UNSIGNED DEFAULT 30,\n    sync_menu BOOLEAN DEFAULT TRUE,\n    sync_status BOOLEAN DEFAULT TRUE,\n    menu_last_sync TIMESTAMP NULL DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de pedidos do iFood\nCREATE TABLE ifood_orders (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED DEFAULT NULL,\n    ifood_order_id VARCHAR(100) NOT NULL,\n    ifood_status VARCHAR(50) NOT NULL,\n    status_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    order_json JSON NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_ifood_order (tenant_id, ifood_order_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de mapeamento de itens do card\u00e1pio com iFood\nCREATE TABLE ifood_menu_mapping (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ifood_item_id VARCHAR(100) NOT NULL,\n    ifood_category_id VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    UNIQUE KEY unique_menu_mapping (tenant_id, menu_item_id),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de webhooks recebidos\nCREATE TABLE webhooks (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    source VARCHAR(50) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    webhook_id VARCHAR(100) NOT NULL,\n    payload JSON NOT NULL,\n    processed BOOLEAN DEFAULT FALSE,\n    error_message TEXT DEFAULT NULL,\n    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP NULL DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Marketing e Comunica\u00e7\u00e3o\n-- -----------------------------------------------------\n\n-- Tabela de campanhas de marketing\nCREATE TABLE marketing_campaigns (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT DEFAULT NULL,\n    campaign_type ENUM('email', 'sms', 'push', 'in_app', 'multi_channel') NOT NULL,\n    target_audience JSON DEFAULT NULL,\n    start_date TIMESTAMP NULL DEFAULT NULL,\n    end_date TIMESTAMP NULL DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    content JSON NOT NULL,\n    metrics JSON DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de mensagens enviadas\nCREATE TABLE sent_messages (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    campaign_id INT UNSIGNED DEFAULT NULL,\n    user_id INT UNSIGNED DEFAULT NULL,\n    message_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    recipient VARCHAR(100) NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('sent', 'delivered', 'opened', 'clicked', 'bounced', 'failed') DEFAULT 'sent',\n    status_updated_at TIMESTAMP NULL DEFAULT NULL,\n    tracking_data JSON DEFAULT NULL,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (campaign_id) REFERENCES marketing_campaigns(id) ON DELETE SET NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL\n) ENGINE=InnoDB;\n\n-- Tabela de modelos de comunica\u00e7\u00e3o\nCREATE TABLE message_templates (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    template_type ENUM('email', 'sms', 'push', 'in_app') NOT NULL,\n    subject VARCHAR(255) DEFAULT NULL,\n    content TEXT NOT NULL,\n    variables JSON DEFAULT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Tabelas de Configura\u00e7\u00f5es Fiscais\n-- -----------------------------------------------------\n\n-- Tabela de configura\u00e7\u00f5es fiscais\nCREATE TABLE fiscal_settings (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    company_tax_regime VARCHAR(50) DEFAULT NULL,\n    tax_id VARCHAR(50) DEFAULT NULL,\n    state_tax_id VARCHAR(50) DEFAULT NULL,\n    municipal_tax_id VARCHAR(50) DEFAULT NULL,\n    tax_rates JSON DEFAULT NULL,\n    fiscal_printer_model VARCHAR(100) DEFAULT NULL,\n    fiscal_printer_serial VARCHAR(100) DEFAULT NULL,\n    nfce_token VARCHAR(255) DEFAULT NULL,\n    nfce_certificate VARCHAR(255) DEFAULT NULL,\n    nfce_environment ENUM('production', 'sandbox') DEFAULT 'sandbox',\n    nfce_series INT UNSIGNED DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de notas fiscais\nCREATE TABLE fiscal_receipts (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    order_id INT UNSIGNED NOT NULL,\n    receipt_type ENUM('nfce', 'nfe', 'sat', 'nfse') NOT NULL,\n    receipt_number VARCHAR(50) NOT NULL,\n    receipt_series VARCHAR(10) DEFAULT NULL,\n    receipt_key VARCHAR(100) DEFAULT NULL,\n    status ENUM('pending', 'issued', 'cancelled', 'error') DEFAULT 'pending',\n    issue_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_date TIMESTAMP NULL DEFAULT NULL,\n    cancel_reason TEXT DEFAULT NULL,\n    receipt_url VARCHAR(255) DEFAULT NULL,\n    receipt_data JSON DEFAULT NULL,\n    qr_code TEXT DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- Tabela de c\u00f3digo de produtos fiscais\nCREATE TABLE fiscal_item_codes (\n    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    tenant_id INT UNSIGNED NOT NULL,\n    menu_item_id INT UNSIGNED NOT NULL,\n    ncm VARCHAR(20) DEFAULT NULL,\n    cest VARCHAR(20) DEFAULT NULL,\n    cfop VARCHAR(10) DEFAULT NULL,\n    icms_rate DECIMAL(5, 2) DEFAULT NULL,\n    pis_rate DECIMAL(5, 2) DEFAULT NULL,\n    cofins_rate DECIMAL(5, 2) DEFAULT NULL,\n    iss_rate DECIMAL(5, 2) DEFAULT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE,\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE CASCADE\n) ENGINE=InnoDB;\n\n-- -----------------------------------------------------\n-- Dados iniciais\n-- -----------------------------------------------------\n\n-- Inserir planos de assinatura\nINSERT INTO plans (name, code, description, price, billing_cycle, features, limits, active) VALUES\n('Plano B\u00e1sico', 'basic', 'Ideal para pequenos estabelecimentos com funcionalidades essenciais', 99.90, 'monthly', \n '[\"qrcode_basic\", \"basic_reports\"]', \n '{\"max_tables\": 10, \"max_users\": 5, \"max_menu_items\": 50, \"max_monthly_orders\": 500}', \n true),\n('Plano Padr\u00e3o', 'standard', 'Perfeito para restaurantes de m\u00e9dio porte com recursos completos', 199.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\"]', \n '{\"max_tables\": 25, \"max_users\": 15, \"max_menu_items\": 150, \"max_monthly_orders\": 2000}', \n true),\n('Plano Premium', 'premium', 'Solu\u00e7\u00e3o completa para grandes estabelecimentos com funcionalidades avan\u00e7adas', 349.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\"]', \n '{\"max_tables\": 50, \"max_users\": 30, \"max_menu_items\": 300, \"max_monthly_orders\": 5000}', \n true),\n('Plano Enterprise', 'enterprise', 'Solu\u00e7\u00e3o personalizada para redes de restaurantes e franquias', 599.90, 'monthly', \n '[\"qrcode_advanced\", \"full_reports\", \"inventory_management\", \"multi_branch\", \"loyalty_program\", \"api_access\", \"custom_integrations\"]', \n '{\"max_tables\": -1, \"max_users\": -1, \"max_menu_items\": -1, \"max_monthly_orders\": -1}', \n true);\n\n-- Inserir usu\u00e1rio admin para testes (senha: admin123)\nINSERT INTO users (username, email, password, name, role, active, email_verified) VALUES\n('admin', 'admin@restaurantesaas.com.br', '$2y$12$WxkpKAQQ1RBoOaNUvDH4R.UJYPzMvEVDkn5P3nCWfxmYUQQeMLOsW', 'Administrador', 'platform_admin', true, true);\n\n-- Inserir permiss\u00f5es b\u00e1sicas\nINSERT INTO permissions (name, description) VALUES\n('view_dashboard', 'Visualizar dashboard'),\n('manage_menu', 'Gerenciar card\u00e1pio'),\n('manage_orders', 'Gerenciar pedidos'),\n('manage_tables', 'Gerenciar mesas'),\n('manage_inventory', 'Gerenciar estoque'),\n('manage_staff', 'Gerenciar funcion\u00e1rios'),\n('manage_customers', 'Gerenciar clientes'),\n('manage_payments', 'Gerenciar pagamentos'),\n('view_reports', 'Visualizar relat\u00f3rios'),\n('manage_settings', 'Gerenciar configura\u00e7\u00f5es'),\n('manage_integrations', 'Gerenciar integra\u00e7\u00f5es'),\n('admin_access', 'Acesso administrativo completo');\n\n2. **Estrutura de Diret\u00f3rios (100%)**\n\n#!/bin/bash\n\n# Criar diret\u00f3rio raiz\nmkdir -p restaurante-sistema\n\n# Criar estrutura de assets\nmkdir -p restaurante-sistema/assets/css/restaurant-types\nmkdir -p restaurante-sistema/assets/js/restaurant-types\nmkdir -p restaurante-sistema/assets/images/logo\nmkdir -p restaurante-sistema/assets/images/icons/{menu,status,actions,payment,subscription}\nmkdir -p restaurante-sistema/assets/images/menu\nmkdir -p restaurante-sistema/assets/images/ui\nmkdir -p restaurante-sistema/assets/images/plans\nmkdir -p restaurante-sistema/assets/images/restaurant-types/{alacarte,fastfood,pizzaria}\nmkdir -p restaurante-sistema/assets/fonts\n\n# Criar arquivos CSS\ntouch restaurante-sistema/assets/css/main.css\ntouch restaurante-sistema/assets/css/login.css\ntouch restaurante-sistema/assets/css/dashboard.css\ntouch restaurante-sistema/assets/css/tables.css\ntouch restaurante-sistema/assets/css/menu.css\ntouch restaurante-sistema/assets/css/kitchen.css\ntouch restaurante-sistema/assets/css/reports.css\ntouch restaurante-sistema/assets/css/ponto.css\ntouch restaurante-sistema/assets/css/fornecedores.css\ntouch restaurante-sistema/assets/css/customer-mobile.css\ntouch restaurante-sistema/assets/css/subscription.css\ntouch restaurante-sistema/assets/css/pricing.css\ntouch restaurante-sistema/assets/css/billing.css\ntouch restaurante-sistema/assets/css/onboarding.css\n\n# Criar arquivos CSS espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/css/restaurant-types/alacarte.css\ntouch restaurante-sistema/assets/css/restaurant-types/fastfood.css\ntouch restaurante-sistema/assets/css/restaurant-types/pizzaria.css\ntouch restaurante-sistema/assets/css/restaurant-types/rodizio.css\ntouch restaurante-sistema/assets/css/restaurant-types/selfservice.css\ntouch restaurante-sistema/assets/css/restaurant-types/delivery.css\ntouch restaurante-sistema/assets/css/restaurant-types/foodtruck.css\ntouch restaurante-sistema/assets/css/restaurant-types/bar.css\ntouch restaurante-sistema/assets/css/restaurant-types/cafeteria.css\ntouch restaurante-sistema/assets/css/restaurant-types/multiunit.css\n\n# Criar arquivos JavaScript\ntouch restaurante-sistema/assets/js/main.js\ntouch restaurante-sistema/assets/js/login.js\ntouch restaurante-sistema/assets/js/dashboard.js\ntouch restaurante-sistema/assets/js/tables.js\ntouch restaurante-sistema/assets/js/orders.js\ntouch restaurante-sistema/assets/js/menu.js\ntouch restaurante-sistema/assets/js/kitchen.js\ntouch restaurante-sistema/assets/js/inventory.js\ntouch restaurante-sistema/assets/js/payments.js\ntouch restaurante-sistema/assets/js/stripe-integration.js\ntouch restaurante-sistema/assets/js/subscription.js\ntouch restaurante-sistema/assets/js/pricing-calculator.js\ntouch restaurante-sistema/assets/js/billing-portal.js\ntouch restaurante-sistema/assets/js/charts.js\ntouch restaurante-sistema/assets/js/ponto.js\ntouch restaurante-sistema/assets/js/supplier-manager.js\ntouch restaurante-sistema/assets/js/group-orders.js\ntouch restaurante-sistema/assets/js/bill-splitter.js\ntouch restaurante-sistema/assets/js/onboarding.js\n\n# Criar arquivos JavaScript espec\u00edficos para tipos de restaurante\ntouch restaurante-sistema/assets/js/restaurant-types/alacarte.js\ntouch restaurante-sistema/assets/js/restaurant-types/fastfood.js\ntouch restaurante-sistema/assets/js/restaurant-types/pizzaria.js\ntouch restaurante-sistema/assets/js/restaurant-types/rodizio.js\ntouch restaurante-sistema/assets/js/restaurant-types/selfservice.js\ntouch restaurante-sistema/assets/js/restaurant-types/delivery.js\ntouch restaurante-sistema/assets/js/restaurant-types/multiunit.js\n\n# Criar estrutura de config\nmkdir -p restaurante-sistema/config\ntouch restaurante-sistema/config/database.php\ntouch restaurante-sistema/config/constants.php\ntouch restaurante-sistema/config/stripe.php\ntouch restaurante-sistema/config/email.php\ntouch restaurante-sistema/config/sms.php\ntouch restaurante-sistema/config/qrcode.php\ntouch restaurante-sistema/config/ifood.php\ntouch restaurante-sistema/config/restaurant_types.php\ntouch restaurante-sistema/config/interface_settings.php\ntouch restaurante-sistema/config/order_methods.php\ntouch restaurante-sistema/config/subscription_plans.php\ntouch restaurante-sistema/config/tenant.php\ntouch restaurante-sistema/config/feature_limits.php\n\n# Criar estrutura de controllers\nmkdir -p restaurante-sistema/controllers/subscription\nmkdir -p restaurante-sistema/controllers/DashboardController/{AlacarteDashboardController.php,FastFoodDashboardController.php,PizzariaDashboardController.php,RodizioDashboardController.php,DeliveryDashboardController.php}\nmkdir -p restaurante-sistema/controllers/OrderController\nmkdir -p restaurante-sistema/controllers/MenuController\nmkdir -p restaurante-sistema/controllers/PaymentController\nmkdir -p restaurante-sistema/controllers/SupplierController\nmkdir -p restaurante-sistema/controllers/StaffController\n\ntouch restaurante-sistema/controllers/AuthController.php\ntouch restaurante-sistema/controllers/SubscriptionController.php\ntouch restaurante-sistema/controllers/subscription/PlansController.php\ntouch restaurante-sistema/controllers/subscription/BillingController.php\ntouch restaurante-sistema/controllers/subscription/FeatureController.php\ntouch restaurante-sistema/controllers/TenantController.php\ntouch restaurante-sistema/controllers/OnboardingController.php\ntouch restaurante-sistema/controllers/DashboardController.php\ntouch restaurante-sistema/controllers/TableController.php\ntouch restaurante-sistema/controllers/OrderController.php\ntouch restaurante-sistema/controllers/OrderController/SingleOrderController.php\ntouch restaurante-sistema/controllers/OrderController/GroupOrderController.php\ntouch restaurante-sistema/controllers/MenuController.php\ntouch restaurante-sistema/controllers/MenuController/AlacarteMenuController.php\ntouch restaurante-sistema/controllers/MenuController/FastFoodMenuController.php\ntouch restaurante-sistema/controllers/MenuController/PizzariaMenuController.php\ntouch restaurante-sistema/controllers/MenuController/RodizioMenuController.php\ntouch restaurante-sistema/controllers/MenuController/SelfServiceMenuController.php\ntouch restaurante-sistema/controllers/KitchenController.php\ntouch restaurante-sistema/controllers/InventoryController.php\ntouch restaurante-sistema/controllers/PaymentController.php\ntouch restaurante-sistema/controllers/PaymentController/BillSplitController.php\ntouch restaurante-sistema/controllers/ReportController.php\ntouch restaurante-sistema/controllers/iFoodController.php\ntouch restaurante-sistema/controllers/SupplierController.php\ntouch restaurante-sistema/controllers/SupplierController/QuickOrderController.php\ntouch restaurante-sistema/controllers/StaffController.php\ntouch restaurante-sistema/controllers/StaffController/TimeClockController.php\ntouch restaurante-sistema/controllers/CustomerController.php\ntouch restaurante-sistema/controllers/QRCodeController.php\ntouch restaurante-sistema/controllers/RestaurantTypeController.php\ntouch restaurante-sistema/controllers/SettingsController.php\n\n# Criar estrutura de models\nmkdir -p restaurante-sistema/models/Account\nmkdir -p restaurante-sistema/models/Order\nmkdir -p restaurante-sistema/models/MenuItem\nmkdir -p restaurante-sistema/models/Inventory\nmkdir -p restaurante-sistema/models/Payment\nmkdir -p restaurante-sistema/models/Staff\nmkdir -p restaurante-sistema/models/Supplier\nmkdir -p restaurante-sistema/models/Customer\n\ntouch restaurante-sistema/models/User.php\ntouch restaurante-sistema/models/Account.php\ntouch restaurante-sistema/models/Account/Subscription.php\ntouch restaurante-sistema/models/Account/Plan.php\ntouch restaurante-sistema/models/Account/Invoice.php\ntouch restaurante-sistema/models/Account/Usage.php\ntouch restaurante-sistema/models/Tenant.php\ntouch restaurante-sistema/models/Restaurant.php\ntouch restaurante-sistema/models/RestaurantType.php\ntouch restaurante-sistema/models/CashRegister.php\ntouch restaurante-sistema/models/Table.php\ntouch restaurante-sistema/models/Order.php\ntouch restaurante-sistema/models/Order/SingleOrder.php\ntouch restaurante-sistema/models/Order/GroupOrder.php\ntouch restaurante-sistema/models/OrderItem.php\ntouch restaurante-sistema/models/MenuItem.php\ntouch restaurante-sistema/models/MenuItem/AlacarteMenuItem.php\ntouch restaurante-sistema/models/MenuItem/FastFoodMenuItem.php\ntouch restaurante-sistema/models/MenuItem/PizzaMenuItem.php\ntouch restaurante-sistema/models/MenuItem/RodizioMenuItem.php\ntouch restaurante-sistema/models/Inventory.php\ntouch restaurante-sistema/models/Inventory/StockMovement.php\ntouch restaurante-sistema/models/Reservation.php\ntouch restaurante-sistema/models/Payment.php\ntouch restaurante-sistema/models/Payment/BillSplit.php\ntouch restaurante-sistema/models/Staff.php\ntouch restaurante-sistema/models/Staff/TimeClock.php\ntouch restaurante-sistema/models/Supplier.php\ntouch restaurante-sistema/models/Supplier/SupplierContact.php\ntouch restaurante-sistema/models/Supplier/SupplierOrder.php\ntouch restaurante-sistema/models/Supplier/SupplierRating.php\ntouch restaurante-sistema/models/Customer.php\ntouch restaurante-sistema/models/Customer/LoyaltyProgram.php\ntouch restaurante-sistema/models/MarketingCampaign.php\ntouch restaurante-sistema/models/QRCode.php\ntouch restaurante-sistema/models/RestaurantConfiguration.php\ntouch restaurante-sistema/models/RestaurantInterface.php\n\n# Criar estrutura de views\nmkdir -p restaurante-sistema/views/auth\nmkdir -p restaurante-sistema/views/subscription\nmkdir -p restaurante-sistema/views/onboarding\nmkdir -p restaurante-sistema/views/dashboard/{alacarte,fastfood,pizzaria,rodizio,selfservice,delivery,multiunit}\nmkdir -p restaurante-sistema/views/tables\nmkdir -p restaurante-sistema/views/menu/types\nmkdir -p restaurante-sistema/views/kitchen/types\nmkdir -p restaurante-sistema/views/inventory\nmkdir -p restaurante-sistema/views/payments\nmkdir -p restaurante-sistema/views/reports/types\nmkdir -p restaurante-sistema/views/ifood\nmkdir -p restaurante-sistema/views/suppliers\nmkdir -p restaurante-sistema/views/staff/time-clock\nmkdir -p restaurante-sistema/views/customers\nmkdir -p restaurante-sistema/views/marketing\nmkdir -p restaurante-sistema/views/qrcode\nmkdir -p restaurante-sistema/views/admin\nmkdir -p restaurante-sistema/views/settings\n\n# Criar arquivos de views de autentica\u00e7\u00e3o\ntouch restaurante-sistema/views/auth/login.php\ntouch restaurante-sistema/views/auth/reset-password.php\ntouch restaurante-sistema/views/auth/register.php\n\n# Criar arquivos de views de assinatura\ntouch restaurante-sistema/views/subscription/plans.php\ntouch restaurante-sistema/views/subscription/checkout.php\ntouch restaurante-sistema/views/subscription/success.php\ntouch restaurante-sistema/views/subscription/billing.php\ntouch restaurante-sistema/views/subscription/upgrade.php\ntouch restaurante-sistema/views/subscription/downgrade.php\ntouch restaurante-sistema/views/subscription/cancel.php\ntouch restaurante-sistema/views/subscription/payment-methods.php\n\n# Criar arquivos de views de onboarding\ntouch restaurante-sistema/views/onboarding/welcome.php\ntouch restaurante-sistema/views/onboarding/restaurant-type.php\ntouch restaurante-sistema/views/onboarding/restaurant-comparison.php\ntouch restaurante-sistema/views/onboarding/basic-info.php\ntouch restaurante-sistema/views/onboarding/menu-setup.php\ntouch restaurante-sistema/views/onboarding/operating-hours.php\ntouch restaurante-sistema/views/onboarding/table-setup.php\ntouch restaurante-sistema/views/onboarding/staff-roles.php\ntouch restaurante-sistema/views/onboarding/payment-options.php\ntouch restaurante-sistema/views/onboarding/finalize.php\n\n# Criar arquivos de views de dashboard\ntouch restaurante-sistema/views/dashboard/index.php\ntouch restaurante-sistema/views/dashboard/account-status.php\ntouch restaurante-sistema/views/dashboard/alacarte/index.php\ntouch restaurante-sistema/views/dashboard/alacarte/tables.php\ntouch restaurante-sistema/views/dashboard/fastfood/index.php\ntouch restaurante-sistema/views/dashboard/fastfood/queue.php\ntouch restaurante-sistema/views/dashboard/pizzaria/index.php\ntouch restaurante-sistema/views/dashboard/pizzaria/pizza-builder.php\ntouch restaurante-sistema/views/dashboard/rodizio/index.php\ntouch restaurante-sistema/views/dashboard/rodizio/rounds.php\ntouch restaurante-sistema/views/dashboard/selfservice/index.php\ntouch restaurante-sistema/views/dashboard/selfservice/scales.php\ntouch restaurante-sistema/views/dashboard/delivery/index.php\ntouch restaurante-sistema/views/dashboard/delivery/routes.php\ntouch restaurante-sistema/views/dashboard/multiunit/index.php\ntouch restaurante-sistema/views/dashboard/multiunit/units.php\n\n# Criar mais arquivos de views (continua\u00e7\u00e3o)\ntouch restaurante-sistema/views/tables/map.php\ntouch restaurante-sistema/views/tables/order.php\ntouch restaurante-sistema/views/tables/multi-user.php\n\ntouch restaurante-sistema/views/menu/admin.php\ntouch restaurante-sistema/views/menu/editor.php\ntouch restaurante-sistema/views/menu/customer.php\ntouch restaurante-sistema/views/menu/category-manager.php\ntouch restaurante-sistema/views/menu/promotions.php\ntouch restaurante-sistema/views/menu/types/alacarte.php\ntouch restaurante-sistema/views/menu/types/fastfood.php\ntouch restaurante-sistema/views/menu/types/pizzaria.php\ntouch restaurante-sistema/views/menu/types/rodizio.php\ntouch restaurante-sistema/views/menu/types/selfservice.php\n\ntouch restaurante-sistema/views/kitchen/panel.php\ntouch restaurante-sistema/views/kitchen/inventory-usage.php\ntouch restaurante-sistema/views/kitchen/types/alacarte.php\ntouch restaurante-sistema/views/kitchen/types/fastfood.php\ntouch restaurante-sistema/views/kitchen/types/pizzaria.php\ntouch restaurante-sistema/views/kitchen/types/rodizio.php\n\ntouch restaurante-sistema/views/inventory/management.php\ntouch restaurante-sistema/views/inventory/movements.php\ntouch restaurante-sistema/views/inventory/alerts.php\n\ntouch restaurante-sistema/views/payments/process.php\ntouch restaurante-sistema/views/payments/receipt.php\ntouch restaurante-sistema/views/payments/split-bill.php\ntouch restaurante-sistema/views/payments/group-payment.php\n\ntouch restaurante-sistema/views/reports/sales.php\ntouch restaurante-sistema/views/reports/cash.php\ntouch restaurante-sistema/views/reports/performance.php\ntouch restaurante-sistema/views/reports/financial.php\ntouch restaurante-sistema/views/reports/types/alacarte.php\ntouch restaurante-sistema/views/reports/types/fastfood.php\ntouch restaurante-sistema/views/reports/types/pizzaria.php\ntouch restaurante-sistema/views/reports/types/rodizio.php\ntouch restaurante-sistema/views/reports/types/delivery.php\n\ntouch restaurante-sistema/views/ifood/orders.php\n\ntouch restaurante-sistema/views/suppliers/list.php\ntouch restaurante-sistema/views/suppliers/details.php\ntouch restaurante-sistema/views/suppliers/quick-order.php\ntouch restaurante-sistema/views/suppliers/history.php\ntouch restaurante-sistema/views/suppliers/ratings.php\n\ntouch restaurante-sistema/views/staff/list.php\ntouch restaurante-sistema/views/staff/details.php\ntouch restaurante-sistema/views/staff/schedule.php\ntouch restaurante-sistema/views/staff/time-clock/register.php\ntouch restaurante-sistema/views/staff/time-clock/management.php\ntouch restaurante-sistema/views/staff/time-clock/reports.php\n\ntouch restaurante-sistema/views/customers/list.php\ntouch restaurante-sistema/views/customers/details.php\ntouch restaurante-sistema/views/customers/loyalty.php\n\ntouch restaurante-sistema/views/marketing/campaigns.php\ntouch restaurante-sistema/views/marketing/promotions.php\n\ntouch restaurante-sistema/views/qrcode/generator.php\ntouch restaurante-sistema/views/qrcode/manager.php\ntouch restaurante-sistema/views/qrcode/preview.php\n\ntouch restaurante-sistema/views/admin/accounts.php\ntouch restaurante-sistema/views/admin/plans.php\ntouch restaurante-sistema/views/admin/statistics.php\ntouch restaurante-sistema/views/admin/support.php\ntouch restaurante-sistema/views/admin/settings.php\n\ntouch restaurante-sistema/views/settings/general.php\ntouch restaurante-sistema/views/settings/restaurant-type.php\ntouch restaurante-sistema/views/settings/interfaces.php\ntouch restaurante-sistema/views/settings/qrcode.php\ntouch restaurante-sistema/views/settings/group-orders.php\ntouch restaurante-sistema/views/settings/time-clock.php\ntouch restaurante-sistema/views/settings/integrations.php\ntouch restaurante-sistema/views/settings/account.php\ntouch restaurante-sistema/views/settings/backup.php\n\n# Criar estrutura de includes\nmkdir -p restaurante-sistema/includes\ntouch restaurante-sistema/includes/functions.php\ntouch restaurante-sistema/includes/validation.php\ntouch restaurante-sistema/includes/session.php\ntouch restaurante-sistema/includes/security.php\ntouch restaurante-sistema/includes/currency.php\ntouch restaurante-sistema/includes/date.php\ntouch restaurante-sistema/includes/notification.php\ntouch restaurante-sistema/includes/restaurant-type-helper.php\ntouch restaurante-sistema/includes/interface-loader.php\ntouch restaurante-sistema/includes/tenant-resolver.php\ntouch restaurante-sistema/includes/feature-checker.php\ntouch restaurante-sistema/includes/subscription-helper.php\n\n# Criar estrutura de API\nmkdir -p restaurante-sistema/api/subscription\nmkdir -p restaurante-sistema/api/orders\nmkdir -p restaurante-sistema/api/payments\nmkdir -p restaurante-sistema/api/staff\n\ntouch restaurante-sistema/api/auth.php\ntouch restaurante-sistema/api/subscription.php\ntouch restaurante-sistema/api/subscription/plans.php\ntouch restaurante-sistema/api/subscription/webhooks.php\ntouch restaurante-sistema/api/subscription/billing.php\ntouch restaurante-sistema/api/tables.php\ntouch restaurante-sistema/api/orders.php\ntouch restaurante-sistema/api/orders/group-orders.php\ntouch restaurante-sistema/api/menu.php\ntouch restaurante-sistema/api/payments.php\ntouch restaurante-sistema/api/payments/bill-split.php\ntouch restaurante-sistema/api/ifood.php\ntouch restaurante-sistema/api/suppliers.php\ntouch restaurante-sistema/api/staff.php\ntouch restaurante-sistema/api/staff/time-clock.php\ntouch restaurante-sistema/api/customers.php\ntouch restaurante-sistema/api/reports.php\ntouch restaurante-sistema/api/qrcode.php\ntouch restaurante-sistema/api/restaurant-type.php\n\n# Criar estrutura de services\nmkdir -p restaurante-sistema/services\ntouch restaurante-sistema/services/StripeService.php\ntouch restaurante-sistema/services/SubscriptionService.php\ntouch restaurante-sistema/services/BillingService.php\ntouch restaurante-sistema/services/TenantService.php\ntouch restaurante-sistema/services/FeatureLimitService.php\ntouch restaurante-sistema/services/QRCodeService.php\ntouch restaurante-sistema/services/PDFService.php\ntouch restaurante-sistema/services/iFoodService.php\ntouch restaurante-sistema/services/EmailService.php\ntouch restaurante-sistema/services/SMSService.php\ntouch restaurante-sistema/services/NotificationService.php\ntouch restaurante-sistema/services/ChartService.php\ntouch restaurante-sistema/services/BackupService.php\ntouch restaurante-sistema/services/RestaurantTypeService.php\ntouch restaurante-sistema/services/InterfaceService.php\ntouch restaurante-sistema/services/ScaleService.php\ntouch restaurante-sistema/services/DeliveryTrackingService.php\ntouch restaurante-sistema/services/RodizioTrackingService.php\n\n# Criar estrutura de database\nmkdir -p restaurante-sistema/database/migrations\nmkdir -p restaurante-sistema/database/seeds\n\ntouch restaurante-sistema/database/migrations/create_tenants_table.php\ntouch restaurante-sistema/database/migrations/create_accounts_table.php\ntouch restaurante-sistema/database/migrations/create_subscriptions_table.php\ntouch restaurante-sistema/database/migrations/create_plans_table.php\ntouch restaurante-sistema/database/migrations/create_invoices_table.php\ntouch restaurante-sistema/database/migrations/create_usage_logs_table.php\ntouch restaurante-sistema/database/migrations/create_users_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_types_table.php\ntouch restaurante-sistema/database/migrations/create_restaurants_table.php\ntouch restaurante-sistema/database/migrations/create_restaurant_configurations_table.php\ntouch restaurante-sistema/database/migrations/create_tables_table.php\ntouch restaurante-sistema/database/migrations/create_menu_items_table.php\ntouch restaurante-sistema/database/migrations/create_orders_table.php\ntouch restaurante-sistema/database/migrations/create_order_items_table.php\ntouch restaurante-sistema/database/migrations/create_inventory_table.php\ntouch restaurante-sistema/database/migrations/create_customers_table.php\ntouch restaurante-sistema/database/migrations/create_staff_table.php\ntouch restaurante-sistema/database/migrations/create_time_clock_table.php\ntouch restaurante-sistema/database/migrations/create_suppliers_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_orders_table.php\ntouch restaurante-sistema/database/migrations/create_supplier_contacts_table.php\ntouch restaurante-sistema/database/migrations/create_payments_table.php\ntouch restaurante-sistema/database/migrations/create_bill_splits_table.php\ntouch restaurante-sistema/database/migrations/create_qrcodes_table.php\n\ntouch restaurante-sistema/database/seeds/plans_seeder.php\ntouch restaurante-sistema/database/seeds/features_seeder.php\ntouch restaurante-sistema/database/seeds/users_seeder.php\ntouch restaurante-sistema/database/seeds/restaurant_types_seeder.php\ntouch restaurante-sistema/database/seeds/menu_items_seeder.php\ntouch restaurante-sistema/database/seeds/suppliers_seeder.php\ntouch restaurante-sistema/database/seeds/staff_seeder.php\n\n# Criar estrutura de public\nmkdir -p restaurante-sistema/public/webhook\nmkdir -p restaurante-sistema/public/qr/tables\nmkdir -p restaurante-sistema/public/receipt\n\ntouch restaurante-sistema/public/index.php\ntouch restaurante-sistema/public/pricing.php\ntouch restaurante-sistema/public/register.php\ntouch restaurante-sistema/public/customer-menu.php\ntouch restaurante-sistema/public/group-order.php\ntouch restaurante-sistema/public/time-clock.php\ntouch restaurante-sistema/public/webhook/stripe.php\ntouch restaurante-sistema/public/.htaccess\n\n# Criar estrutura de mobile\nmkdir -p restaurante-sistema/mobile/types\nmkdir -p restaurante-sistema/mobile/staff\n\ntouch restaurante-sistema/mobile/index.php\ntouch restaurante-sistema/mobile/menu.php\ntouch restaurante-sistema/mobile/order.php\ntouch restaurante-sistema/mobile/group-order.php\ntouch restaurante-sistema/mobile/payment.php\ntouch restaurante-sistema/mobile/types/alacarte.php\ntouch restaurante-sistema/mobile/types/fastfood.php\ntouch restaurante-sistema/mobile/types/pizzaria.php\ntouch restaurante-sistema/mobile/types/rodizio.php\ntouch restaurante-sistema/mobile/staff/time-clock.php\n\n# Criar estrutura de docs\nmkdir -p restaurante-sistema/docs/restaurant-types\n\ntouch restaurante-sistema/docs/setup.md\ntouch restaurante-sistema/docs/admin-guide.md\ntouch restaurante-sistema/docs/user-guide.md\ntouch restaurante-sistema/docs/api-docs.md\ntouch restaurante-sistema/docs/database-schema.md\ntouch restaurante-sistema/docs/subscription.md\ntouch restaurante-sistema/docs/restaurant-types/alacarte.md\ntouch restaurante-sistema/docs/restaurant-types/fastfood.md\ntouch restaurante-sistema/docs/restaurant-types/pizzaria.md\n\n# Criar estrutura de tests\nmkdir -p restaurante-sistema/tests/unit/subscription\nmkdir -p restaurante-sistema/tests/integration\nmkdir -p restaurante-sistema/tests/acceptance\n\n# Criar estrutura de vendor (diret\u00f3rio vazio para Composer)\nmkdir -p restaurante-sistema/vendor\n\n# Criar arquivos raiz\ntouch restaurante-sistema/.htaccess\ntouch restaurante-sistema/index.php\ntouch restaurante-sistema/composer.json\ntouch restaurante-sistema/package.json\ntouch restaurante-sistema/README.md\ntouch restaurante-sistema/LICENSE\ntouch restaurante-sistema/.gitignore\n\n\ntudo acima meno o banco de dados precisar ser criado, incluindo o diret\u00f3rio\n\n# CHECKPOINT DE DESENVOLVIMENTO - SISTEMA DE GEST\u00c3O DE RESTAURANTES SAAS\n\n## PROGRESSO ATUAL: 0% CONCLU\u00cdDO\n\n\nEste checkpoint resume o progresso atual e define claramente os pr\u00f3ximos passos para o desenvolvimento. Em sua pr\u00f3xima conversa, voc\u00ea pode continuar a partir deste ponto, concentrando-se na implementa\u00e7\u00e3o dos m\u00f3dulos listados acima.\n\n\n\n\n\n\n## Status do Desenvolvimento\n- Progresso geral: 0%\n- M\u00f3dulos conclu\u00eddos:\nNenhum m\u00f3dulo conclu\u00eddo ainda.\n\n- Outros m\u00f3dulos em andamento:\nNenhum outro m\u00f3dulo em andamento.\n\n## Sobre este M\u00f3dulo\n- Descri\u00e7\u00e3o: N\u00facleo do sistema, incluindo autentica\u00e7\u00e3o e estrutura multi-tenant\n- Status: in_progress\n- Progresso: 0%\n- Arquivos j\u00e1 criados:\n- /core/config/app.php\n- restaurante-sistema/core/Router.php\n- restaurante-sistema/core/Controller.php\n- restaurante-sistema/core/View.php\n- restaurante-sistema/core/Response.php\n- restaurante-sistema/core/ErrorHandler.php\n- restaurante-sistema/restaurante-sistema/core/Database/MigrationManager.php\n- restaurante-sistema/restaurante-sistema/core/Database/Migration.php\n- restaurante-sistema/restaurante-sistema/migrate.php\n- restaurante-sistema/restaurante-sistema/database/migrations/001_create_tenants_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/002_create_users_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/003_create_roles_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/004_create_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n- restaurante-sistema/restaurante-sistema/database/migrations/006_create_access_logs_table.php\n- restaurante-sistema/restaurante-sistema/models/User.php\n- restaurante-sistema/restaurante-sistema/controllers/AuthController.php\n- restaurante-sistema/Migration Manager\n- restaurante-sistema/Base Migration Class\n- restaurante-sistema/CLI Migration Runner\n- restaurante-sistema/Actual Migration Files\n- restaurante-sistema/Modelo de Usu\u00e1rio\n- restaurante-sistema/Controlador de Autentica\u00e7\u00e3o\n- restaurante-sistema/core/Database/MigrationManager.php\n- restaurante-sistema/core/Database/Migration.php\n- restaurante-sistema/migrate.php\n- restaurante-sistema/database/migrations/001_create_tenants_table.php\n- restaurante-sistema/database/migrations/002_create_users_table.php\n- restaurante-sistema/database/migrations/003_create_roles_table.php\n- restaurante-sistema/database/migrations/004_create_permissions_table.php\n- restaurante-sistema/database/migrations/005_create_role_permissions_table.php\n- restaurante-sistema/database/migrations/006_create_access_logs_table.php\n- restaurante-sistema/core/App.php\n- restaurante-sistema/core/Database/DatabaseConnection.php\n- restaurante-sistema/core/Model.php\n- restaurante-sistema/core/Exceptions/AppException.php\n- restaurante-sistema/core/Exceptions/DatabaseException.php\n- restaurante-sistema/core/Exceptions/ModelException.php\n- restaurante-sistema/core/Exceptions/ValidationException.php\n- restaurante-sistema/Arquivo: core/App.php\n- restaurante-sistema/Arquivo: core/Database/DatabaseConnection.php\n- restaurante-sistema/Arquivo: core/Model.php\n- restaurante-sistema/Arquivo: core/Exceptions/AppException.php\n- restaurante-sistema/Arquivo: core/Exceptions/DatabaseException.php\n- restaurante-sistema/Arquivo: core/Exceptions/ModelException.php\n- restaurante-sistema/Arquivo: core/Exceptions/ValidationException.php\n\n## Requisitos para o Pr\u00f3ximo Passo\n# Desenvolvimento do Sistema SaaS de Restaurantes - Pr\u00f3ximos 10%\n\nAvan\u00e7amos significativamente com o n\u00facleo do sistema, gerenciamento de card\u00e1pio, mesas, pedidos e integra\u00e7\u00f5es de pagamento. Para este pr\u00f3ximo est\u00e1gio, vamos focar em aspectos cr\u00edticos para a opera\u00e7\u00e3o completa do restaurante: gest\u00e3o de estoque, relat\u00f3rios, fideliza\u00e7\u00e3o de clientes, gerenciamento de funcion\u00e1rios e integra\u00e7\u00f5es externas.\n\n## REQUISITOS PARA ESTA FASE\n\n### 1. Gest\u00e3o de Estoque e Invent\u00e1rio\n\n#### 1.1 Cadastro de Produtos e Insumos\n- Implementar CRUD completo para ingredientes e produtos\n- Desenvolver sistema de categoriza\u00e7\u00e3o de itens de estoque\n- Criar gest\u00e3o de unidades de medida e convers\u00f5es\n- Implementar cadastro de fornecedores\n- Desenvolver sistema de c\u00f3digos de barras/SKUs\n\n#### 1.2 Controle de Estoque\n- Implementar sistema de movimenta\u00e7\u00f5es de estoque (entradas/sa\u00eddas)\n- Desenvolver baixa autom\u00e1tica de estoque baseada em vendas\n- Criar sistema de alertas para estoque m\u00ednimo\n- Implementar contagem de invent\u00e1rio f\u00edsico\n- Desenvolver relat\u00f3rio de diverg\u00eancias de estoque\n\n#### 1.3 Previs\u00e3o e Pedidos\n- Implementar an\u00e1lise de consumo m\u00e9dio\n- Desenvolver sugest\u00e3o autom\u00e1tica de compras\n- Criar fluxo de pedidos para fornecedores\n- Implementar recebimento e confer\u00eancia de mercadorias\n- Desenvolver c\u00e1lculo de custo m\u00e9dio e margens\n\n### 2. Relat\u00f3rios e An\u00e1lises\n\n#### 2.1 Relat\u00f3rios Financeiros\n- Implementar dashboard financeiro\n- Desenvolver relat\u00f3rios de vendas (di\u00e1rio, semanal, mensal)\n- Criar an\u00e1lise de custo x receita\n- Implementar relat\u00f3rio de lucratividade por produto\n- Desenvolver visualiza\u00e7\u00e3o de tend\u00eancias e sazonalidade\n\n#### 2.2 Relat\u00f3rios Operacionais\n- Implementar an\u00e1lise de ocupa\u00e7\u00e3o e rotatividade de mesas\n- Desenvolver relat\u00f3rios de tempo m\u00e9dio de atendimento\n- Criar relat\u00f3rios de produtividade da cozinha\n- Implementar an\u00e1lise de picos de movimento\n- Desenvolver relat\u00f3rios de cancelamentos e devolu\u00e7\u00f5es\n\n#### 2.3 Sistema de Exporta\u00e7\u00e3o\n- Implementar exporta\u00e7\u00e3o para Excel/CSV/PDF\n- Desenvolver agendamento de relat\u00f3rios\n- Criar envio autom\u00e1tico por email\n- Implementar API para integra\u00e7\u00e3o com ferramentas externas\n- Desenvolver visualiza\u00e7\u00f5es personaliz\u00e1veis\n\n### 3. Sistema de Fidelidade e Marketing\n\n#### 3.1 Programa de Fidelidade\n- Implementar cadastro de clientes\n- Desenvolver sistema de pontos por consumo\n- Criar n\u00edveis de fidelidade com benef\u00edcios progressivos\n- Implementar resgate de recompensas\n- Desenvolver notifica\u00e7\u00f5es autom\u00e1ticas sobre pontos\n\n#### 3.2 Campanhas de Marketing\n- Implementar sistema de promo\u00e7\u00f5es por per\u00edodo\n- Desenvolver cupons de desconto\n- Criar campanhas para aniversariantes\n- Implementar sistema de recomenda\u00e7\u00f5es baseado em hist\u00f3rico\n- Desenvolver segmenta\u00e7\u00e3o de clientes para a\u00e7\u00f5es direcionadas\n\n#### 3.3 Feedback e Avalia\u00e7\u00f5es\n- Implementar sistema de avalia\u00e7\u00e3o p\u00f3s-consumo\n- Desenvolver coleta de feedback via QR code\n- Criar dashboard de satisfa\u00e7\u00e3o do cliente\n- Implementar alerta para avalia\u00e7\u00f5es negativas\n- Desenvolver an\u00e1lise de sentimento em coment\u00e1rios\n\n### 4. Gerenciamento de Funcion\u00e1rios\n\n#### 4.1 Cadastro e Perfis\n- Implementar cadastro completo de funcion\u00e1rios\n- Desenvolver defini\u00e7\u00e3o de fun\u00e7\u00f5es e permiss\u00f5es espec\u00edficas\n- Criar gest\u00e3o de documentos e informa\u00e7\u00f5es pessoais\n- Implementar hist\u00f3rico de cargos e sal\u00e1rios\n- Desenvolver sistema de metas e desempenho\n\n#### 4.2 Escala de Trabalho\n- Implementar cria\u00e7\u00e3o de turnos e hor\u00e1rios\n- Desenvolver escala semanal/mensal\n- Criar sistema de trocas e substitui\u00e7\u00f5es\n- Implementar controle de folgas e f\u00e9rias\n- Desenvolver alerta de conflitos de escala\n\n#### 4.3 Registro de Ponto\n- Implementar registro de entrada/sa\u00edda\n- Desenvolver controle de horas trabalhadas\n- Criar sistema de horas extras e banco de horas\n- Implementar aprova\u00e7\u00e3o de ponto por supervisor\n- Desenvolver relat\u00f3rios para departamento pessoal\n\n### 5. Integra\u00e7\u00f5es Externas\n\n#### 5.1 Plataformas de Delivery\n- Implementar integra\u00e7\u00e3o com iFood\n- Desenvolver sincroniza\u00e7\u00e3o de card\u00e1pio\n- Criar recebimento autom\u00e1tico de pedidos\n- Implementar atualiza\u00e7\u00e3o de status para a plataforma\n- Desenvolver concilia\u00e7\u00e3o financeira de pedidos externos\n\n#### 5.2 Sistemas Fiscais\n- Implementar emiss\u00e3o b\u00e1sica de NFC-e\n- Desenvolver integra\u00e7\u00e3o com sistema fiscal\n- Criar cadastro de impostos e regras fiscais\n- Implementar controle de notas emitidas\n- Desenvolver tratamento de conting\u00eancia\n\n#### 5.3 Sistemas de Pagamento\n- Aprimorar integra\u00e7\u00e3o com Stripe para recorr\u00eancia\n- Desenvolver suporte a m\u00faltiplos gateways de pagamento\n- Criar concilia\u00e7\u00e3o autom\u00e1tica de pagamentos\n- Implementar sistema anti-fraude b\u00e1sico\n- Desenvolver split de pagamentos para marketplace\n\n## DIRETRIZES DE IMPLEMENTA\u00c7\u00c3O\n\n1. Manter a separa\u00e7\u00e3o clara entre m\u00f3dulos do sistema\n2. Implementar interfaces de usu\u00e1rio intuitivas para fun\u00e7\u00f5es complexas\n3. Utilizar processamento ass\u00edncrono para tarefas pesadas\n4. Aplicar caching estrat\u00e9gico para relat\u00f3rios e an\u00e1lises\n5. Garantir seguran\u00e7a para dados sens\u00edveis (pessoais e financeiros)\n6. Implementar logs detalhados para opera\u00e7\u00f5es cr\u00edticas\n7. Desenvolver testes automatizados para integra\u00e7\u00f5es externas\n8. Considerar a escalabilidade para crescimento do neg\u00f3cio\n\n## FORMATO DE C\u00d3DIGO\n\nPara garantir a extra\u00e7\u00e3o correta dos arquivos, utilize exatamente este formato para cada arquivo:\n\n```php\n// File: caminho/do/arquivo.php\n// C\u00f3digo completo aqui\n```\n\n## ENTREG\u00c1VEIS ESPERADOS\n\n1. Sistema completo de gest\u00e3o de estoque e invent\u00e1rio\n2. Dashboard e relat\u00f3rios financeiros e operacionais\n3. Programa de fidelidade e ferramentas de marketing\n4. Sistema de gerenciamento de funcion\u00e1rios e escalas\n5. Integra\u00e7\u00f5es funcionais com plataformas externas (delivery e fiscal)\n\nEste est\u00e1gio \u00e9 fundamental para transformar o sistema em uma solu\u00e7\u00e3o completa de gest\u00e3o, ampliando seu valor para os restaurantes e criando barreiras de sa\u00edda que incentivam a renova\u00e7\u00e3o das assinaturas.\n\nPor favor, forne\u00e7a:\n1. C\u00f3digo para os pr\u00f3ximos arquivos necess\u00e1rios para este m\u00f3dulo\n2. Instru\u00e7\u00f5es de integra\u00e7\u00e3o com os componentes existentes\n3. Orienta\u00e7\u00f5es para testes e valida\u00e7\u00e3o\n",
                "response": "# An\u00e1lise do Sistema de Gest\u00e3o de Restaurantes SaaS\n\nVou iniciar o desenvolvimento do m\u00f3dulo core do sistema, que \u00e9 fundamental para o funcionamento de toda a aplica\u00e7\u00e3o. Este m\u00f3dulo vai fornecer a estrutura base para o sistema multi-tenant, autentica\u00e7\u00e3o, gerenciamento de sess\u00f5es e outras funcionalidades essenciais.\n\n## Arquivos do M\u00f3dulo Core\n\nVamos come\u00e7ar com os seguintes arquivos fundamentais:\n\n### 1. Arquivo de Configura\u00e7\u00e3o da Aplica\u00e7\u00e3o\n\n```php\n// File: config/app.php\n<?php\n\nreturn [\n    'name' => 'Sistema de Gest\u00e3o de Restaurantes',\n    'version' => '1.0.0',\n    'environment' => 'development', // development, production, testing\n    'debug' => true,\n    'timezone' => 'America/Sao_Paulo',\n    'locale' => 'pt_BR',\n    'url' => 'http://localhost/restaurante-sistema',\n    'encryption_key' => 'sua_chave_de_encriptacao_segura_aqui',\n    'session' => [\n        'lifetime' => 120, // em minutos\n        'secure_cookies' => false, // true em produ\u00e7\u00e3o\n        'same_site' => 'lax', // none, lax, strict\n        'http_only' => true,\n    ],\n    'security' => [\n        'password_min_length' => 8,\n        'password_requires_special' => true,\n        'password_requires_number' => true,\n        'password_requires_uppercase' => true,\n        'max_login_attempts' => 5,\n        'lockout_time' => 15, // em minutos\n    ],\n    'logs' => [\n        'enabled' => true,\n        'path' => 'logs',\n        'level' => 'debug', // debug, info, notice, warning, error, critical, alert, emergency\n    ],\n    'tenant' => [\n        'column' => 'tenant_id',\n        'header' => 'X-Tenant',\n        'validate_all_routes' => true,\n        'exempt_routes' => ['/auth/login', '/auth/register', '/auth/reset-password']\n    ]\n];\n```\n\n### 2. Classe Principal da Aplica\u00e7\u00e3o\n\n```php\n// File: core/App.php\n<?php\n\nnamespace Core;\n\nclass App {\n    private static $instance = null;\n    private $config = [];\n    private $container = [];\n    private $currentTenant = null;\n\n    /**\n     * Constructor\n     */\n    private function __construct() {\n        $this->loadConfigurations();\n        $this->setupErrorHandling();\n        $this->initializeContainer();\n    }\n\n    /**\n     * Get singleton instance\n     */\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n\n    /**\n     * Load configuration files\n     */\n    private function loadConfigurations() {\n        $configFiles = glob(__DIR__ . '/../config/*.php');\n        foreach ($configFiles as $file) {\n            $key = basename($file, '.php');\n            $this->config[$key] = require $file;\n        }\n    }\n\n    /**\n     * Setup error and exception handling\n     */\n    private function setupErrorHandling() {\n        $errorHandler = new ErrorHandler($this->config['app']['debug']);\n        $errorHandler->register();\n    }\n\n    /**\n     * Initialize service container\n     */\n    private function initializeContainer() {\n        // Register core services\n        $this->bind('db', function() {\n            return new Database\\DatabaseConnection($this->config['database']);\n        });\n        \n        $this->bind('router', function() {\n            return new Router();\n        });\n        \n        $this->bind('request', function() {\n            return new Request();\n        });\n        \n        $this->bind('response', function() {\n            return new Response();\n        });\n        \n        $this->bind('session', function() {\n            return new Session($this->config['app']['session']);\n        });\n        \n        $this->bind('auth', function() {\n            return new Auth\\AuthManager($this->get('db'), $this->get('session'));\n        });\n        \n        $this->bind('tenant', function() {\n            return new Tenant\\TenantManager($this->config['app']['tenant']);\n        });\n    }\n\n    /**\n     * Run the application\n     */\n    public function run() {\n        // Start session\n        $this->get('session')->start();\n        \n        // Resolve tenant\n        $tenantManager = $this->get('tenant');\n        $this->currentTenant = $tenantManager->resolveTenant();\n        \n        // Set up database with tenant context\n        if ($this->currentTenant) {\n            $this->get('db')->setTenant($this->currentTenant->id);\n        }\n        \n        // Process the request through the router\n        $router = $this->get('router');\n        $router->loadRoutes();\n        \n        $request = $this->get('request');\n        $response = $router->dispatch($request);\n        \n        // Send response\n        $response->send();\n    }\n\n    /**\n     * Get configuration value\n     */\n    public function config($key, $default = null) {\n        $parts = explode('.', $key);\n        $value = $this->config;\n        \n        foreach ($parts as $part) {\n            if (!isset($value[$part])) {\n                return $default;\n            }\n            $value = $value[$part];\n        }\n        \n        return $value;\n    }\n\n    /**\n     * Bind a service to the container\n     */\n    public function bind($name, $resolver) {\n        $this->container[$name] = [\n            'resolver' => $resolver,\n            'instance' => null\n        ];\n    }\n\n    /**\n     * Get a service from the container\n     */\n    public function get($name) {\n        if (!isset($this->container[$name])) {\n            throw new Exceptions\\AppException(\"Service '$name' not found in container\");\n        }\n        \n        if ($this->container[$name]['instance'] === null) {\n            $resolver = $this->container[$name]['resolver'];\n            $this->container[$name]['instance'] = $resolver();\n        }\n        \n        return $this->container[$name]['instance'];\n    }\n\n    /**\n     * Get current tenant\n     */\n    public function getCurrentTenant() {\n        return $this->currentTenant;\n    }\n\n    /**\n     * Set current tenant\n     */\n    public function setCurrentTenant($tenant) {\n        $this->currentTenant = $tenant;\n        \n        if ($tenant) {\n            $this->get('db')->setTenant($tenant->id);\n        }\n    }\n}\n```\n\n### 3. Classe de Conex\u00e3o com o Banco de Dados\n\n```php\n// File: core/Database/DatabaseConnection.php\n<?php\n\nnamespace Core\\Database;\n\nuse Core\\Exceptions\\DatabaseException;\nuse Core\\App;\n\nclass DatabaseConnection {\n    private $pdo;\n    private $tenantId = null;\n    private $config;\n    private $queryLog = [];\n    private $isLoggingEnabled = false;\n\n    /**\n     * Constructor\n     */\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->connect();\n        \n        $app = App::getInstance();\n        $this->isLoggingEnabled = $app->config('app.environment') === 'development';\n    }\n\n    /**\n     * Establish database connection\n     */\n    private function connect() {\n        $dsn = \"mysql:host={$this->config['host']};dbname={$this->config['database']};charset=utf8mb4\";\n        \n        $options = [\n            \\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION,\n            \\PDO::ATTR_DEFAULT_FETCH_MODE => \\PDO::FETCH_ASSOC,\n            \\PDO::ATTR_EMULATE_PREPARES => false,\n            \\PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci\"\n        ];\n        \n        try {\n            $this->pdo = new \\PDO($dsn, $this->config['username'], $this->config['password'], $options);\n        } catch (\\PDOException $e) {\n            throw new DatabaseException(\"Database connection failed: \" . $e->getMessage());\n        }\n    }\n\n    /**\n     * Set current tenant ID\n     */\n    public function setTenant($tenantId) {\n        $this->tenantId = $tenantId;\n    }\n\n    /**\n     * Execute a SELECT query\n     */\n    public function select($table, $columns = '*', $where = null, $params = [], $orderBy = null, $limit = null, $offset = null) {\n        $query = \"SELECT $columns FROM $table\";\n        \n        // Apply tenant filter if tenant ID is set and the table has a tenant column\n        if ($this->tenantId && $this->tableHasTenantColumn($table)) {\n            $query .= $where ? \" WHERE tenant_id = ? AND $where\" : \" WHERE tenant_id = ?\";\n            array_unshift($params, $this->tenantId);\n        } elseif ($where) {\n            $query .= \" WHERE $where\";\n        }\n        \n        if ($orderBy) {\n            $query .= \" ORDER BY $orderBy\";\n        }\n        \n        if ($limit) {\n            $query .= \" LIMIT $limit\";\n            \n            if ($offset) {\n                $query .= \" OFFSET $offset\";\n            }\n        }\n        \n        return $this->query($query, $params);\n    }\n\n    /**\n     * Execute an INSERT query\n     */\n    public function insert($table, $data) {\n        // Add tenant ID to the data if tenant ID is set and the table has a tenant column\n        if ($this->tenantId && $this->tableHasTenantColumn($table)) {\n            $data['tenant_id'] = $this->tenantId;\n        }\n        \n        $columns = implode(', ', array_keys($data));\n        $placeholders = implode(', ', array_fill(0, count($data), '?'));\n        \n        $query = \"INSERT INTO $table ($columns) VALUES ($placeholders)\";\n        \n        $this->query($query, array_values($data));\n        \n        return $this->pdo->lastInsertId();\n    }\n\n    /**\n     * Execute an UPDATE query\n     */\n    public function update($table, $data, $where = null, $params = []) {\n        $sets = [];\n        foreach (array_keys($data) as $column) {\n            $sets[] = \"$column = ?\";\n        }\n        \n        $query = \"UPDATE $table SET \" . implode(', ', $sets);\n        \n        // Apply tenant filter if tenant ID is set and the table has a tenant column\n        if ($this->tenantId && $this->tableHasTenantColumn($table)) {\n            $query .= $where ? \" WHERE tenant_id = ? AND $where\" : \" WHERE tenant_id = ?\";\n            array_push($params, $this->tenantId);\n        } elseif ($where) {\n            $query .= \" WHERE $where\";\n        }\n        \n        return $this->query($query, array_merge(array_values($data), $params))->rowCount();\n    }\n\n    /**\n     * Execute a DELETE query\n     */\n    public function delete($table, $where = null, $params = []) {\n        $query = \"DELETE FROM $table\";\n        \n        // Apply tenant filter if tenant ID is set and the table has a tenant column\n        if ($this->tenantId && $this->tableHasTenantColumn($table)) {\n            $query .= $where ? \" WHERE tenant_id = ? AND $where\" : \" WHERE tenant_id = ?\";\n            array_unshift($params, $this->tenantId);\n        } elseif ($where) {\n            $query .= \" WHERE $where\";\n        }\n        \n        return $this->query($query, $params)->rowCount();\n    }\n\n    /**\n     * Execute a raw query\n     */\n    public function query($query, $params = []) {\n        $startTime = microtime(true);\n        \n        try {\n            $stmt = $this->pdo->prepare($query);\n            $stmt->execute($params);\n            \n            if ($this->isLoggingEnabled) {\n                $endTime = microtime(true);\n                $executionTime = round(($endTime - $startTime) * 1000, 2); // in milliseconds\n                $this->logQuery($query, $params, $executionTime);\n            }\n            \n            return $stmt;\n        } catch (\\PDOException $e) {\n            throw new DatabaseException(\"Query execution failed: \" . $e->getMessage() . \"\\nQuery: $query\");\n        }\n    }\n\n    /**\n     * Begin a transaction\n     */\n    public function beginTransaction() {\n        return $this->pdo->beginTransaction();\n    }\n\n    /**\n     * Commit a transaction\n     */\n    public function commit() {\n        return $this->pdo->commit();\n    }\n\n    /**\n     * Rollback a transaction\n     */\n    public function rollback() {\n        return $this->pdo->rollBack();\n    }\n\n    /**\n     * Get PDO instance\n     */\n    public function getPdo() {\n        return $this->pdo;\n    }\n\n    /**\n     * Check if a table has a tenant column\n     */\n    private function tableHasTenantColumn($table) {\n        // List of tables that don't have tenant_id column\n        $tablesWithoutTenant = ['tenants', 'plans', 'permissions', 'platform_admins'];\n        \n        return !in_array($table, $tablesWithoutTenant);\n    }\n\n    /**\n     * Log a query for debugging purposes\n     */\n    private function logQuery($query, $params, $executionTime) {\n        $this->queryLog[] = [\n            'query' => $query,\n            'params' => $params,\n            'execution_time' => $executionTime . 'ms',\n            'time' => date('Y-m-d H:i:s')\n        ];\n        \n        // Keep only the last 100 queries in the log\n        if (count($this->queryLog) > 100) {\n            array_shift($this->queryLog);\n        }\n    }\n\n    /**\n     * Get query log\n     */\n    public function getQueryLog() {\n        return $this->queryLog;\n    }\n}\n```\n\n### 4. Classe Modelo Base\n\n```php\n// File: core/Model.php\n<?php\n\nnamespace Core;\n\nuse Core\\App;\nuse Core\\Exceptions\\ModelException;\n\nabstract class Model {\n    protected $table;\n    protected $primaryKey = 'id';\n    protected $fillable = [];\n    protected $guarded = ['id'];\n    protected $db;\n    protected $attributes = [];\n    protected $original = [];\n    protected $exists = false;\n\n    /**\n     * Constructor\n     */\n    public function __construct(array $attributes = []) {\n        $this->db = App::getInstance()->get('db');\n        \n        if (!$this->table) {\n            // Derive table name from class name if not set\n            $reflection = new \\ReflectionClass($this);\n            $this->table = strtolower($reflection->getShortName()) . 's';\n        }\n        \n        $this->fill($attributes);\n    }\n\n    /**\n     * Fill model with attributes\n     */\n    public function fill(array $attributes) {\n        foreach ($attributes as $key => $value) {\n            if ($this->isFillable($key)) {\n                $this->setAttribute($key, $value);\n            }\n        }\n        \n        return $this;\n    }\n\n    /**\n     * Check if an attribute is fillable\n     */\n    public function isFillable($key) {\n        if (in_array($key, $this->guarded)) {\n            return false;\n        }\n        \n        return empty($this->fillable) || in_array($key, $this->fillable);\n    }\n\n    /**\n     * Set an attribute\n     */\n    public function setAttribute($key, $value) {\n        $this->attributes[$key] = $value;\n        return $this;\n    }\n\n    /**\n     * Get an attribute\n     */\n    public function getAttribute($key) {\n        if (!isset($this->attributes[$key])) {\n            return null;\n        }\n        \n        return $this->attributes[$key];\n    }\n\n    /**\n     * Magic method for getting attributes\n     */\n    public function __get($key) {\n        return $this->getAttribute($key);\n    }\n\n    /**\n     * Magic method for setting attributes\n     */\n    public function __set($key, $value) {\n        $this->setAttribute($key, $value);\n    }\n\n    /**\n     * Magic method for checking if attribute exists\n     */\n    public function __isset($key) {\n        return isset($this->attributes[$key]);\n    }\n\n    /**\n     * Get all attributes\n     */\n    public function getAttributes() {\n        return $this->attributes;\n    }\n\n    /**\n     * Find a record by primary key\n     */\n    public function find($id) {\n        $result = $this->db->select($this->table, '*', \"{$this->primaryKey} = ?\", [$id]);\n        \n        if ($result->rowCount() === 0) {\n            return null;\n        }\n        \n        $model = new static($result->fetch());\n        $model->exists = true;\n        $model->original = $model->attributes;\n        \n        return $model;\n    }\n\n    /**\n     * Find a record or fail\n     */\n    public function findOrFail($id) {\n        $model = $this->find($id);\n        \n        if ($model === null) {\n            throw new ModelException(\"Record with ID {$id} not found in {$this->table}\");\n        }\n        \n        return $model;\n    }\n\n    /**\n     * Get all records\n     */\n    public function all() {\n        $result = $this->db->select($this->table);\n        \n        $models = [];\n        foreach ($result->fetchAll() as $attributes) {\n            $model = new static($attributes);\n            $model->exists = true;\n            $model->original = $model->attributes;\n            $models[] = $model;\n        }\n        \n        return $models;\n    }\n\n    /**\n     * Save the model\n     */\n    public function save() {\n        if ($this->exists) {\n            return $this->update();\n        }\n        \n        return $this->insert();\n    }\n\n    /**\n     * Insert a new record\n     */\n    private function insert() {\n        // Filter out non-fillable attributes\n        $attributes = array_filter($this->attributes, function($key) {\n            return $this->isFillable($key);\n        }, ARRAY_FILTER_USE_KEY);\n        \n        $id = $this->db->insert($this->table, $attributes);\n        \n        $this->attributes[$this->primaryKey] = $id;\n        $this->exists = true;\n        $this->original = $this->attributes;\n        \n        return true;\n    }\n\n    /**\n     * Update an existing record\n     */\n    private function update() {\n        if (!isset($this->attributes[$this->primaryKey])) {\n            throw new ModelException(\"Cannot update model without primary key\");\n        }\n        \n        // Get only changed attributes\n        $dirty = array_diff_assoc($this->attributes, $this->original);\n        \n        // Filter out primary key and non-fillable attributes\n        $dirty = array_filter($dirty, function($key) {\n            return $key !== $this->primaryKey && $this->isFillable($key);\n        }, ARRAY_FILTER_USE_KEY);\n        \n        if (empty($dirty)) {\n            return true; // No changes to save\n        }\n        \n        $this->db->update($this->table, $dirty, \"{$this->primaryKey} = ?\", [$this->attributes[$this->primaryKey]]);\n        \n        $this->original = $this->attributes;\n        \n        return true;\n    }\n\n    /**\n     * Delete the model\n     */\n    public function delete() {\n        if (!$this->exists) {\n            throw new ModelException(\"Cannot delete model that doesn't exist\");\n        }\n        \n        if (!isset($this->attributes[$this->primaryKey])) {\n            throw new ModelException(\"Cannot delete model without primary key\");\n        }\n        \n        $this->db->delete($this->table, \"{$this->primaryKey} = ?\", [$this->attributes[$this->primaryKey]]);\n        \n        $this->exists = false;\n        \n        return true;\n    }\n\n    /**\n     * Create a new instance of the model\n     */\n    public static function create(array $attributes) {\n        $model = new static($attributes);\n        $model->save();\n        \n        return $model;\n    }\n\n    /**\n     * Execute a where query\n     */\n    public function where($column, $operator, $value = null) {\n        // Handle two-argument syntax: where('column', 'value')\n        if ($value === null) {\n            $value = $operator;\n            $operator = '=';\n        }\n        \n        $result = $this->db->select($this->table, '*', \"$column $operator ?\", [$value]);\n        \n        $models = [];\n        foreach ($result->fetchAll() as $attributes) {\n            $model = new static($attributes);\n            $model->exists = true;\n            $model->original = $model->attributes;\n            $models[] = $model;\n        }\n        \n        return $models;\n    }\n\n    /**\n     * Get the first record matching the criteria\n     */\n    public function firstWhere($column, $operator, $value = null) {\n        $models = $this->where($column, $operator, $value);\n        \n        return !empty($models) ? $models[0] : null;\n    }\n\n    /**\n     * Count records\n     */\n    public function count() {\n        $result = $this->db->select($this->table, 'COUNT(*) as count');\n        return (int) $result->fetch()['count'];\n    }\n}\n```\n\n### 5. Classes de Exce\u00e7\u00f5es do Sistema\n\n```php\n// File: core/Exceptions/AppException.php\n<?php\n\nnamespace Core\\Exceptions;\n\nclass AppException extends \\Exception {\n    // Base exception class for the application\n}\n```\n\n```php\n// File: core/Exceptions/DatabaseException.php\n<?php\n\nnamespace Core\\Exceptions;\n\nclass DatabaseException extends AppException {\n    // Exception for database-related errors\n}\n```\n\n```php\n// File: core/Exceptions/ModelException.php\n<?php\n\nnamespace Core\\Exceptions;\n\nclass ModelException extends AppException {\n    // Exception for model-related errors\n}\n```\n\n```php\n// File: core/Exceptions/ValidationException.php\n<?php\n\nnamespace Core\\Exceptions;\n\nclass ValidationException extends AppException {\n    protected $errors = [];\n    \n    public function __construct($message = \"Validation failed\", array $errors = [], $code = 0, \\Throwable $previous = null) {\n        parent::__construct($message, $code, $previous);\n        $this->errors = $errors;\n    }\n    \n    public function getErrors() {\n        return $this->errors;\n    }\n}\n```\n\n### 6. Classe de Tratamento de Erros\n\n```php\n// File: core/ErrorHandler.php\n<?php\n\nnamespace Core;\n\nuse Core\\Exceptions\\AppException;\n\nclass ErrorHandler {\n    private $debug;\n    \n    public function __construct($debug = false) {\n        $this->debug = $debug;\n    }\n    \n    /**\n     * Register error and exception handlers\n     */\n    public function register() {\n        error_reporting(E_ALL);\n        set_error_handler([$this, 'handleError']);\n        set_exception_handler([$this, 'handleException']);\n        register_shutdown_function([$this, 'handleShutdown']);\n    }\n    \n    /**\n     * Handle PHP errors\n     */\n    public function handleError($level, $message, $file, $line) {\n        if (!(error_reporting() & $level)) {\n            // This error code is not included in error_reporting\n            return;\n        }\n        \n        throw new \\ErrorException($message, 0, $level, $file, $line);\n    }\n    \n    /**\n     * Handle uncaught exceptions\n     */\n    public function handleException($exception) {\n        $this->logException($exception);\n        \n        if (php_sapi_name() === 'cli') {\n            $this->renderCliException($exception);\n        } else {\n            $this->renderHttpException($exception);\n        }\n    }\n    \n    /**\n     * Handle fatal errors\n     */\n    public function handleShutdown() {\n        $error = error_get_last();\n        \n        if ($error !== null && in_array($error['type'], [E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR])) {\n            $this->handleError($error['type'], $error['message'], $error['file'], $error['line']);\n        }\n    }\n    \n    /**\n     * Log the exception\n     */\n    private function logException($exception) {\n        $message = sprintf(\n            \"[%s] %s in %s on line %d\\n%s\\n\",\n            get_class($exception),\n            $exception->getMessage(),\n            $exception->getFile(),\n            $exception->getLine(),\n            $exception->getTraceAsString()\n        );\n        \n        error_log($message);\n        \n        // Additional logging for specific exception types\n        if ($exception instanceof \\Core\\Exceptions\\ValidationException) {\n            error_log(\"Validation errors: \" . json_encode($exception->getErrors()));\n        }\n    }\n    \n    /**\n     * Render exception for CLI\n     */\n    private function renderCliException($exception) {\n        echo \"\\033[31mError: \" . $exception->getMessage() . \"\\033[0m\\n\";\n        \n        if ($this->debug) {\n            echo \"\\nFile: \" . $exception->getFile() . \" (Line: \" . $exception->getLine() . \")\\n\";\n            echo \"\\nStack Trace:\\n\" . $exception->getTraceAsString() . \"\\n\";\n        }\n    }\n    \n    /**\n     * Render exception for HTTP\n     */\n    private function renderHttpException($exception) {\n        $statusCode = 500;\n        \n        // Determine status code based on exception type\n        if ($exception instanceof \\Core\\Exceptions\\ValidationException) {\n            $statusCode = 422;\n        } elseif ($exception instanceof \\Core\\Exceptions\\ModelException) {\n            $statusCode = 404;\n        }\n        \n        // Set HTTP response headers\n        http_response_code($statusCode);\n        header('Content-Type: application/json');\n        \n        $response = [\n            'error' => true,\n            'message' => $exception->getMessage()\n        ];\n        \n        // Add debug information if in debug mode\n        if ($this->debug) {\n            $response['debug'] = [\n                'type' => get_class($exception),\n                'file' => $exception->getFile(),\n                'line' => $exception->getLine(),\n                'trace' => explode(\"\\n\", $exception->getTraceAsString())\n            ];\n        }\n        \n        // Add validation errors if available\n        if ($exception instanceof \\Core\\Exceptions\\ValidationException) {\n            $response['errors'] = $exception->getErrors();\n        }\n        \n        echo json_encode($response, JSON_PRETTY_PRINT);\n    }\n}\n```\n\n### 7. Classe de Roteamento\n\n```php\n// File: core/Router.php\n<?php\n\nnamespace Core;\n\nuse Core\\Exceptions\\AppException;\n\nclass Router {\n    private $routes = [\n        'GET' => [],\n        'POST' => [],\n        'PUT' => [],\n        'DELETE' => [],\n        'PATCH' => []\n    ];\n    \n    private $namedRoutes = [];\n    private $middlewares = [];\n    private $globalMiddlewares = [];\n    private $routeGroups = [];\n    private $currentGroup = null;\n    \n    /**\n     * Load routes from routes file\n     */\n    public function loadRoutes() {\n        require_once __DIR__ . '/../routes/web.php';\n        \n        if (file_exists(__DIR__ . '/../routes/api.php')) {\n            require_once __DIR__ . '/../routes/api.php';\n        }\n    }\n    \n    /**\n     * Register a GET route\n     */\n    public function get($uri, $handler, $name = null) {\n        return $this->addRoute('GET', $uri, $handler, $name);\n    }\n    \n    /**\n     * Register a POST route\n     */\n    public function post($uri, $handler, $name = null) {\n        return $this->addRoute('POST', $uri, $handler, $name);\n    }\n    \n    /**\n     * Register a PUT route\n     */\n    public function put($uri, $handler, $name = null) {\n        return $this->addRoute('PUT', $uri, $handler, $name);\n    }\n    \n    /**\n     * Register a DELETE route\n     */\n    public function delete($uri, $handler, $name = null) {\n        return $this->addRoute('DELETE', $uri, $handler, $name);\n    }\n    \n    /**\n     * Register a PATCH route\n     */\n    public function patch($uri, $handler, $name = null) {\n        return $this->addRoute('PATCH', $uri, $handler, $name);\n    }\n    \n    /**\n     * Add a route to the router\n     */\n    private function addRoute($method, $uri, $handler, $name = null) {\n        // Apply group prefix if in a group\n        if ($this->currentGroup) {\n            $uri = $this->routeGroups[$this->currentGroup]['prefix'] . $uri;\n        }\n        \n        // Replace named parameters with regex\n        $pattern = preg_replace('/\\{([a-zA-Z0-9_]+)\\}/', '(?P<$1>[^/]+)', $uri);\n        $pattern = \"#^{$pattern}$#\";\n        \n        $this->routes[$method][$pattern] = [\n            'uri' => $uri,\n            'handler' => $handler,\n            'middlewares' => $this->currentGroup \n                ? array_merge($this->routeGroups[$this->currentGroup]['middlewares'], $this->middlewares) \n                : $this->middlewares\n        ];\n        \n        // Reset middlewares for next route\n        $this->middlewares = [];\n        \n        // Store named route\n        if ($name) {\n            $this->namedRoutes[$name] = $uri;\n        }\n        \n        return $this;\n    }\n    \n    /**\n     * Apply middleware to the next registered route\n     */\n    public function middleware($middleware) {\n        if (is_array($middleware)) {\n            $this->middlewares = array_merge($this->middlewares, $middleware);\n        } else {\n            $this->middlewares[] = $middleware;\n        }\n        \n        return $this;\n    }\n    \n    /**\n     * Add a global middleware\n     */\n    public function addGlobalMiddleware($middleware) {\n        $this->globalMiddlewares[] = $middleware;\n    }\n    \n    /**\n     * Create a route group\n     */\n    public function group(array $attributes, callable $callback) {\n        $groupId = uniqid('group_');\n        \n        $this->routeGroups[$groupId] = [\n            'prefix' => $attributes['prefix'] ?? '',\n            'middlewares' => $attributes['middleware'] ?? []\n        ];\n        \n        $previousGroup = $this->currentGroup;\n        $this->currentGroup = $groupId;\n        \n        call_user_func($callback, $this);\n        \n        $this->currentGroup = $previousGroup;\n    }\n    \n    /**\n     * Generate URL for a named route\n     */\n    public function url($name, $parameters = []) {\n        if (!isset($this->namedRoutes[$name])) {\n            throw new AppException(\"Route with name '{$name}' not found\");\n        }\n        \n        $uri = $this->namedRoutes[$name];\n        \n        // Replace parameters in URI\n        foreach ($parameters as $key => $value) {\n            $uri = str_replace(\"{{$key}}\", $value, $uri);\n        }\n        \n        return $uri;\n    }\n    \n    /**\n     * Dispatch the request to the appropriate route handler\n     */\n    public function dispatch(Request $request) {\n        $method = $request->getMethod();\n        $uri = $request->getUri();\n        \n        // Remove query string\n        $uri = explode('?', $uri)[0];\n        \n        // Remove trailing slash\n        $uri = rtrim($uri, '/');\n        \n        // Default route if empty\n        if ($uri === '') {\n            $uri = '/';\n        }\n        \n        // Find matching route\n        foreach ($this->routes[$method] as $pattern => $route) {\n            if (preg_match($pattern, $uri, $matches)) {\n                // Extract route parameters\n                $params = array_filter($matches, function($key) {\n                    return !is_numeric($key);\n                }, ARRAY_FILTER_USE_KEY);\n                \n                $request->setParams($params);\n                \n                // Process global middlewares\n                foreach ($this->globalMiddlewares as $middleware) {\n                    $middlewareInstance = $this->resolveMiddleware($middleware);\n                    $response = $middlewareInstance->handle($request, function ($request) {\n                        return null;\n                    });\n                    \n                    if ($response) {\n                        return $response;\n                    }\n                }\n                \n                // Process route middlewares\n                $middlewares = $route['middlewares'];\n                return $this->processMiddlewares($middlewares, $request, function ($request) use ($route) {\n                    return $this->callRouteHandler($route['handler'], $request);\n                });\n            }\n        }\n        \n        // No matching route found\n        $response = new Response();\n        return $response->setStatus(404)->setContent([\n            'error' => true,\n            'message' => 'Route not found'\n        ]);\n    }\n    \n    /**\n     * Process middleware stack\n     */\n    private function processMiddlewares(array $middlewares, Request $request, callable $target) {\n        if (empty($middlewares)) {\n            return $target($request);\n        }\n        \n        $middleware = array_shift($middlewares);\n        $middlewareInstance = $this->resolveMiddleware($middleware);\n        \n        return $middlewareInstance->handle($request, function ($request) use ($middlewares, $target) {\n            return $this->processMiddlewares($middlewares, $request, $target);\n        });\n    }\n    \n    /**\n     * Resolve middleware class\n     */\n    private function resolveMiddleware($middleware) {\n        // Lookup middleware in aliases or use full class name\n        $middlewareMap = [\n            'auth' => \\App\\Middleware\\AuthMiddleware::class,\n            'guest' => \\App\\Middleware\\GuestMiddleware::class,\n            'tenant' => \\App\\Middleware\\TenantMiddleware::class,\n            'api' => \\App\\Middleware\\ApiMiddleware::class,\n            'throttle' => \\App\\Middleware\\ThrottleMiddleware::class,\n            // Add more aliases as needed\n        ];\n        \n        $class = isset($middlewareMap[$middleware]) ? $middlewareMap[$middleware] : $middleware;\n        \n        if (!class_exists($class)) {\n            throw new AppException(\"Middleware class '{$class}' not found\");\n        }\n        \n        return new $class();\n    }\n    \n    /**\n     * Call the route handler\n     */\n    private function callRouteHandler($handler, Request $request) {\n        if (is_callable($handler)) {\n            return $handler($request);\n        }\n        \n        if (is_string($handler)) {\n            // Resolve Controller@method syntax\n            if (strpos($handler, '@') !== false) {\n                list($controller, $method) = explode('@', $handler);\n                \n                $controllerClass = \"\\\\App\\\\Controllers\\\\{$controller}\";\n                \n                if (!class_exists($controllerClass)) {\n                    throw new AppException(\"Controller '{$controllerClass}' not found\");\n                }\n                \n                $controllerInstance = new $controllerClass();\n                \n                if (!method_exists($controllerInstance, $method)) {\n                    throw new AppException(\"Method '{$method}' not found in controller '{$controllerClass}'\");\n                }\n                \n                return $controllerInstance->$method($request);\n            }\n        }\n        \n        if (is_array($handler) && count($handler) === 2) {\n            list($controller, $method) = $handler;\n            \n            if (is_string($controller)) {\n                $controller = new $controller();\n            }\n            \n            return $controller->$method($request);\n        }\n        \n        throw new AppException(\"Invalid route handler\");\n    }\n}\n```\n\n### 8. Classe de Requisi\u00e7\u00e3o\n\n```php\n// File: core/Request.php\n<?php\n\nnamespace Core;\n\nclass Request {\n    private $params = [];\n    private $query = [];\n    private $body = [];\n    private $files = [];\n    private $headers = [];\n    private $method;\n    private $uri;\n    \n    /**\n     * Constructor - initialize from PHP globals\n     */\n    public function __construct() {\n        $this->uri = $_SERVER['REQUEST_URI'] ?? '/';\n        $this->method = $_SERVER['REQUEST_METHOD'] ?? 'GET';\n        \n        // Parse query parameters\n        $this->query = $_GET ?? [];\n        \n        // Parse request body\n        $this->parseBody();\n        \n        // Get uploaded files\n        $this->files = $_FILES ?? [];\n        \n        // Get request headers\n        $this->parseHeaders();\n    }\n    \n    /**\n     * Parse request body based on content type\n     */\n    private function parseBody() {\n        if ($this->method === 'GET') {\n            $this->body = [];\n            return;\n        }\n        \n        $contentType = $_SERVER['CONTENT_TYPE'] ?? '';\n        \n        if (strpos($contentType, 'application/json') !== false) {\n            $input = file_get_contents('php://input');\n            $this->body = json_decode($input, true) ?? [];\n        } else {\n            $this->body = $_POST ?? [];\n        }\n        \n        // Handle PUT, PATCH, DELETE methods with standard form data\n        if (in_array($this->method, ['PUT', 'PATCH', 'DELETE']) && empty($this->body)) {\n            parse_str(file_get_contents('php://input'), $this->body);\n        }\n    }\n    \n    /**\n     * Parse request headers\n     */\n    private function parseHeaders() {\n        if (function_exists('getallheaders')) {\n            $this->headers = getallheaders();\n        } else {\n            $this->headers = [];\n            foreach ($_SERVER as $name => $value) {\n                if (substr($name, 0, 5) === 'HTTP_') {\n                    $name = str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))));\n                    $this->headers[$name] = $value;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Get request method\n     */\n    public function getMethod() {\n        return $this->method;\n    }\n    \n    /**\n     * Get request URI\n     */\n    public function getUri() {\n        ",
                "tokens_used": 52338,
                "response_time": 133.21
            }
        ],
        "total_tokens_used": 368891
    }
}